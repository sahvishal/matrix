@using Falcon.App.Core.Users.Enum
@using Falcon.App.UI.HtmlHelpers
@using Falcon.App.DependencyResolution
@using Falcon.App.Core.Application
@using Falcon.App.Core.Medical.Enum
@model Falcon.App.Core.Marketing.ViewModels.PackageEditModel
<script src="/Scripts/jquery.unobtrusive-ajax.js" type="text/javascript"></script>
<style type="text/css">
    .editor-row input[type=text], .editor-row select {
        min-width: 175px;
    }

    textarea {
        width: 99%;
    }

    .test-packageprice {
        width: 120px;
        margin-left: 5px;
    }

    .test-refundprice {
        width: 120px;
        margin-left: 3px;
    }

    .background-colour {
        background-color: Gray;
    }
</style>
<style type="text/css">
    .searchTestNametxtBox {
        width: 50% !important;
    }

    .ui-autocomplete {
        max-height: 300px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
    /* IE 6 doesn't support max-height
    * we use height instead, but this forces the menu to always be this tall
    */
    * html .ui-autocomplete {
        height: 300px;
    }
</style>
<div class="content-main-column" style="padding-left: 10px;">
    @Html.EditorFor(m => m.Id)
    <div class="editor-row">
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                @Html.LabelFor(m => m.Name) @Html.ValidationMessageFor(m => m.Name)
            </div>
            @Html.TextBoxFor(m => m.Name)
        </div>
    </div>
    <div class="editor-row">
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                @Html.LabelFor(m => m.PackageTypeId) @Html.ValidationMessageFor(m => m.PackageTypeId)
            </div>
            @Html.DropDownListFor(m => m.PackageTypeId, DropDownHelper.PackageTypes())
        </div>
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                &nbsp;
            </div>
            @Html.CheckBoxFor(m => m.IsSelectedByDefaultforEvent) @Html.LabelFor(m => m.IsSelectedByDefaultforEvent)
        </div>
    </div>
    <div class="editor-field" style="overflow: hidden;">
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                @Html.LabelFor(m => m.Price) @Html.ValidationMessageFor(m => m.Price)
            </div>
            @Html.TextBoxFor(m => m.Price, new { @class = "input-price" })
        </div>
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                &nbsp;
            </div>
            @Html.CheckBoxFor(m => m.ShowInPublicWebSite) @Html.LabelFor(m => m.ShowInPublicWebSite)
        </div>
    </div>
    <div class="editor-row">
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                @Html.LabelFor(m => m.RelativeOrder) @Html.ValidationMessageFor(m => m.RelativeOrder)
            </div>
            @Html.TextBoxFor(m => m.RelativeOrder, new { @class = "input-price" })
        </div>
        <div class="editor-column-twoinrow">
            <div class="editor-label">
                @Html.LabelFor(m => m.ScreeningTime) @Html.ValidationMessageFor(m => m.ScreeningTime)
            </div>
            @{
                var selectListItems = new List<SelectListItem>();
                selectListItems.Add(new SelectListItem { Text = "Set Screening Time", Value = "-1" });
                for (int i = 5; i <= 30; i = i + 5)
                {
                    selectListItems.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString(), Selected = Model.ScreeningTime == i });
                }

            }
            @Html.DropDownListFor(m => m.ScreeningTime, selectListItems, new { @style = "min-width: 60px; width: 60%;" })
            (minutes)
        </div>
    </div>
    <div class="editor-row" style="width: 99%;">
        <div class="editor-column" style="width: 99%;">
            <div class="editor-label">
                @Html.LabelFor(m => m.HealthAssessmentTemplateId)
                <a href="javascript:void(0);" id="view-template" onclick="viewHealthAssessmentTemplateQuestion();" style="margin-left: 10px;">View</a>
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(m => m.HealthAssessmentTemplateId, DropDownHelper.GetHealthAssessmentTemplatesByType(HealthAssessmentTemplateType.Package))
            </div>
        </div>
    </div>
    <div class="editor-row" style="width: 99%;">
        <div class="editor-column" style="width: 99%;">
            <div class="editor-label">
                @Html.LabelFor(m => m.Gender)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(m => m.Gender, DropDownHelper.GetLookupSelectListItems((long)Gender.Unspecified))
            </div>
        </div>
    </div>
</div>
<div class="content-side-column">
    <h2>Roles</h2>
    @Html.ValidationMessageFor(m => m.SelectedRoles)
    <table style="width: 100%;">
        @{
            int length = Model.AllRoles.Count();
            var index = 0;
            while (index < length)
            {
                var role = Model.AllRoles.ElementAt(index++);
                var selectedRole = Model.SelectedRoles != null ? Model.SelectedRoles.Where(sr => sr == role.FirstValue).SingleOrDefault() : 0;
                <tr>
                    <td>
                        <input type="checkbox" class="role-checkbox" @(selectedRole > 0 ? "checked = checked" : "") />
                        @role.SecondValue
                        <input type="hidden" class="role-id" value="@role.FirstValue" />
                    </td>
                    @if (index >= length)
                    {
                        <td></td>
                    }
                    else
                    {
                        role = Model.AllRoles.ElementAt(index++);
                        selectedRole = Model.SelectedRoles != null ? Model.SelectedRoles.Where(sr => sr == role.FirstValue).SingleOrDefault() : 0;
                        <td>
                            <input type="checkbox" class="role-checkbox" @(selectedRole > 0 ? "checked = checked" : "") />
                            @role.SecondValue
                            <input type="hidden" class="role-id" value="@role.FirstValue" />
                        </td>
                    }
                </tr>

            }
        }
    </table>
    <br />
    <b>Note: </b><i>
        These roles can schedule/reschedule/change order, with this package.
    </i>
</div>
<div class="content-main-column full-width" style="padding-left: 10px;">
    <div class="editor-row">
        <div class="editor-column-twoinrow" style="margin-top: 10px; width: 50%;">
            <div class="editor-label">
                Package image
            </div>
            <table cellpadding="2" cellspacing="2" style="width: 100%;">
                <tr>
                    <td style="width: 27%;">
                        <input type="file" name="package_image" />
                    </td>
                    @if (Model.ForOrderDisplayFile != null && Model.ForOrderDisplayFile.Id > 0)
                    {
                        var mediaLocation = IoC.Resolve<IMediaRepository>().GetPackageImageFolderLocation();
                        <td style="float: left; width: 100px;">
                            <a href="@(mediaLocation.Url + Model.ForOrderDisplayFile.Path)" id="view_package" target="_blank">View Image</a>
                        </td>
                        <td style="float: left; width: 100px;">
                            <a href="javascript:void(0);" onclick="removeFileLink($(this), 'ForOrderDisplayFile', $('#view_package'));"
                               style="padding-top: 5px;">Remove Image</a>
                        </td>
                        @Html.HiddenFor(m => m.ForOrderDisplayFile.Id)
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                </tr>
            </table>
        </div>
        <div class="editor-column-twoinrow" style="margin-top: 10px; width: 48%;">
            <div class="editor-label">
                @Html.LabelFor(m => m.PackageInfoUrl)
            </div>
            @Html.TextBoxFor(m => m.PackageInfoUrl)
            <span style="float: right; font-style: italic;">
                (<a href="javascript:void(0);" id="testUrlAnchor">
                    Test
                    Url
                </a>)
            </span>
        </div>
    </div>
    <div class="editor-row" style="font-size: 8pt;">
        *<i> Upload only images</i>
    </div>
    <div class="editor-row">
        <div class="editor-field">
            <div class="editor-label">
                @Html.LabelFor(m => m.Description)
            </div>
            @Html.TextAreaFor(m => m.Description)
        </div>
    </div>
    <div class="editor-row">
        <div class="editor-field">
            <div class="editor-label">
                @Html.LabelFor(m => m.DescriptiononUpsellSection)
            </div>
            @Html.TextAreaFor(m => m.DescriptiononUpsellSection)
        </div>
    </div>
    <div style="clear: both;">
        <fieldset>
            <legend>
                <h2>
                    Tests
                </h2>
            </legend>

            <div class="editor-row">
                <div class="editor-field">
                    <div class="editor-label">
                        Test Name:
                    </div>
                    <input type="text" id="searchTestName" class="auto-search-tests searchTestNametxtBox" />
                </div>
            </div>

            <div id="testFieldsContainer">

            </div>
            @Html.ValidationMessageFor(m => m.SelectedTests)

            <table id="list-view" style="width: 100%; float: left;">
                <tr style="text-align: left;">
                    <th style="width:36%">
                        Test Name
                    </th>
                    <th style="width:28%">
                        Price
                    </th>
                    <th>
                        Refund Price
                    </th>
                    <th></th>
                </tr>

                <tr>
                    <td colspan="4">
                        <div id="inner-list-view" class='selectedtest-hiddendiv'>
                            <table id="test-container" style="width: 100%; float: left;"></table>



                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <b>Total</b>
                    </td>
                    <td>
                        <div style="font-weight: bold" id="totalTestPrice">
                            0.00
                        </div>
                    </td>
                    <td>
                        <div style="font-weight: bold" id="totalTestRefundPrice">
                            0.00
                        </div>
                    </td>
                    <td></td>
                </tr>
            </table>
        </fieldset>
    </div>
</div>
<script type="text/javascript" src="/Scripts/jquery.tmpl.min.js"></script>
<script language="javascript" type="text/javascript">

    var selectedTests = new Object();
    var key = 0;

    @{
    if (Model.SelectedTests != null)
    {
            foreach (var test in Model.SelectedTests)
            {
                var testDetail = Model.AllTests != null ? Model.AllTests.SingleOrDefault(st => st.TestId == test.TestId) : null;
                if (testDetail != null)
                 {
                     <text>
                selectedTests[key] = new Object();
                selectedTests[key].TestId = '@test.TestId';
                selectedTests[key].Name = '@testDetail.Name';
                selectedTests[key].Price = '@test.Price';
                selectedTests[key].RefundPrice = '@test.RefundPrice';
                selectedTests[key].Gender = '@testDetail.Gender';
                selectedTests[key].Key = key++;
                </text>
                 }
            
            }

            <text>
    $(document).ready(function () {
        renderTestsHtml();
    });
    </text>
        }

    }   

    function addTestSelected(item) {
        selectedTests[key] = new Object();
        selectedTests[key].TestId = item.TestId;
        selectedTests[key].Name = item.Name;
        selectedTests[key].Price = item.PackagePrice;        
        selectedTests[key].RefundPrice = item.PackageRefundPrice;
        selectedTests[key].Gender = item.Gender;
        selectedTests[key].Key = key++;

        renderTestsHtml();
        $(function () {
            $("#inner-list-view tr:even").addClass("alt-row");
        });
    }

    $(".test-price").change(function () {
        $(this).parents("tr:first").find(".templ-test-price").val($(this).val());
        calculateTotalTestPrice();
    });

    $(".test-refundprice").change(function () {
        $(this).parents("tr:first").find(".templ-test-refundprice").val($(this).val());
        calculateTotalTestRefundPrice();
    });

    
    function renderTestsHtml() {

        $("#test-container").empty();      
        $.each(selectedTests, function (key, test) {
            $("#selectedTestTemplate").tmpl(test).appendTo("#test-container");;
        });

        calculateTotalTestPrice();
        calculateTotalTestRefundPrice();

        if (Object.keys(selectedTests).length == 0)
            $("#list-view").hide();
        else
            $("#list-view").show();
    }


    
    $(document).ready(function () {
        renderTestsHtml();       
        $(".changedPrice").live('blur', function () {
            var key = $(this).attr("data-key");
            var price = $(this).attr("value");
            selectedTests[key].Price = price;
            calculateTotalTestPrice();
        });
        $(".changedRefundPrice").live('blur', function () {            
            var key = $(this).attr("data-key");
            var price = $(this).attr("value");           
            selectedTests[key].RefundPrice = price;            
            calculateTotalTestRefundPrice();

        });

        $("a.removeTest").live("click", function () {           
            delete selectedTests[$(this).attr('data-key')];
            renderTestsHtml();
            $(function () {
                $("#inner-list-view tr:even").addClass("alt-row");
            });
            return false;
        });       
    });

    function calculateTotalTestPrice() {
        var totalTestPrice = 0;        
        var testPriceTextboxes = $('tr.gender:visible').find('.templ-test-price');
        $.each(testPriceTextboxes, function (key, testPriceTextbox) {//debugger;

            totalTestPrice += Number(parseFloat($(testPriceTextbox).val()).toFixed(2));
        });
        $('#totalTestPrice').html('$' + totalTestPrice.toFixed(2));

    }

    function calculateTotalTestRefundPrice() {
        var totalTestRefundPrice = 0;        
        var testRefundPriceTextboxes = $('tr.gender:visible').find('.templ-test-refundprice');
        
        $.each(testRefundPriceTextboxes, function (key, testRefundPriceTextbox) {//debugger;

            totalTestRefundPrice += Number(parseFloat($(testRefundPriceTextbox).val()).toFixed(2));
        });
        $('#totalTestRefundPrice').html('$' + totalTestRefundPrice.toFixed(2));

    }
</script>
<script language="javascript" type="text/javascript">

    var selectedRoles = new Object();
    var key_role = 0;

    @{
        if (Model.SelectedRoles != null)
        {
            foreach (var role in Model.SelectedRoles)
            {
            <text>
    selectedRoles[key_role] = new Object();
    selectedRoles[key_role].RoleId = '@role';
    selectedRoles[key_role].Key = key_role++;
    </text>
            }

            <text>
    $(document).ready(function () {
        renderRoleHtml();
    });
    </text>
        }

    }

    function addRoleSelected(cellReference) {
        selectedRoles[key_role] = new Object();
        selectedRoles[key_role].RoleId = cellReference.find(".role-id").val();
        selectedRoles[key_role].Key = key_role++;

        renderRoleHtml();
    }

    function removeRoleSelected(cellReference) {
        delete selectedRoles[cellReference.find('.selectedrole-key').val()];
        renderRoleHtml();
    }

    function renderRoleHtml() {
        $("div.selectedrole-hiddendiv").remove();
        $.each(selectedRoles, function (index, role) {
            var appendTo = $(".role-id[value=" + role.RoleId + "]");
            if (appendTo.length < 1) return;

            appendTo.parent().append($("#selectedRoleTemplate").tmpl(role));
        });
    }

    $(".role-checkbox").click(function () {
        var cellReference = $(this).parents("td:first");
        if ($(this).attr("checked")) {
            addRoleSelected(cellReference);
        }
        else {
            removeRoleSelected(cellReference);
        }
    });

</script>
<script id="selectedTestTemplate" type="text/x-jquery-tmpl">
    
    <tr class="gender ${Gender}" gender="${Gender}">
        <td style="width:35%">           
            ${Name}
        </td>
        <td style="width:28%">
            $ <input type="text" name="SelectedTests[${Key}].Price" data-key="${Key}" class='templ-test-price input-price changedPrice' value="${Price}"  />
        </td>
        <td style="width:25%">
            $ <input type="text" name="SelectedTests[${Key}].RefundPrice" data-key="${Key}" class='templ-test-refundprice input-price changedRefundPrice' value="${RefundPrice}" />
        </td>
        <td style="width:25%">
            [<a href="javascript:void(0);" data-key="${Key}" class="removeTest">Remove</a>]
        </td>
        <input type="hidden" name="SelectedTests.Index" class='selectedtest-key' value="${Key}" />
        <input type="hidden" name="SelectedTests[${Key}].TestId" value="${TestId}" />
    </tr>  
</script>



<script id="selectedRoleTemplate" type="text/x-jquery-tmpl">
    <div style="display: none;" class='selectedrole-hiddendiv'>
        <input type="hidden" name="SelectedRoles.Index" class='selectedrole-key' value="${Key}" />
        <input type="text" name="SelectedRoles[${Key}]" value="${RoleId}" />
    </div>
</script>
<script type="text/javascript" language="javascript">

    $(document).ready(function () {

        $("form").submit(function () {
            $(".input-price").each(function () {
                var value = $.trim($(this).val());
                if (value.length < 1) {
                    $(this).val("0");
                }
                else if (isNaN(value)) {
                    $(this).val("0");
                }
            });

            var gender = $("#Gender").val();
            if (gender != both) {
                $.each(selectedTests, function (key, val) {
                    if (selectedTests[key].Gender != both)
                    {
                        if (selectedTests[key].Gender != gender) {
                            delete selectedTests[key];
                        }
                    }
                   
                });
            }
           
        });

        $("input[type=text][id*='PackageInfoUrl']").change(function () {
            onChangeText($("#testUrlAnchor"));
        });

        $("input[type=submit]").click(ValidateFileType);
        @if (Model.ForOrderDisplayFile != null && Model.ForOrderDisplayFile.Id > 0)
        {
            <text>
        $("input[type='hidden'][name*='ForOrderDisplayFile']").val('@Model.ForOrderDisplayFile.Id');
        </text>
        }

        showHideViewTemplate();
        $("#HealthAssessmentTemplateId").bind("change", function () { showHideViewTemplate(); });
    });

    function removeFileLink(ctrlRef, controlIdString, viewLinkControlElement) {
        ctrlRef.hide();
        $("input[type=hidden][id*='" + controlIdString + "']").val(0);
        viewLinkControlElement.hide();
    }

    function checkValidImage() {
        var fileName = $("input[name='package_image']").val();
        var fileExpression = /^.+(.gif|.GIF|.jpg|.JPG|.jpeg|.JPEG|.bmp|.BMP|.png|.PNG)$/;
        if ($.trim(fileName).length > 0 && fileExpression.exec(fileName) == null) {
            alert('Only valid Image file types (gif, bmp, png, jpg or jpeg) are allowed!');
            return false;
        }

        return true;
    }

    function testPackageInfoUrl() {
        var url = $("input[type=text][id*='PackageInfoUrl']").val();


        if ($.trim(url).length > 0) {
            var childWindow = window.open(url, 'TestUrl', 'width=600, height=500', false);
        }
    }

    function onChangeText(anchor) {
        var url = $("input[type=text][id*='PackageInfoUrl']").val();

        if ($.trim(url).length > 0) {
            anchor.attr("href", url).attr("target", "_blank");
        }
        else {
            anchor.attr("href", "javascript:void(0);").attr("target", "");
        }
    }

    function ValidateFileType() {
        var result = checkValidImage();
        if (!result) return false;

        return true;
    }
</script>
<script type="text/javascript" language="javascript">
    function viewHealthAssessmentTemplateQuestion() {
        var templateId = $("#HealthAssessmentTemplateId").val();
        if (parseInt(templateId) > 0) {
            window.open("/Medical/HealthAssessment/View?id=" + templateId, "Template_Question", "width=720, height=620, scrollbars=1");
        }
    }

    function showHideViewTemplate() {
        var templateId = $("#HealthAssessmentTemplateId").val();
        if (parseInt(templateId) > 0) {
            $("#view-template").show();
        }
        else {
            $("#view-template").hide();
        }
    }
</script>

<script type="text/javascript">
    var male = '@((long)Gender.Male)';
    var Female = '@((long)Gender.Female)';
    var both = '@((long)Gender.Unspecified)';
    $("#Gender").change(function () {
        var gender = $(this).val();
        SetPackagesBaseOnGender(gender);
       
    });

    $(document).ready(function () {
        SetPackagesBaseOnGender('@Model.Gender');
    });

    function SetPackagesBaseOnGender(gender) {
        if (gender != both) {            
            var testToHide = $("#inner-list-view tr.gender[gender!=@((long)Gender.Unspecified)][gender!=" + gender + "]");
            $(testToHide).hide();

            $("#inner-list-view tr.gender[gender=" + gender + "]").show();
          
        } else {
            $("#inner-list-view tr.gender").show();
        }
        calculateTotalTestPrice();
        calculateTotalTestRefundPrice();
    }
</script>

<script type="text/javascript">

    var allTests = new Array();
    var testId = null;
    @if(Model.AllTests!=null && Model.AllTests.Any())
    {

    foreach (var test in Model.AllTests)
        {
        <text>
    var testData = new Object();
    testData.TestId = '@test.TestId';
    testData.Name = '@test.Name';
    testData.PackagePrice = '@test.PackagePrice';
    testData.PackageRefundPrice = '@test.PackageRefundPrice';
    testData.Gender = '@(test.Gender)';
    allTests.push(testData);

    </text>
        }
    }

    $(".auto-search-tests").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: "/marketing/Package/GetPackageTestAccessedByName",
                type: "GET",
                dataType: "json",
                data: {
                    prefixText: $("#searchTestName").val(),
                    gender: $("#Gender").val()
                },
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            val: item.TestId     // EDIT
                        };
                    }));
                }
            });
        },
        minLength: 1,
        select: function (event, ui) {

            var isExistInSelectedTest = false;
            $.each(selectedTests, function (key, val) {
                if (ui.item.val == selectedTests[key].TestId) {
                    alert('This test is already added.');
                    return isExistInSelectedTest = true;
                }
            });

            if (isExistInSelectedTest) {
                $(this).val("");
                return false;
            }


            allTests.forEach(function (item) {
                if (ui.item.val == item.TestId) {
                    item.Name = ui.item.label;
                    addTestSelected(item);
                }
            });

            $(this).val("");
            return false;
        }
    });
   
    $(function () {
        $("#inner-list-view tr:even").addClass("alt-row");
    });


    $(function () {
        $("#inner-list-view tr:not(:has(th))").hover(function () {
            $(this).addClass('row-hover');
        },
        function () {
            $(this).removeClass('row-hover');
        });
    });
</script>