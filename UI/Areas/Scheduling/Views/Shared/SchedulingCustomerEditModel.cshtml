@using Falcon.App.UI.HtmlHelpers
@using Falcon.App.Core.Enum
@using Falcon.App.DependencyResolution
@using Falcon.App.Core.Application
@model Falcon.App.Core.Scheduling.ViewModels.SchedulingCustomerEditModel
@{
    var settings = IoC.Resolve<ISettings>();
    var toolTipRepository = IoC.Resolve<IToolTipRepository>();
    var insuranceIdLabel = toolTipRepository.GetToolTipContentByTag(ToolTipType.InsuranceIdLabel);
    insuranceIdLabel = string.IsNullOrEmpty(insuranceIdLabel) ? "Insurance Id" : insuranceIdLabel;
    
    if (!string.IsNullOrEmpty(Model.InsuranceIdLabel))
    {
        insuranceIdLabel = Model.InsuranceIdLabel;
    }

}
<script src="/App/jquery/js/json2.js" language="javascript" type="text/javascript"></script>
<script type="text/javascript" src="/App/jquery/js/jquery.sexy-combo-2.0.6.js"></script>
<link type="text/css" href="/App/jquery/css/sexy-combo.css" rel="Stylesheet" />
<link type="text/css" href="/App/jquery/css/sexy.css" rel="Stylesheet" />
<style type="text/css">
    .editor-label {
        color: #000000;
        font-size: 9pt;
    }

    .small-text {
        color: #000000;
        font-size: 9pt;
    }

    div.sexy {
        width: 418px;
    }

        div.sexy input {
            width: 411px;
            height: 24px;
        }

        div.sexy div.icon {
            left: 401px;
            height: 24px;
        }
</style>
<div class="information_form">
    @if (Model.Id == 0)
    {
        <div id="customertype-selection-div">
            <div class="tab_green tabs left-float select-radiobox">
                <label><input type="radio" onclick="newCustomer();" checked="checked" name="customer-type-selection" /> New Customer </label>
                <span style="display: none;" class="tip-text">
                    If you have never signed up with @settings.CompanyName before you can select new customer (this is the default selection). If you are not sure, just sign up as a new customer.
                </span>
            </div>
            <div class="tab_default tabs left-float select-radiobox">
                <label><input type="radio" onclick="onClickLogin();" name="customer-type-selection" /> Returning Customer </label>
                <span style="display: none;" class="tip-text">
                    If you remember your username and password, you should use this option. It will speed up your registration process, as we will have all your information prefilled.
                </span>
            </div>
            <div class="clearfix"></div>
        </div>
    }
    <div id="newcustomer-section-div">
        <div id="prospectCustomerInputs">
            <ul>
                <li>
                    <div class="left-float half">
                        <label>First Name</label>@Html.ValidationMessageFor(m => m.FullName.FirstName)
                        @Html.TextBoxFor(m => m.FullName.FirstName, new { autocomplete = "off", @class = "textbox" })
                    </div>
                    <div class="right-float half">
                        <label>Last Name</label>@Html.ValidationMessageFor(m => m.FullName.LastName)
                        @Html.TextBoxFor(m => m.FullName.LastName, new { autocomplete = "off", @class = "textbox" })
                    </div>
                    <div class="clearfix"></div>
                </li>
                <li>
                    <div class="left-float half">
                        <label>Email</label>@Html.ValidationMessageFor(m => m.Email)
                        @Html.TextBoxFor(m => m.Email, new { autocomplete = "off", @class = "textbox" })
                    </div>
                    <div class="right-float half phone-number-div">
                        <label>Best Number To Call</label>
                        <div class="right-float half">
                            @Html.ValidationMessageFor(m => m.HomeNumber)
                        </div>
                        @Html.TextBoxFor(m => m.HomeNumber, new { autocomplete = "off", @class = "textbox phone-number" })
                    </div>
                    <div class="clearfix"></div>
                </li>
                <li>
                    <div class="left-float half">
                        <label>Date of Birth</label>@Html.ValidationMessageFor(m => m.DateofBirth)
                        @Html.TextBoxFor(m => m.DateofBirth, new { @class = "datePicker-dob textbox" })
                    </div>
                    <div class="right-float half">
                        <label>Gender</label>@Html.ValidationMessageFor(m => m.Gender)
                        @Html.DropDownListFor(m => m.Gender, DropDownHelper.Genders(), new { @class = "select" })
                    </div>
                    <div class="clearfix"></div>
                </li>
                @if (Model.Id < 1)
                {
                    <li class="login-info-div">
                        <h5 class="highlight_box p10 txt-brown"><em>The email you have entered will be the username for your login with us. </em></h5>
                    </li>
                    <li class="login-info-div">
                        <div class="left-float half">
                            <label>Password</label>@Html.ValidationMessageFor(m => m.Password)
                            @Html.PasswordFor(m => m.Password, new { @class = "textbox no-mouseflow" })
                            <h6 class="hint"><em>between 6 and 64 characters </em></h6>
                        </div>
                        <div class="right-float half">
                            <label>Confirm Password</label>@Html.ValidationMessageFor(m => m.ConfirmPassword)
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "textbox no-mouseflow" })
                            <h6 class="hint"><em>same as password </em></h6>
                        </div>
                        <div class="left-float" style="margin-top: 5px;">
                            <em>Note: This is a temporary password. You will have to change this on first time login.</em>
                        </div>
                        <div class="clearfix"></div>
                    </li>
                }
                <li>
                    <div class="left-float half insurance-info-div">
                        <label>@insuranceIdLabel</label>@Html.ValidationMessageFor(m => m.InsuranceId)
                        @Html.TextBoxFor(m => m.InsuranceId, new { @class = "textbox", @style = "width:192px;" })
                        @Html.HiddenFor(m => m.InsuranceIdRequired)
                    </div>
                    <div class="left-float half ssn-info-div">
                        <label>SSN</label>
                        @Html.TextBoxFor(m => m.Ssn, new { @class = "textbox mask-ssn", @style = "width:192px;" })
                    </div>
                    <div class="clearfix"></div>
                </li>
                <li>
                    <div class="full">
                        <label>How did you hear about us? </label>
                        <select id="marketingsourceselect" name="marketingsourceselect" class="select" style="width:418px;"></select>
                    </div>
                    @Html.TextBoxFor(m => m.MarketingSource, new { @style = "display:none;" })
                    <div class="clearfix"></div>
                </li>
                @Html.HiddenFor(m => m.EnableTexting)
                <li style="display: @(Model.EnableTexting?"block":"none")">
                    <div class="full">
                        <div style="float: left"><label>Do you wish to receive SMS alert? </label></div>
                        <div style="float: left;margin-left: 26px; margin-top: 3px;">
                            @{
                                if (Model.ConfirmationToEnablTexting != null)
                                {
                                    if (Model.ConfirmationToEnablTexting.Value)
                                    {
                                        <input type="radio" name="ConfirmationToEnablTexting" value="@(true)" checked="checked" /> <text> Yes &nbsp;&nbsp;</text>
                                        <input type="radio" name="ConfirmationToEnablTexting" value="@(false)" /> <text> No</text>
                                    }
                                    else
                                    {
                                        <input type="radio" name="ConfirmationToEnablTexting" value="@(true)" /> <text> Yes &nbsp;&nbsp;</text>
                                        <input type="radio" name="ConfirmationToEnablTexting" value="@(false)" checked="checked" /><text> No</text>
                                    }
                                }
                                else
                                {
                                    <input type="radio" name="ConfirmationToEnablTexting" value="@(true)" /><text> Yes &nbsp;&nbsp;</text>
                                    <input type="radio" name="ConfirmationToEnablTexting" value="@(false)" /><text> No</text>
                                }
                                @Html.ValidationMessageFor(m => m.ConfirmationToEnablTexting)
                            }

                        </div>
                        <br />
                        <div class="phoneCell" style="float: left; margin-top: 10px;display:@(Model.ConfirmationToEnablTexting!=null && Model.ConfirmationToEnablTexting==true?"inline-block":"none")">
                            Please enter your Cell Number:
                            @Html.TextBoxFor(m => m.PhoneCell, new { @class = "phone-number", @style = "margin-left: 70px;padding: 7px 5px" })
                            @Html.ValidationMessageFor(m => m.PhoneCell)
                        </div>

                    </div>
                    <div class="clearfix"></div>
                </li>
            </ul>
            <div class="editor-row shipping-address" style="display:none;">
                <strong>Shipping Address </strong>
                <br />
                @Html.EditorFor(m => m.ShippingAddress)
            </div>
            @Html.HiddenFor(m => m.Id, new { @class = "customer-id" })
        </div>
    </div>

    <div id="login-section-div" style="display: none;">
        <div class="login-content-toggle" style="padding-top: 60px; padding-bottom: 60px;">
            <img src="/App/Images/loading.gif" alt="" />
            <span id="loading-text-span" style="font-weight: bold; font-size: 10pt;">
                Loading
            </span>
        </div>
        <div class="login-content-toggle" id="login-content" style="display: none;">
        </div>
    </div>
</div>

<link href="/Content/Styles/jquery.qtip.min.css" rel="stylesheet" type="text/css" />
<script src="/Scripts/jquery.qtip.min.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript">

    $('.select-radiobox').qtip({
        content: {
            title: function (api) {
                return "";
            },
            text: function (api) {
                return $(this).find('span.tip-text').html();
            }
        },
        style: {
            width: '300px',
        }
    });

    var toSaveProspectCustomer = true;
    var _pcCartGuid = null;

    //hideCountryCode();

    function setMarketingSourceSelectBox(optionhtml) {
        $("#marketingsourceselect").html(optionhtml);
        $("#marketingsourceselect").sexyCombo({ hiddenSuffix: '_hidden', emptyText: 'Type here for quick search', changeCallback: onChangeCallBackMktSource @(string.IsNullOrEmpty(Model.MarketingSource) ? "" : ", triggerSelected: true") });

    }

    function setToSaveProspectCustomer(toSave, guid) {
        _pcCartGuid = guid;
    }

    $(document).ready(function () {
        var parentDiv = $("#prospectCustomerInputs");
        parentDiv.find("select, textarea, input[type=text]").change(function () {
            SaveProspectCustomer();
        });

        if ('@Model.CaptureSsn' == '@Boolean.TrueString') {
            showSsnInfo(true);
        }
        else {
            showSsnInfo(false);
        }
    });



    var prospectCustomer = {
        "Id": 0,
        "FirstName": "",
        "LastName": "",
        "Gender": 0,
        "Address": { "StreetAddressLine1": "", "StreetAddressLine2": "", "City": "", "StateId": "", "CountryId": "", "ZipCode": "" },
        "CallBackPhoneNumber": null,
        "BirthDate": null,
        "Email": null,
        "MarketingSource": null,
        "Source": '@((int)Falcon.App.Core.Sales.Enum.ProspectCustomerSource.Online)',
        "Tag": '@((int)ProspectCustomerTag.OnlineSignup)'
    };


    function GetCurrentProspectCustomer() {//debugger;
        var parentDiv = $("#prospectCustomerInputs");

        prospectCustomer.FirstName = parentDiv.find("input[type=text][id*='FirstName']").val();
        prospectCustomer.LastName = parentDiv.find("input[type=text][id*='LastName']").val();
        prospectCustomer.Address.StreetAddressLine1 = parentDiv.find("input[type=text][id*='StreetAddressLine1']").val();
        prospectCustomer.Address.StreetAddressLine2 = parentDiv.find("input[type=text][id*='StreetAddressLine2']").val();
        prospectCustomer.Address.City = parentDiv.find("input[type=text][id*='City']").val();
        prospectCustomer.MarketingSource = parentDiv.find("input[type=text][id*='MarketingSource']").val();

        if ($.trim(parentDiv.find("input[type=text][id*='DateofBirth']").val()).length > 0)
            prospectCustomer.BirthDate = parentDiv.find("input[type=text][id*='DateofBirth']").val();

        if (parentDiv.find("select[id*='Gender'] option:selected").val() > 0)
            prospectCustomer.Gender = parentDiv.find("select[id*='Gender'] option:selected").val();

        if (parentDiv.find("select[id*='State'] option:selected").val() > 0)
            prospectCustomer.Address.StateId = parentDiv.find("select[id*='State'] option:selected").val();

        prospectCustomer.Address.ZipCode = parentDiv.find("input[type=text][id*='ZipCode']").val();

        if (parentDiv.find("select[id*='Country'] option:selected").val() > 0)
            prospectCustomer.Address.CountryId = parentDiv.find("select[id*='Country'] option:selected").val();

        var email = parentDiv.find("input[type=text][id*='Email']").val();
        if (email.indexOf('@@') > 0) {
            var split = email.split('@@');
            prospectCustomer.Email = { 'Address': split[0], 'DomainName': split[1] };
        }

        var phoneNumber = parentDiv.find("input[type=text].phone-number").val();
        var areaCode = "";
        var number = "";
        if (phoneNumber != '') {
            phoneNumber = phoneNumber.replace("(", "");
            phoneNumber = phoneNumber.replace(")", "");
            phoneNumber = phoneNumber.replace(/_/gi, "");
            phoneNumber = phoneNumber.replace(/-/gi, "");
            areaCode = phoneNumber.substring(0, 3);
            number = phoneNumber.substring(3, phoneNumber.length);
        }

        if (areaCode.length > 0 && number.length > 0) {
            prospectCustomer.CallBackPhoneNumber = { 'AreaCode': areaCode, 'Number': number };
        }
        return prospectCustomer;
    }


    function SaveProspectCustomer() {
        if (!toSaveProspectCustomer) return;

        prospectCustomer = GetCurrentProspectCustomer();

        if (!checkForRequiredValues()) {
            return;
        }

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            url: "/Scheduling/Online/SaveProspectCustomerAndUpdateCart",
            data: "{'guid' : '" + _pcCartGuid + "', 'prospectCustomerEditModel': " + JSON.stringify(prospectCustomer) + "}",
            success: function () {

            },
            error: function () {

            }
        });
    }

    function checkForRequiredValues() {//debugger;
        if (prospectCustomer.FirstName.length > 0 && prospectCustomer.LastName.length > 0 && (prospectCustomer.Email != null || prospectCustomer.CallBackPhoneNumber != null)) {
            return true;
        }
        return false;
    }

    function getShippingAddress() {
        return getAddress($(".shipping-address"));
    }
</script>
<script language="javascript" type="text/javascript" src="/App/JavascriptFiles/JSonHelper.js"></script>
<script language="javascript" type="text/javascript">


    function onClickLogin() {
        toggleCustomerSection();

        $("loading-text-span").text("Loading");
        $.ajax({
            type: "GET",
            url: '/Login/UserLogin',
            data: '{}',
            dataType: 'html',
            success: function (result) {//debugger;

                $("#login-content").html(result);
                $(".login-content-toggle").toggle();
                setCallBack(callBackAfterLoginValidates, $("#prospectCustomerInputs input[type=hidden].customer-id"), null);
            },
            error: function () {
                alert("There was some trouble while opening User Login section! \n PLease try again or, call our Care Agent at @settings.PhoneTollFree");

                toggleCustomerSection();
            }
        });
    }

    function toggleCustomerSection() {
        if ($("#newcustomer-section-div:visible").length > 0) {
            $("#newcustomer-section-div").css("display", "none");
            $("#login-section-div").css("display", "inline-block");

            if ($("#login-content:visible").length > 0) {
                $(".login-content-toggle").toggle();
            }
        }
        else {
            $("#newcustomer-section-div").css("display", "inline-block");;
            $("#login-section-div").css("display", "none");
        }

        var activeDiv = $("div .tab_green");
        var inActiveDiv = $("div .tab_default");
        activeDiv.removeClass("tab_green").addClass("tab_default");
        inActiveDiv.removeClass("tab_default").addClass("tab_green");
    }


    function newCustomer() {
        toggleCustomerSection();
    }

    function callBackAfterLoginValidates(customerId) {
        toSaveProspectCustomer = false;
        $("#customertype-selection-div").hide();

        var guid = getGuid();

        $.ajax({
            type: "Get",
            url: '/Scheduling/Online/UpdateCartwithReturningCustomer?guid=' + guid + '&customerId=' + customerId,
            data: '{}',
            dataType: 'json',
            success: function (model) {
                loadData(model);

                toggleCustomerSection();
            }, error: function () { }
        });
    }

    function loadData(customerModel) {
        //debugger;
        if (customerModel == null) return;

        var parentDiv = $("#prospectCustomerInputs");

        parentDiv.find("input[type=text][id*='FirstName']").val(customerModel.FullName.FirstName);
        parentDiv.find("input[type=text][id*='LastName']").val(customerModel.FullName.LastName);

        parentDiv.find("input[type=text][id*='Email']").val(customerModel.Email);

        parentDiv.find("input[type=text].phone-number").val(customerModel.HomeNumber);

        parentDiv.find("input[type=text].phone-number").unmask();
        parentDiv.find("input[type=text].phone-number").mask('(999)999-9999');

        parentDiv.find("div.phoneCell input[type=text].phone-number").val(customerModel.PhoneCell);
        if (customerModel.DateofBirth != null) {
            customerModel.DateofBirth = correctDateExpression(customerModel.DateofBirth);
            parentDiv.find("input[type=text][id*='DateofBirth']").val((customerModel.DateofBirth.getMonth() + 1) + "/" + customerModel.DateofBirth.getDate() + "/" + customerModel.DateofBirth.getFullYear());
        }

        parentDiv.find("#EnableTexting").val(customerModel.EnableTexting);
        if (customerModel.ConfirmationToEnablTexting == true) {
            $("input:radio[name='ConfirmationToEnablTexting'][value='True']").attr('checked', true);
            $("input:radio[name='ConfirmationToEnablTexting'][value='False']").attr('checked', false);
            $(".phoneCell").show();

        } else {
            $("input:radio[name='ConfirmationToEnablTexting'][value='False']").attr('checked', true);
            $("input:radio[name='ConfirmationToEnablTexting'][value='True']").attr('checked', false);
            $(".phoneCell").hide();
        }

        if (customerModel.Gender != null) {
            parentDiv.find("select[id*='Gender'] option[value=" + customerModel.Gender + "]").attr("selected", true);
        }

        parentDiv.find("input[type=text][id*='InsuranceId']").val(customerModel.InsuranceId);

        $(".login-info-div").hide();
        setAddress($(".shipping-address"), customerModel.ShippingAddress);

        setAddress($("#shipping-address"), customerModel.ShippingAddress);

        setAddress($("#billing-address"), customerModel.ShippingAddress);

    }

    function onChangeCallBackMktSource() {
        var value = this.getCurrentHiddenValue();
        var parentDiv = $("#prospectCustomerInputs");
        parentDiv.find("input[type=text][id*='MarketingSource']").val(value);
        SaveProspectCustomer();
    }

    function showInsuranceInfo(show) {
        if (show) {
            $(".insurance-info-div").show();

        }
        else {
            $(".insurance-info-div").hide();
        }
    }

    function showSsnInfo(show) {
        if (show) {
            $(".ssn-info-div").show();

        }
        else {
            $(".ssn-info-div").hide();
        }
    }

    function trimName() {//debugger;
        var parentDiv = $("#prospectCustomerInputs");

        var firstNameControl = parentDiv.find("input[type=text][id*='FirstName']");
        var lastNameControl = parentDiv.find("input[type=text][id*='LastName']");

        $(firstNameControl).val($.trim($(firstNameControl).val()));
        $(lastNameControl).val($.trim($(lastNameControl).val()));
    }

    $("input:radio[name='ConfirmationToEnablTexting']").click(function () {
        if ($(this).val() == 'True') {
            $("div.phoneCell").show();
        } else {
            $("div.phoneCell").hide();
        }
    });
</script>
