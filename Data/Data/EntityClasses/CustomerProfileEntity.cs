///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: 2.6
// Code is generated on: 27 June 2019 17:22:52
// Code is generated using templates: SD.TemplateBindings.SharedTemplates.NET20
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
#if !CF
using System.Runtime.Serialization;
#endif
using System.Xml.Serialization;
using Falcon.Data;
using Falcon.Data.HelperClasses;
using Falcon.Data.FactoryClasses;
using Falcon.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Falcon.Data.EntityClasses
{
	
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>
	/// Entity class which represents the entity 'CustomerProfile'.<br/><br/>
	/// 
	/// </summary>
	[Serializable]
	public partial class CustomerProfileEntity : CommonEntityBase, ISerializable
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		#region Class Member Declarations
		private EntityCollection<CallQueueCustomerEntity> _callQueueCustomer;
		private EntityCollection<CallRoundCallQueueEntity> _callRoundCallQueue;
		private EntityCollection<ChaseOutboundEntity> _chaseOutbound;
		private EntityCollection<ClickConversionEntity> _clickConversion;
		private EntityCollection<CurrentMedicationEntity> _currentMedication;
		private EntityCollection<CustomerAccountGlocomNumberEntity> _customerAccountGlocomNumber;
		private EntityCollection<CustomerBillingAccountEntity> _customerBillingAccount;
		private EntityCollection<CustomerCallQueueCallAttemptEntity> _customerCallQueueCallAttempt;
		private EntityCollection<CustomerChaseCampaignEntity> _customerChaseCampaign;
		private EntityCollection<CustomerChaseChannelEntity> _customerChaseChannel;
		private EntityCollection<CustomerChaseProductEntity> _customerChaseProduct;
		private EntityCollection<CustomerClinicalQuestionAnswerEntity> _customerClinicalQuestionAnswer;
		private EntityCollection<CustomerEligibilityEntity> _customerEligibility;
		private EntityCollection<CustomerEventTestFindingEntity> _customerEventTestFinding;
		private EntityCollection<CustomerHealthInfoEntity> _customerHealthInfo;
		private EntityCollection<CustomerHealthInfoArchiveEntity> _customerHealthInfoArchive;
		private EntityCollection<CustomerIcdCodeEntity> _customerIcdCode;
		private EntityCollection<CustomerOrderHistoryEntity> _customerOrderHistory;
		private EntityCollection<CustomerPredictedZipEntity> _customerPredictedZip;
		private EntityCollection<CustomerPrimaryCarePhysicianEntity> _customerPrimaryCarePhysician;
		private EntityCollection<CustomerProfileHistoryEntity> _customerProfileHistory;
		private EntityCollection<CustomerSurveyEntity> _customerSurvey;
		private EntityCollection<CustomerTagEntity> _customerTag;
		private EntityCollection<CustomerTargetedEntity> _customerTargeted;
		private EntityCollection<CustomerUnsubscribedSmsNotificationEntity> _customerUnsubscribedSmsNotification;
		private EntityCollection<CustomerWarmTransferEntity> _customerWarmTransfer;
		private EntityCollection<DependentDisqualifiedTestEntity> _dependentDisqualifiedTest;
		private EntityCollection<DirectMailEntity> _directMail;
		private EntityCollection<DisqualifiedTestEntity> _disqualifiedTest;
		private EntityCollection<EventCustomerQuestionAnswerEntity> _eventCustomerQuestionAnswer;
		private EntityCollection<EventCustomerResultEntity> _eventCustomerResult;
		private EntityCollection<EventCustomersEntity> _eventCustomers;
		private EntityCollection<EventPaymentDetailsEntity> _eventPaymentDetails;
		private EntityCollection<FillEventCallQueueEntity> _fillEventCallQueue;
		private EntityCollection<GuardianDetailsEntity> _guardianDetails;
		private EntityCollection<HospitalPartnerCustomerEntity> _hospitalPartnerCustomer;
		private EntityCollection<LanguageBarrierCallQueueEntity> _languageBarrierCallQueue;
		private EntityCollection<MailRoundCallQueueEntity> _mailRoundCallQueue;
		private EntityCollection<MedicationEntity> _medication;
		private EntityCollection<MemberUploadLogEntity> _memberUploadLog;
		private EntityCollection<NoShowCallQueueEntity> _noShowCallQueue;
		private EntityCollection<PhysicianInvoiceItemEntity> _physicianInvoiceItem;
		private EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity> _preAssessmentCustomerCallQueueCallAttempt;
		private EntityCollection<PreQualificationResultEntity> _preQualificationResult;
		private EntityCollection<ProspectCustomerEntity> _prospectCustomer;
		private EntityCollection<RapsEntity> _raps;
		private EntityCollection<ReferralEntity> _referral;
		private EntityCollection<RequiredTestEntity> _requiredTest;
		private EntityCollection<ResultArchiveUploadLogEntity> _resultArchiveUploadLog;
		private EntityCollection<SuspectConditionEntity> _suspectCondition;
		private EntityCollection<TempCartEntity> _tempCart;
		private EntityCollection<TestimonialEntity> _testimonial;
		private EntityCollection<UncontactedCustomerCallQueueEntity> _uncontactedCustomerCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaLanguageBarrierCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaUncontactedCustomerCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaMailRoundCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaCallRoundCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaNoShowCallQueue;
		private EntityCollection<AccountEntity> _accountCollectionViaCallQueueCustomer;
		private EntityCollection<AccountEntity> _accountCollectionViaFillEventCallQueue;
		private EntityCollection<ActivityTypeEntity> _activityTypeCollectionViaCallQueueCustomer;
		private EntityCollection<AddressEntity> _addressCollectionViaCustomerPrimaryCarePhysician;
		private EntityCollection<AddressEntity> _addressCollectionViaCustomerPrimaryCarePhysician_;
		private EntityCollection<AfaffiliateCampaignEntity> _afaffiliateCampaignCollectionViaEventCustomers;
		private EntityCollection<AfaffiliateCampaignMarketingMaterialEntity> _afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer;
		private EntityCollection<BillingAccountEntity> _billingAccountCollectionViaCustomerBillingAccount;
		private EntityCollection<CallQueueEntity> _callQueueCollectionViaCallQueueCustomer;
		private EntityCollection<CallQueueCriteriaEntity> _callQueueCriteriaCollectionViaCallQueueCustomer;
		private EntityCollection<CallQueueCustomerEntity> _callQueueCustomerCollectionViaCustomerCallQueueCallAttempt;
		private EntityCollection<CallsEntity> _callsCollectionViaPreQualificationResult;
		private EntityCollection<CallsEntity> _callsCollectionViaCustomerAccountGlocomNumber;
		private EntityCollection<CallsEntity> _callsCollectionViaCustomerCallQueueCallAttempt;
		private EntityCollection<CallsEntity> _callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
		private EntityCollection<CallUploadEntity> _callUploadCollectionViaDirectMail;
		private EntityCollection<CampaignEntity> _campaignCollectionViaDirectMail;
		private EntityCollection<CampaignEntity> _campaignCollectionViaEventCustomers;
		private EntityCollection<CampaignEntity> _campaignCollectionViaCallQueueCustomer;
		private EntityCollection<ChargeCardEntity> _chargeCardCollectionViaTempCart;
		private EntityCollection<ChaseCampaignEntity> _chaseCampaignCollectionViaCustomerChaseCampaign;
		private EntityCollection<ChaseChannelLevelEntity> _chaseChannelLevelCollectionViaCustomerChaseChannel;
		private EntityCollection<ChaseGroupEntity> _chaseGroupCollectionViaChaseOutbound;
		private EntityCollection<ChaseOutboundEntity> _chaseOutboundCollectionViaCustomerChaseProduct;
		private EntityCollection<ChaseOutboundEntity> _chaseOutboundCollectionViaCustomerChaseChannel;
		private EntityCollection<ChaseOutboundEntity> _chaseOutboundCollectionViaCustomerChaseCampaign;
		private EntityCollection<ChaseProductEntity> _chaseProductCollectionViaCustomerChaseProduct;
		private EntityCollection<ClickLogEntity> _clickLogCollectionViaClickConversion;
		private EntityCollection<CorporateUploadEntity> _corporateUploadCollectionViaMemberUploadLog;
		private EntityCollection<CorporateUploadEntity> _corporateUploadCollectionViaCustomerOrderHistory;
		private EntityCollection<CustomerHealthQuestionsEntity> _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<CustomerHealthQuestionsEntity> _customerHealthQuestionsCollectionViaCustomerHealthInfo;
		private EntityCollection<CustomerHealthQuestionsEntity> _customerHealthQuestionsCollectionViaCustomerHealthInfoArchive;
		private EntityCollection<CustomerProfileHistoryEntity> _customerProfileHistoryCollectionViaEventCustomers;
		private EntityCollection<CustomerRegistrationNotesEntity> _customerRegistrationNotesCollectionViaEventCustomers;
		private EntityCollection<CustomerSurveyQuestionAnswerEntity> _customerSurveyQuestionAnswerCollectionViaCustomerSurvey;
		private EntityCollection<DirectMailTypeEntity> _directMailTypeCollectionViaDirectMail;
		private EntityCollection<EligibilityEntity> _eligibilityCollectionViaTempCart;
		private EntityCollection<EventAppointmentEntity> _eventAppointmentCollectionViaEventCustomers;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCustomerHealthInfoArchive;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCallQueueCustomer;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaDependentDisqualifiedTest;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCustomerOrderHistory;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaDisqualifiedTest;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaClickConversion;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCustomerHealthInfo;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<EventPackageDetailsEntity> _eventPackageDetailsCollectionViaCustomerOrderHistory;
		private EntityCollection<EventPackageDetailsEntity> _eventPackageDetailsCollectionViaEventPaymentDetails;
		private EntityCollection<EventsEntity> _eventsCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<EventsEntity> _eventsCollectionViaEventCustomerResult;
		private EntityCollection<EventsEntity> _eventsCollectionViaEventCustomers;
		private EntityCollection<EventsEntity> _eventsCollectionViaPhysicianInvoiceItem;
		private EntityCollection<EventsEntity> _eventsCollectionViaDisqualifiedTest;
		private EntityCollection<EventsEntity> _eventsCollectionViaPreQualificationResult;
		private EntityCollection<EventsEntity> _eventsCollectionViaDependentDisqualifiedTest;
		private EntityCollection<EventsEntity> _eventsCollectionViaHospitalPartnerCustomer;
		private EntityCollection<EventsEntity> _eventsCollectionViaCallQueueCustomer;
		private EntityCollection<EventsEntity> _eventsCollectionViaCustomerEventTestFinding;
		private EntityCollection<EventsEntity> _eventsCollectionViaCustomerOrderHistory;
		private EntityCollection<EventsEntity> _eventsCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<EventTestEntity> _eventTestCollectionViaCustomerOrderHistory;
		private EntityCollection<FileEntity> _fileCollectionViaTestimonial;
		private EntityCollection<GcNotGivenReasonEntity> _gcNotGivenReasonCollectionViaEventCustomers;
		private EntityCollection<HafTemplateEntity> _hafTemplateCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<HospitalFacilityEntity> _hospitalFacilityCollectionViaEventCustomers;
		private EntityCollection<IcdCodesEntity> _icdCodesCollectionViaCustomerIcdCode;
		private EntityCollection<LanguageEntity> _languageCollectionViaCallQueueCustomer;
		private EntityCollection<LookupEntity> _lookupCollectionViaCallRoundCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult______;
		private EntityCollection<LookupEntity> _lookupCollectionViaNoShowCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_______;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomerResult;
		private EntityCollection<LookupEntity> _lookupCollectionViaMailRoundCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult__;
		private EntityCollection<LookupEntity> _lookupCollectionViaChaseOutbound;
		private EntityCollection<LookupEntity> _lookupCollectionViaLanguageBarrierCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_____;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult____;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult___;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerProfileHistory__;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerProfileHistory___;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerOrderHistory;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerProfileHistory_;
		private EntityCollection<LookupEntity> _lookupCollectionViaUncontactedCustomerCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerPrimaryCarePhysician;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerProfileHistory;
		private EntityCollection<LookupEntity> _lookupCollectionViaCallQueueCustomer;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomers;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult________;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerUnsubscribedSmsNotification;
		private EntityCollection<LookupEntity> _lookupCollectionViaFillEventCallQueue;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomers_;
		private EntityCollection<LookupEntity> _lookupCollectionViaProspectCustomer;
		private EntityCollection<NdcEntity> _ndcCollectionViaCurrentMedication;
		private EntityCollection<NotesDetailsEntity> _notesDetailsCollectionViaCallQueueCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaGuardianDetails_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaGuardianDetails;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaUncontactedCustomerCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaReferral;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaFillEventCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaRequiredTest;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaProspectCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaMailRoundCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaNoShowCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaMedication;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallRoundCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaMedication_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaLanguageBarrierCallQueue;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerHealthInfo;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaDisqualifiedTest;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerHealthInfoArchive;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaDirectMail;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaDisqualifiedTest_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerEligibility_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerIcdCode;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerProfileHistory;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerTag;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerTag_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerWarmTransfer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerWarmTransfer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerTargeted;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerTargeted_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerEligibility;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult___;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomers;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomers_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult____;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult______;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_____;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerCallQueueCallAttempt;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCurrentMedication;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_______;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult________;
		private EntityCollection<PhysicianEvaluationEntity> _physicianEvaluationCollectionViaPhysicianInvoiceItem;
		private EntityCollection<PhysicianInvoiceEntity> _physicianInvoiceCollectionViaPhysicianInvoiceItem;
		private EntityCollection<PhysicianMasterEntity> _physicianMasterCollectionViaCustomerPrimaryCarePhysician;
		private EntityCollection<PreQualificationQuestionEntity> _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<PreQualificationQuestionEntity> _preQualificationQuestionCollectionViaDisqualifiedTest;
		private EntityCollection<ProspectCustomerEntity> _prospectCustomerCollectionViaClickConversion;
		private EntityCollection<ProspectCustomerEntity> _prospectCustomerCollectionViaTempCart;
		private EntityCollection<ProspectCustomerEntity> _prospectCustomerCollectionViaCallQueueCustomer;
		private EntityCollection<RapsUploadEntity> _rapsUploadCollectionViaRaps;
		private EntityCollection<RelationshipEntity> _relationshipCollectionViaChaseOutbound;
		private EntityCollection<RelationshipEntity> _relationshipCollectionViaGuardianDetails;
		private EntityCollection<ResultArchiveUploadEntity> _resultArchiveUploadCollectionViaResultArchiveUploadLog;
		private EntityCollection<SmsReceivedEntity> _smsReceivedCollectionViaCustomerUnsubscribedSmsNotification;
		private EntityCollection<SuspectConditionUploadEntity> _suspectConditionUploadCollectionViaSuspectCondition;
		private EntityCollection<TagEntity> _tagCollectionViaCustomerCallQueueCallAttempt;
		private EntityCollection<TagEntity> _tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
		private EntityCollection<TempCartEntity> _tempCartCollectionViaPreQualificationResult;
		private EntityCollection<TestEntity> _testCollectionViaDependentDisqualifiedTest;
		private EntityCollection<TestEntity> _testCollectionViaDisqualifiedTest;
		private EntityCollection<TestEntity> _testCollectionViaRequiredTest;
		private EntityCollection<TestEntity> _testCollectionViaResultArchiveUploadLog;
		private EntityCollection<TestEntity> _testCollectionViaCustomerEventTestFinding;
		private ActivityTypeEntity _activityType;
		private AddressEntity _address;
		private LabEntity _lab;
		private LanguageEntity _language;
		private LookupEntity _lookup______;
		private LookupEntity _lookup_____;
		private LookupEntity _lookup_______;
		private LookupEntity _lookup________;
		private LookupEntity _lookup____;
		private LookupEntity _lookup_;
		private LookupEntity _lookup;
		private LookupEntity _lookup___;
		private LookupEntity _lookup__;
		private NotesDetailsEntity _notesDetails;
		private RoleEntity _role;
		private CustomerCallAttemptsEntity _customerCallAttempts;
		private CustomerLockForCallEntity _customerLockForCall;
		private CustomerResultPostedEntity _customerResultPosted;
		private CustomerTraleEntity _customerTrale;
		private OrganizationRoleUserEntity _organizationRoleUser;
		
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		#endregion

		#region Statics
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name ActivityType</summary>
			public static readonly string ActivityType = "ActivityType";
			/// <summary>Member name Address</summary>
			public static readonly string Address = "Address";
			/// <summary>Member name Lab</summary>
			public static readonly string Lab = "Lab";
			/// <summary>Member name Language</summary>
			public static readonly string Language = "Language";
			/// <summary>Member name Lookup______</summary>
			public static readonly string Lookup______ = "Lookup______";
			/// <summary>Member name Lookup_____</summary>
			public static readonly string Lookup_____ = "Lookup_____";
			/// <summary>Member name Lookup_______</summary>
			public static readonly string Lookup_______ = "Lookup_______";
			/// <summary>Member name Lookup________</summary>
			public static readonly string Lookup________ = "Lookup________";
			/// <summary>Member name Lookup____</summary>
			public static readonly string Lookup____ = "Lookup____";
			/// <summary>Member name Lookup_</summary>
			public static readonly string Lookup_ = "Lookup_";
			/// <summary>Member name Lookup</summary>
			public static readonly string Lookup = "Lookup";
			/// <summary>Member name Lookup___</summary>
			public static readonly string Lookup___ = "Lookup___";
			/// <summary>Member name Lookup__</summary>
			public static readonly string Lookup__ = "Lookup__";
			/// <summary>Member name NotesDetails</summary>
			public static readonly string NotesDetails = "NotesDetails";
			/// <summary>Member name Role</summary>
			public static readonly string Role = "Role";
			/// <summary>Member name CallQueueCustomer</summary>
			public static readonly string CallQueueCustomer = "CallQueueCustomer";
			/// <summary>Member name CallRoundCallQueue</summary>
			public static readonly string CallRoundCallQueue = "CallRoundCallQueue";
			/// <summary>Member name ChaseOutbound</summary>
			public static readonly string ChaseOutbound = "ChaseOutbound";
			/// <summary>Member name ClickConversion</summary>
			public static readonly string ClickConversion = "ClickConversion";
			/// <summary>Member name CurrentMedication</summary>
			public static readonly string CurrentMedication = "CurrentMedication";
			/// <summary>Member name CustomerAccountGlocomNumber</summary>
			public static readonly string CustomerAccountGlocomNumber = "CustomerAccountGlocomNumber";
			/// <summary>Member name CustomerBillingAccount</summary>
			public static readonly string CustomerBillingAccount = "CustomerBillingAccount";
			/// <summary>Member name CustomerCallQueueCallAttempt</summary>
			public static readonly string CustomerCallQueueCallAttempt = "CustomerCallQueueCallAttempt";
			/// <summary>Member name CustomerChaseCampaign</summary>
			public static readonly string CustomerChaseCampaign = "CustomerChaseCampaign";
			/// <summary>Member name CustomerChaseChannel</summary>
			public static readonly string CustomerChaseChannel = "CustomerChaseChannel";
			/// <summary>Member name CustomerChaseProduct</summary>
			public static readonly string CustomerChaseProduct = "CustomerChaseProduct";
			/// <summary>Member name CustomerClinicalQuestionAnswer</summary>
			public static readonly string CustomerClinicalQuestionAnswer = "CustomerClinicalQuestionAnswer";
			/// <summary>Member name CustomerEligibility</summary>
			public static readonly string CustomerEligibility = "CustomerEligibility";
			/// <summary>Member name CustomerEventTestFinding</summary>
			public static readonly string CustomerEventTestFinding = "CustomerEventTestFinding";
			/// <summary>Member name CustomerHealthInfo</summary>
			public static readonly string CustomerHealthInfo = "CustomerHealthInfo";
			/// <summary>Member name CustomerHealthInfoArchive</summary>
			public static readonly string CustomerHealthInfoArchive = "CustomerHealthInfoArchive";
			/// <summary>Member name CustomerIcdCode</summary>
			public static readonly string CustomerIcdCode = "CustomerIcdCode";
			/// <summary>Member name CustomerOrderHistory</summary>
			public static readonly string CustomerOrderHistory = "CustomerOrderHistory";
			/// <summary>Member name CustomerPredictedZip</summary>
			public static readonly string CustomerPredictedZip = "CustomerPredictedZip";
			/// <summary>Member name CustomerPrimaryCarePhysician</summary>
			public static readonly string CustomerPrimaryCarePhysician = "CustomerPrimaryCarePhysician";
			/// <summary>Member name CustomerProfileHistory</summary>
			public static readonly string CustomerProfileHistory = "CustomerProfileHistory";
			/// <summary>Member name CustomerSurvey</summary>
			public static readonly string CustomerSurvey = "CustomerSurvey";
			/// <summary>Member name CustomerTag</summary>
			public static readonly string CustomerTag = "CustomerTag";
			/// <summary>Member name CustomerTargeted</summary>
			public static readonly string CustomerTargeted = "CustomerTargeted";
			/// <summary>Member name CustomerUnsubscribedSmsNotification</summary>
			public static readonly string CustomerUnsubscribedSmsNotification = "CustomerUnsubscribedSmsNotification";
			/// <summary>Member name CustomerWarmTransfer</summary>
			public static readonly string CustomerWarmTransfer = "CustomerWarmTransfer";
			/// <summary>Member name DependentDisqualifiedTest</summary>
			public static readonly string DependentDisqualifiedTest = "DependentDisqualifiedTest";
			/// <summary>Member name DirectMail</summary>
			public static readonly string DirectMail = "DirectMail";
			/// <summary>Member name DisqualifiedTest</summary>
			public static readonly string DisqualifiedTest = "DisqualifiedTest";
			/// <summary>Member name EventCustomerQuestionAnswer</summary>
			public static readonly string EventCustomerQuestionAnswer = "EventCustomerQuestionAnswer";
			/// <summary>Member name EventCustomerResult</summary>
			public static readonly string EventCustomerResult = "EventCustomerResult";
			/// <summary>Member name EventCustomers</summary>
			public static readonly string EventCustomers = "EventCustomers";
			/// <summary>Member name EventPaymentDetails</summary>
			public static readonly string EventPaymentDetails = "EventPaymentDetails";
			/// <summary>Member name FillEventCallQueue</summary>
			public static readonly string FillEventCallQueue = "FillEventCallQueue";
			/// <summary>Member name GuardianDetails</summary>
			public static readonly string GuardianDetails = "GuardianDetails";
			/// <summary>Member name HospitalPartnerCustomer</summary>
			public static readonly string HospitalPartnerCustomer = "HospitalPartnerCustomer";
			/// <summary>Member name LanguageBarrierCallQueue</summary>
			public static readonly string LanguageBarrierCallQueue = "LanguageBarrierCallQueue";
			/// <summary>Member name MailRoundCallQueue</summary>
			public static readonly string MailRoundCallQueue = "MailRoundCallQueue";
			/// <summary>Member name Medication</summary>
			public static readonly string Medication = "Medication";
			/// <summary>Member name MemberUploadLog</summary>
			public static readonly string MemberUploadLog = "MemberUploadLog";
			/// <summary>Member name NoShowCallQueue</summary>
			public static readonly string NoShowCallQueue = "NoShowCallQueue";
			/// <summary>Member name PhysicianInvoiceItem</summary>
			public static readonly string PhysicianInvoiceItem = "PhysicianInvoiceItem";
			/// <summary>Member name PreAssessmentCustomerCallQueueCallAttempt</summary>
			public static readonly string PreAssessmentCustomerCallQueueCallAttempt = "PreAssessmentCustomerCallQueueCallAttempt";
			/// <summary>Member name PreQualificationResult</summary>
			public static readonly string PreQualificationResult = "PreQualificationResult";
			/// <summary>Member name ProspectCustomer</summary>
			public static readonly string ProspectCustomer = "ProspectCustomer";
			/// <summary>Member name Raps</summary>
			public static readonly string Raps = "Raps";
			/// <summary>Member name Referral</summary>
			public static readonly string Referral = "Referral";
			/// <summary>Member name RequiredTest</summary>
			public static readonly string RequiredTest = "RequiredTest";
			/// <summary>Member name ResultArchiveUploadLog</summary>
			public static readonly string ResultArchiveUploadLog = "ResultArchiveUploadLog";
			/// <summary>Member name SuspectCondition</summary>
			public static readonly string SuspectCondition = "SuspectCondition";
			/// <summary>Member name TempCart</summary>
			public static readonly string TempCart = "TempCart";
			/// <summary>Member name Testimonial</summary>
			public static readonly string Testimonial = "Testimonial";
			/// <summary>Member name UncontactedCustomerCallQueue</summary>
			public static readonly string UncontactedCustomerCallQueue = "UncontactedCustomerCallQueue";
			/// <summary>Member name AccountCollectionViaLanguageBarrierCallQueue</summary>
			public static readonly string AccountCollectionViaLanguageBarrierCallQueue = "AccountCollectionViaLanguageBarrierCallQueue";
			/// <summary>Member name AccountCollectionViaUncontactedCustomerCallQueue</summary>
			public static readonly string AccountCollectionViaUncontactedCustomerCallQueue = "AccountCollectionViaUncontactedCustomerCallQueue";
			/// <summary>Member name AccountCollectionViaMailRoundCallQueue</summary>
			public static readonly string AccountCollectionViaMailRoundCallQueue = "AccountCollectionViaMailRoundCallQueue";
			/// <summary>Member name AccountCollectionViaCallRoundCallQueue</summary>
			public static readonly string AccountCollectionViaCallRoundCallQueue = "AccountCollectionViaCallRoundCallQueue";
			/// <summary>Member name AccountCollectionViaNoShowCallQueue</summary>
			public static readonly string AccountCollectionViaNoShowCallQueue = "AccountCollectionViaNoShowCallQueue";
			/// <summary>Member name AccountCollectionViaCallQueueCustomer</summary>
			public static readonly string AccountCollectionViaCallQueueCustomer = "AccountCollectionViaCallQueueCustomer";
			/// <summary>Member name AccountCollectionViaFillEventCallQueue</summary>
			public static readonly string AccountCollectionViaFillEventCallQueue = "AccountCollectionViaFillEventCallQueue";
			/// <summary>Member name ActivityTypeCollectionViaCallQueueCustomer</summary>
			public static readonly string ActivityTypeCollectionViaCallQueueCustomer = "ActivityTypeCollectionViaCallQueueCustomer";
			/// <summary>Member name AddressCollectionViaCustomerPrimaryCarePhysician</summary>
			public static readonly string AddressCollectionViaCustomerPrimaryCarePhysician = "AddressCollectionViaCustomerPrimaryCarePhysician";
			/// <summary>Member name AddressCollectionViaCustomerPrimaryCarePhysician_</summary>
			public static readonly string AddressCollectionViaCustomerPrimaryCarePhysician_ = "AddressCollectionViaCustomerPrimaryCarePhysician_";
			/// <summary>Member name AfaffiliateCampaignCollectionViaEventCustomers</summary>
			public static readonly string AfaffiliateCampaignCollectionViaEventCustomers = "AfaffiliateCampaignCollectionViaEventCustomers";
			/// <summary>Member name AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer</summary>
			public static readonly string AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer = "AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer";
			/// <summary>Member name BillingAccountCollectionViaCustomerBillingAccount</summary>
			public static readonly string BillingAccountCollectionViaCustomerBillingAccount = "BillingAccountCollectionViaCustomerBillingAccount";
			/// <summary>Member name CallQueueCollectionViaCallQueueCustomer</summary>
			public static readonly string CallQueueCollectionViaCallQueueCustomer = "CallQueueCollectionViaCallQueueCustomer";
			/// <summary>Member name CallQueueCriteriaCollectionViaCallQueueCustomer</summary>
			public static readonly string CallQueueCriteriaCollectionViaCallQueueCustomer = "CallQueueCriteriaCollectionViaCallQueueCustomer";
			/// <summary>Member name CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt</summary>
			public static readonly string CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt = "CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt";
			/// <summary>Member name CallsCollectionViaPreQualificationResult</summary>
			public static readonly string CallsCollectionViaPreQualificationResult = "CallsCollectionViaPreQualificationResult";
			/// <summary>Member name CallsCollectionViaCustomerAccountGlocomNumber</summary>
			public static readonly string CallsCollectionViaCustomerAccountGlocomNumber = "CallsCollectionViaCustomerAccountGlocomNumber";
			/// <summary>Member name CallsCollectionViaCustomerCallQueueCallAttempt</summary>
			public static readonly string CallsCollectionViaCustomerCallQueueCallAttempt = "CallsCollectionViaCustomerCallQueueCallAttempt";
			/// <summary>Member name CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt</summary>
			public static readonly string CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt = "CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt";
			/// <summary>Member name CallUploadCollectionViaDirectMail</summary>
			public static readonly string CallUploadCollectionViaDirectMail = "CallUploadCollectionViaDirectMail";
			/// <summary>Member name CampaignCollectionViaDirectMail</summary>
			public static readonly string CampaignCollectionViaDirectMail = "CampaignCollectionViaDirectMail";
			/// <summary>Member name CampaignCollectionViaEventCustomers</summary>
			public static readonly string CampaignCollectionViaEventCustomers = "CampaignCollectionViaEventCustomers";
			/// <summary>Member name CampaignCollectionViaCallQueueCustomer</summary>
			public static readonly string CampaignCollectionViaCallQueueCustomer = "CampaignCollectionViaCallQueueCustomer";
			/// <summary>Member name ChargeCardCollectionViaTempCart</summary>
			public static readonly string ChargeCardCollectionViaTempCart = "ChargeCardCollectionViaTempCart";
			/// <summary>Member name ChaseCampaignCollectionViaCustomerChaseCampaign</summary>
			public static readonly string ChaseCampaignCollectionViaCustomerChaseCampaign = "ChaseCampaignCollectionViaCustomerChaseCampaign";
			/// <summary>Member name ChaseChannelLevelCollectionViaCustomerChaseChannel</summary>
			public static readonly string ChaseChannelLevelCollectionViaCustomerChaseChannel = "ChaseChannelLevelCollectionViaCustomerChaseChannel";
			/// <summary>Member name ChaseGroupCollectionViaChaseOutbound</summary>
			public static readonly string ChaseGroupCollectionViaChaseOutbound = "ChaseGroupCollectionViaChaseOutbound";
			/// <summary>Member name ChaseOutboundCollectionViaCustomerChaseProduct</summary>
			public static readonly string ChaseOutboundCollectionViaCustomerChaseProduct = "ChaseOutboundCollectionViaCustomerChaseProduct";
			/// <summary>Member name ChaseOutboundCollectionViaCustomerChaseChannel</summary>
			public static readonly string ChaseOutboundCollectionViaCustomerChaseChannel = "ChaseOutboundCollectionViaCustomerChaseChannel";
			/// <summary>Member name ChaseOutboundCollectionViaCustomerChaseCampaign</summary>
			public static readonly string ChaseOutboundCollectionViaCustomerChaseCampaign = "ChaseOutboundCollectionViaCustomerChaseCampaign";
			/// <summary>Member name ChaseProductCollectionViaCustomerChaseProduct</summary>
			public static readonly string ChaseProductCollectionViaCustomerChaseProduct = "ChaseProductCollectionViaCustomerChaseProduct";
			/// <summary>Member name ClickLogCollectionViaClickConversion</summary>
			public static readonly string ClickLogCollectionViaClickConversion = "ClickLogCollectionViaClickConversion";
			/// <summary>Member name CorporateUploadCollectionViaMemberUploadLog</summary>
			public static readonly string CorporateUploadCollectionViaMemberUploadLog = "CorporateUploadCollectionViaMemberUploadLog";
			/// <summary>Member name CorporateUploadCollectionViaCustomerOrderHistory</summary>
			public static readonly string CorporateUploadCollectionViaCustomerOrderHistory = "CorporateUploadCollectionViaCustomerOrderHistory";
			/// <summary>Member name CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name CustomerHealthQuestionsCollectionViaCustomerHealthInfo</summary>
			public static readonly string CustomerHealthQuestionsCollectionViaCustomerHealthInfo = "CustomerHealthQuestionsCollectionViaCustomerHealthInfo";
			/// <summary>Member name CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive</summary>
			public static readonly string CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive = "CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive";
			/// <summary>Member name CustomerProfileHistoryCollectionViaEventCustomers</summary>
			public static readonly string CustomerProfileHistoryCollectionViaEventCustomers = "CustomerProfileHistoryCollectionViaEventCustomers";
			/// <summary>Member name CustomerRegistrationNotesCollectionViaEventCustomers</summary>
			public static readonly string CustomerRegistrationNotesCollectionViaEventCustomers = "CustomerRegistrationNotesCollectionViaEventCustomers";
			/// <summary>Member name CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey</summary>
			public static readonly string CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey = "CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey";
			/// <summary>Member name DirectMailTypeCollectionViaDirectMail</summary>
			public static readonly string DirectMailTypeCollectionViaDirectMail = "DirectMailTypeCollectionViaDirectMail";
			/// <summary>Member name EligibilityCollectionViaTempCart</summary>
			public static readonly string EligibilityCollectionViaTempCart = "EligibilityCollectionViaTempCart";
			/// <summary>Member name EventAppointmentCollectionViaEventCustomers</summary>
			public static readonly string EventAppointmentCollectionViaEventCustomers = "EventAppointmentCollectionViaEventCustomers";
			/// <summary>Member name EventCustomersCollectionViaCustomerHealthInfoArchive</summary>
			public static readonly string EventCustomersCollectionViaCustomerHealthInfoArchive = "EventCustomersCollectionViaCustomerHealthInfoArchive";
			/// <summary>Member name EventCustomersCollectionViaCallQueueCustomer</summary>
			public static readonly string EventCustomersCollectionViaCallQueueCustomer = "EventCustomersCollectionViaCallQueueCustomer";
			/// <summary>Member name EventCustomersCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string EventCustomersCollectionViaDependentDisqualifiedTest = "EventCustomersCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name EventCustomersCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventCustomersCollectionViaCustomerOrderHistory = "EventCustomersCollectionViaCustomerOrderHistory";
			/// <summary>Member name EventCustomersCollectionViaDisqualifiedTest</summary>
			public static readonly string EventCustomersCollectionViaDisqualifiedTest = "EventCustomersCollectionViaDisqualifiedTest";
			/// <summary>Member name EventCustomersCollectionViaClickConversion</summary>
			public static readonly string EventCustomersCollectionViaClickConversion = "EventCustomersCollectionViaClickConversion";
			/// <summary>Member name EventCustomersCollectionViaCustomerHealthInfo</summary>
			public static readonly string EventCustomersCollectionViaCustomerHealthInfo = "EventCustomersCollectionViaCustomerHealthInfo";
			/// <summary>Member name EventCustomersCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string EventCustomersCollectionViaEventCustomerQuestionAnswer = "EventCustomersCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name EventPackageDetailsCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventPackageDetailsCollectionViaCustomerOrderHistory = "EventPackageDetailsCollectionViaCustomerOrderHistory";
			/// <summary>Member name EventPackageDetailsCollectionViaEventPaymentDetails</summary>
			public static readonly string EventPackageDetailsCollectionViaEventPaymentDetails = "EventPackageDetailsCollectionViaEventPaymentDetails";
			/// <summary>Member name EventsCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string EventsCollectionViaEventCustomerQuestionAnswer = "EventsCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name EventsCollectionViaEventCustomerResult</summary>
			public static readonly string EventsCollectionViaEventCustomerResult = "EventsCollectionViaEventCustomerResult";
			/// <summary>Member name EventsCollectionViaEventCustomers</summary>
			public static readonly string EventsCollectionViaEventCustomers = "EventsCollectionViaEventCustomers";
			/// <summary>Member name EventsCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string EventsCollectionViaPhysicianInvoiceItem = "EventsCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name EventsCollectionViaDisqualifiedTest</summary>
			public static readonly string EventsCollectionViaDisqualifiedTest = "EventsCollectionViaDisqualifiedTest";
			/// <summary>Member name EventsCollectionViaPreQualificationResult</summary>
			public static readonly string EventsCollectionViaPreQualificationResult = "EventsCollectionViaPreQualificationResult";
			/// <summary>Member name EventsCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string EventsCollectionViaDependentDisqualifiedTest = "EventsCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name EventsCollectionViaHospitalPartnerCustomer</summary>
			public static readonly string EventsCollectionViaHospitalPartnerCustomer = "EventsCollectionViaHospitalPartnerCustomer";
			/// <summary>Member name EventsCollectionViaCallQueueCustomer</summary>
			public static readonly string EventsCollectionViaCallQueueCustomer = "EventsCollectionViaCallQueueCustomer";
			/// <summary>Member name EventsCollectionViaCustomerEventTestFinding</summary>
			public static readonly string EventsCollectionViaCustomerEventTestFinding = "EventsCollectionViaCustomerEventTestFinding";
			/// <summary>Member name EventsCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventsCollectionViaCustomerOrderHistory = "EventsCollectionViaCustomerOrderHistory";
			/// <summary>Member name EventsCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string EventsCollectionViaCustomerClinicalQuestionAnswer = "EventsCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name EventTestCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventTestCollectionViaCustomerOrderHistory = "EventTestCollectionViaCustomerOrderHistory";
			/// <summary>Member name FileCollectionViaTestimonial</summary>
			public static readonly string FileCollectionViaTestimonial = "FileCollectionViaTestimonial";
			/// <summary>Member name GcNotGivenReasonCollectionViaEventCustomers</summary>
			public static readonly string GcNotGivenReasonCollectionViaEventCustomers = "GcNotGivenReasonCollectionViaEventCustomers";
			/// <summary>Member name HafTemplateCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string HafTemplateCollectionViaCustomerClinicalQuestionAnswer = "HafTemplateCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name HospitalFacilityCollectionViaEventCustomers</summary>
			public static readonly string HospitalFacilityCollectionViaEventCustomers = "HospitalFacilityCollectionViaEventCustomers";
			/// <summary>Member name IcdCodesCollectionViaCustomerIcdCode</summary>
			public static readonly string IcdCodesCollectionViaCustomerIcdCode = "IcdCodesCollectionViaCustomerIcdCode";
			/// <summary>Member name LanguageCollectionViaCallQueueCustomer</summary>
			public static readonly string LanguageCollectionViaCallQueueCustomer = "LanguageCollectionViaCallQueueCustomer";
			/// <summary>Member name LookupCollectionViaCallRoundCallQueue</summary>
			public static readonly string LookupCollectionViaCallRoundCallQueue = "LookupCollectionViaCallRoundCallQueue";
			/// <summary>Member name LookupCollectionViaPreQualificationResult______</summary>
			public static readonly string LookupCollectionViaPreQualificationResult______ = "LookupCollectionViaPreQualificationResult______";
			/// <summary>Member name LookupCollectionViaNoShowCallQueue</summary>
			public static readonly string LookupCollectionViaNoShowCallQueue = "LookupCollectionViaNoShowCallQueue";
			/// <summary>Member name LookupCollectionViaPreQualificationResult</summary>
			public static readonly string LookupCollectionViaPreQualificationResult = "LookupCollectionViaPreQualificationResult";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_______</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_______ = "LookupCollectionViaPreQualificationResult_______";
			/// <summary>Member name LookupCollectionViaEventCustomerResult</summary>
			public static readonly string LookupCollectionViaEventCustomerResult = "LookupCollectionViaEventCustomerResult";
			/// <summary>Member name LookupCollectionViaMailRoundCallQueue</summary>
			public static readonly string LookupCollectionViaMailRoundCallQueue = "LookupCollectionViaMailRoundCallQueue";
			/// <summary>Member name LookupCollectionViaPreQualificationResult__</summary>
			public static readonly string LookupCollectionViaPreQualificationResult__ = "LookupCollectionViaPreQualificationResult__";
			/// <summary>Member name LookupCollectionViaChaseOutbound</summary>
			public static readonly string LookupCollectionViaChaseOutbound = "LookupCollectionViaChaseOutbound";
			/// <summary>Member name LookupCollectionViaLanguageBarrierCallQueue</summary>
			public static readonly string LookupCollectionViaLanguageBarrierCallQueue = "LookupCollectionViaLanguageBarrierCallQueue";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_____</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_____ = "LookupCollectionViaPreQualificationResult_____";
			/// <summary>Member name LookupCollectionViaPreQualificationResult____</summary>
			public static readonly string LookupCollectionViaPreQualificationResult____ = "LookupCollectionViaPreQualificationResult____";
			/// <summary>Member name LookupCollectionViaPreQualificationResult___</summary>
			public static readonly string LookupCollectionViaPreQualificationResult___ = "LookupCollectionViaPreQualificationResult___";
			/// <summary>Member name LookupCollectionViaCustomerProfileHistory__</summary>
			public static readonly string LookupCollectionViaCustomerProfileHistory__ = "LookupCollectionViaCustomerProfileHistory__";
			/// <summary>Member name LookupCollectionViaCustomerProfileHistory___</summary>
			public static readonly string LookupCollectionViaCustomerProfileHistory___ = "LookupCollectionViaCustomerProfileHistory___";
			/// <summary>Member name LookupCollectionViaCustomerOrderHistory</summary>
			public static readonly string LookupCollectionViaCustomerOrderHistory = "LookupCollectionViaCustomerOrderHistory";
			/// <summary>Member name LookupCollectionViaCustomerProfileHistory_</summary>
			public static readonly string LookupCollectionViaCustomerProfileHistory_ = "LookupCollectionViaCustomerProfileHistory_";
			/// <summary>Member name LookupCollectionViaUncontactedCustomerCallQueue</summary>
			public static readonly string LookupCollectionViaUncontactedCustomerCallQueue = "LookupCollectionViaUncontactedCustomerCallQueue";
			/// <summary>Member name LookupCollectionViaCustomerPrimaryCarePhysician</summary>
			public static readonly string LookupCollectionViaCustomerPrimaryCarePhysician = "LookupCollectionViaCustomerPrimaryCarePhysician";
			/// <summary>Member name LookupCollectionViaCustomerProfileHistory</summary>
			public static readonly string LookupCollectionViaCustomerProfileHistory = "LookupCollectionViaCustomerProfileHistory";
			/// <summary>Member name LookupCollectionViaCallQueueCustomer</summary>
			public static readonly string LookupCollectionViaCallQueueCustomer = "LookupCollectionViaCallQueueCustomer";
			/// <summary>Member name LookupCollectionViaEventCustomers</summary>
			public static readonly string LookupCollectionViaEventCustomers = "LookupCollectionViaEventCustomers";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_ = "LookupCollectionViaPreQualificationResult_";
			/// <summary>Member name LookupCollectionViaPreQualificationResult________</summary>
			public static readonly string LookupCollectionViaPreQualificationResult________ = "LookupCollectionViaPreQualificationResult________";
			/// <summary>Member name LookupCollectionViaCustomerUnsubscribedSmsNotification</summary>
			public static readonly string LookupCollectionViaCustomerUnsubscribedSmsNotification = "LookupCollectionViaCustomerUnsubscribedSmsNotification";
			/// <summary>Member name LookupCollectionViaFillEventCallQueue</summary>
			public static readonly string LookupCollectionViaFillEventCallQueue = "LookupCollectionViaFillEventCallQueue";
			/// <summary>Member name LookupCollectionViaEventCustomers_</summary>
			public static readonly string LookupCollectionViaEventCustomers_ = "LookupCollectionViaEventCustomers_";
			/// <summary>Member name LookupCollectionViaProspectCustomer</summary>
			public static readonly string LookupCollectionViaProspectCustomer = "LookupCollectionViaProspectCustomer";
			/// <summary>Member name NdcCollectionViaCurrentMedication</summary>
			public static readonly string NdcCollectionViaCurrentMedication = "NdcCollectionViaCurrentMedication";
			/// <summary>Member name NotesDetailsCollectionViaCallQueueCustomer</summary>
			public static readonly string NotesDetailsCollectionViaCallQueueCustomer = "NotesDetailsCollectionViaCallQueueCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaGuardianDetails_</summary>
			public static readonly string OrganizationRoleUserCollectionViaGuardianDetails_ = "OrganizationRoleUserCollectionViaGuardianDetails_";
			/// <summary>Member name OrganizationRoleUserCollectionViaGuardianDetails</summary>
			public static readonly string OrganizationRoleUserCollectionViaGuardianDetails = "OrganizationRoleUserCollectionViaGuardianDetails";
			/// <summary>Member name OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue = "OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer_ = "OrganizationRoleUserCollectionViaCallQueueCustomer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer = "OrganizationRoleUserCollectionViaCallQueueCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaReferral</summary>
			public static readonly string OrganizationRoleUserCollectionViaReferral = "OrganizationRoleUserCollectionViaReferral";
			/// <summary>Member name OrganizationRoleUserCollectionViaFillEventCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaFillEventCallQueue = "OrganizationRoleUserCollectionViaFillEventCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaRequiredTest</summary>
			public static readonly string OrganizationRoleUserCollectionViaRequiredTest = "OrganizationRoleUserCollectionViaRequiredTest";
			/// <summary>Member name OrganizationRoleUserCollectionViaProspectCustomer</summary>
			public static readonly string OrganizationRoleUserCollectionViaProspectCustomer = "OrganizationRoleUserCollectionViaProspectCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaMailRoundCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaMailRoundCallQueue = "OrganizationRoleUserCollectionViaMailRoundCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaNoShowCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaNoShowCallQueue = "OrganizationRoleUserCollectionViaNoShowCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaMedication</summary>
			public static readonly string OrganizationRoleUserCollectionViaMedication = "OrganizationRoleUserCollectionViaMedication";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallRoundCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallRoundCallQueue = "OrganizationRoleUserCollectionViaCallRoundCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaMedication_</summary>
			public static readonly string OrganizationRoleUserCollectionViaMedication_ = "OrganizationRoleUserCollectionViaMedication_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer__</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer__ = "OrganizationRoleUserCollectionViaCallQueueCustomer__";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer_ = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer__</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer__ = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__";
			/// <summary>Member name OrganizationRoleUserCollectionViaLanguageBarrierCallQueue</summary>
			public static readonly string OrganizationRoleUserCollectionViaLanguageBarrierCallQueue = "OrganizationRoleUserCollectionViaLanguageBarrierCallQueue";
			/// <summary>Member name OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt</summary>
			public static readonly string OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt = "OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerHealthInfo</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerHealthInfo = "OrganizationRoleUserCollectionViaCustomerHealthInfo";
			/// <summary>Member name OrganizationRoleUserCollectionViaDisqualifiedTest</summary>
			public static readonly string OrganizationRoleUserCollectionViaDisqualifiedTest = "OrganizationRoleUserCollectionViaDisqualifiedTest";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerHealthInfoArchive</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerHealthInfoArchive = "OrganizationRoleUserCollectionViaCustomerHealthInfoArchive";
			/// <summary>Member name OrganizationRoleUserCollectionViaDirectMail</summary>
			public static readonly string OrganizationRoleUserCollectionViaDirectMail = "OrganizationRoleUserCollectionViaDirectMail";
			/// <summary>Member name OrganizationRoleUserCollectionViaDisqualifiedTest_</summary>
			public static readonly string OrganizationRoleUserCollectionViaDisqualifiedTest_ = "OrganizationRoleUserCollectionViaDisqualifiedTest_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer = "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician = "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerEligibility_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerEligibility_ = "OrganizationRoleUserCollectionViaCustomerEligibility_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerIcdCode</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerIcdCode = "OrganizationRoleUserCollectionViaCustomerIcdCode";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerProfileHistory</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerProfileHistory = "OrganizationRoleUserCollectionViaCustomerProfileHistory";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerTag</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerTag = "OrganizationRoleUserCollectionViaCustomerTag";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ = "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ = "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerTag_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerTag_ = "OrganizationRoleUserCollectionViaCustomerTag_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerWarmTransfer</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerWarmTransfer = "OrganizationRoleUserCollectionViaCustomerWarmTransfer";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerWarmTransfer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerWarmTransfer_ = "OrganizationRoleUserCollectionViaCustomerWarmTransfer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerTargeted</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerTargeted = "OrganizationRoleUserCollectionViaCustomerTargeted";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerTargeted_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerTargeted_ = "OrganizationRoleUserCollectionViaCustomerTargeted_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerEligibility</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerEligibility = "OrganizationRoleUserCollectionViaCustomerEligibility";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult___</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult___ = "OrganizationRoleUserCollectionViaEventCustomerResult___";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomers</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomers = "OrganizationRoleUserCollectionViaEventCustomers";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomers_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomers_ = "OrganizationRoleUserCollectionViaEventCustomers_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult__</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult__ = "OrganizationRoleUserCollectionViaEventCustomerResult__";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult____</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult____ = "OrganizationRoleUserCollectionViaEventCustomerResult____";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult______</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult______ = "OrganizationRoleUserCollectionViaEventCustomerResult______";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_____</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_____ = "OrganizationRoleUserCollectionViaEventCustomerResult_____";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt = "OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCurrentMedication</summary>
			public static readonly string OrganizationRoleUserCollectionViaCurrentMedication = "OrganizationRoleUserCollectionViaCurrentMedication";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult = "OrganizationRoleUserCollectionViaEventCustomerResult";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_______</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_______ = "OrganizationRoleUserCollectionViaEventCustomerResult_______";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_ = "OrganizationRoleUserCollectionViaEventCustomerResult_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult________</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult________ = "OrganizationRoleUserCollectionViaEventCustomerResult________";
			/// <summary>Member name PhysicianEvaluationCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string PhysicianEvaluationCollectionViaPhysicianInvoiceItem = "PhysicianEvaluationCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name PhysicianInvoiceCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string PhysicianInvoiceCollectionViaPhysicianInvoiceItem = "PhysicianInvoiceCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name PhysicianMasterCollectionViaCustomerPrimaryCarePhysician</summary>
			public static readonly string PhysicianMasterCollectionViaCustomerPrimaryCarePhysician = "PhysicianMasterCollectionViaCustomerPrimaryCarePhysician";
			/// <summary>Member name PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer = "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name PreQualificationQuestionCollectionViaDisqualifiedTest</summary>
			public static readonly string PreQualificationQuestionCollectionViaDisqualifiedTest = "PreQualificationQuestionCollectionViaDisqualifiedTest";
			/// <summary>Member name ProspectCustomerCollectionViaClickConversion</summary>
			public static readonly string ProspectCustomerCollectionViaClickConversion = "ProspectCustomerCollectionViaClickConversion";
			/// <summary>Member name ProspectCustomerCollectionViaTempCart</summary>
			public static readonly string ProspectCustomerCollectionViaTempCart = "ProspectCustomerCollectionViaTempCart";
			/// <summary>Member name ProspectCustomerCollectionViaCallQueueCustomer</summary>
			public static readonly string ProspectCustomerCollectionViaCallQueueCustomer = "ProspectCustomerCollectionViaCallQueueCustomer";
			/// <summary>Member name RapsUploadCollectionViaRaps</summary>
			public static readonly string RapsUploadCollectionViaRaps = "RapsUploadCollectionViaRaps";
			/// <summary>Member name RelationshipCollectionViaChaseOutbound</summary>
			public static readonly string RelationshipCollectionViaChaseOutbound = "RelationshipCollectionViaChaseOutbound";
			/// <summary>Member name RelationshipCollectionViaGuardianDetails</summary>
			public static readonly string RelationshipCollectionViaGuardianDetails = "RelationshipCollectionViaGuardianDetails";
			/// <summary>Member name ResultArchiveUploadCollectionViaResultArchiveUploadLog</summary>
			public static readonly string ResultArchiveUploadCollectionViaResultArchiveUploadLog = "ResultArchiveUploadCollectionViaResultArchiveUploadLog";
			/// <summary>Member name SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification</summary>
			public static readonly string SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification = "SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification";
			/// <summary>Member name SuspectConditionUploadCollectionViaSuspectCondition</summary>
			public static readonly string SuspectConditionUploadCollectionViaSuspectCondition = "SuspectConditionUploadCollectionViaSuspectCondition";
			/// <summary>Member name TagCollectionViaCustomerCallQueueCallAttempt</summary>
			public static readonly string TagCollectionViaCustomerCallQueueCallAttempt = "TagCollectionViaCustomerCallQueueCallAttempt";
			/// <summary>Member name TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt</summary>
			public static readonly string TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt = "TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt";
			/// <summary>Member name TempCartCollectionViaPreQualificationResult</summary>
			public static readonly string TempCartCollectionViaPreQualificationResult = "TempCartCollectionViaPreQualificationResult";
			/// <summary>Member name TestCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string TestCollectionViaDependentDisqualifiedTest = "TestCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name TestCollectionViaDisqualifiedTest</summary>
			public static readonly string TestCollectionViaDisqualifiedTest = "TestCollectionViaDisqualifiedTest";
			/// <summary>Member name TestCollectionViaRequiredTest</summary>
			public static readonly string TestCollectionViaRequiredTest = "TestCollectionViaRequiredTest";
			/// <summary>Member name TestCollectionViaResultArchiveUploadLog</summary>
			public static readonly string TestCollectionViaResultArchiveUploadLog = "TestCollectionViaResultArchiveUploadLog";
			/// <summary>Member name TestCollectionViaCustomerEventTestFinding</summary>
			public static readonly string TestCollectionViaCustomerEventTestFinding = "TestCollectionViaCustomerEventTestFinding";
			/// <summary>Member name CustomerCallAttempts</summary>
			public static readonly string CustomerCallAttempts = "CustomerCallAttempts";
			/// <summary>Member name CustomerLockForCall</summary>
			public static readonly string CustomerLockForCall = "CustomerLockForCall";
			/// <summary>Member name CustomerResultPosted</summary>
			public static readonly string CustomerResultPosted = "CustomerResultPosted";
			/// <summary>Member name CustomerTrale</summary>
			public static readonly string CustomerTrale = "CustomerTrale";
			/// <summary>Member name OrganizationRoleUser</summary>
			public static readonly string OrganizationRoleUser = "OrganizationRoleUser";
		}
		#endregion
		
		/// <summary> Static CTor for setting up custom property hashtables. Is executed before the first instance of this entity class or derived classes is constructed. </summary>
		static CustomerProfileEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public CustomerProfileEntity():base("CustomerProfileEntity")
		{
			InitClassEmpty(null, CreateFields());
		}

		/// <summary> CTor</summary>
		/// <remarks>For framework usage.</remarks>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CustomerProfileEntity(IEntityFields2 fields):base("CustomerProfileEntity")
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CustomerProfileEntity</param>
		public CustomerProfileEntity(IValidator validator):base("CustomerProfileEntity")
		{
			InitClassEmpty(validator, CreateFields());
		}
				

		/// <summary> CTor</summary>
		/// <param name="customerId">PK value for CustomerProfile which data should be fetched into this CustomerProfile object</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public CustomerProfileEntity(System.Int64 customerId):base("CustomerProfileEntity")
		{
			InitClassEmpty(null, CreateFields());
			this.CustomerId = customerId;
		}

		/// <summary> CTor</summary>
		/// <param name="customerId">PK value for CustomerProfile which data should be fetched into this CustomerProfile object</param>
		/// <param name="validator">The custom validator object for this CustomerProfileEntity</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public CustomerProfileEntity(System.Int64 customerId, IValidator validator):base("CustomerProfileEntity")
		{
			InitClassEmpty(validator, CreateFields());
			this.CustomerId = customerId;
		}

		/// <summary> Protected CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected CustomerProfileEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			if(SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				_callQueueCustomer = (EntityCollection<CallQueueCustomerEntity>)info.GetValue("_callQueueCustomer", typeof(EntityCollection<CallQueueCustomerEntity>));
				_callRoundCallQueue = (EntityCollection<CallRoundCallQueueEntity>)info.GetValue("_callRoundCallQueue", typeof(EntityCollection<CallRoundCallQueueEntity>));
				_chaseOutbound = (EntityCollection<ChaseOutboundEntity>)info.GetValue("_chaseOutbound", typeof(EntityCollection<ChaseOutboundEntity>));
				_clickConversion = (EntityCollection<ClickConversionEntity>)info.GetValue("_clickConversion", typeof(EntityCollection<ClickConversionEntity>));
				_currentMedication = (EntityCollection<CurrentMedicationEntity>)info.GetValue("_currentMedication", typeof(EntityCollection<CurrentMedicationEntity>));
				_customerAccountGlocomNumber = (EntityCollection<CustomerAccountGlocomNumberEntity>)info.GetValue("_customerAccountGlocomNumber", typeof(EntityCollection<CustomerAccountGlocomNumberEntity>));
				_customerBillingAccount = (EntityCollection<CustomerBillingAccountEntity>)info.GetValue("_customerBillingAccount", typeof(EntityCollection<CustomerBillingAccountEntity>));
				_customerCallQueueCallAttempt = (EntityCollection<CustomerCallQueueCallAttemptEntity>)info.GetValue("_customerCallQueueCallAttempt", typeof(EntityCollection<CustomerCallQueueCallAttemptEntity>));
				_customerChaseCampaign = (EntityCollection<CustomerChaseCampaignEntity>)info.GetValue("_customerChaseCampaign", typeof(EntityCollection<CustomerChaseCampaignEntity>));
				_customerChaseChannel = (EntityCollection<CustomerChaseChannelEntity>)info.GetValue("_customerChaseChannel", typeof(EntityCollection<CustomerChaseChannelEntity>));
				_customerChaseProduct = (EntityCollection<CustomerChaseProductEntity>)info.GetValue("_customerChaseProduct", typeof(EntityCollection<CustomerChaseProductEntity>));
				_customerClinicalQuestionAnswer = (EntityCollection<CustomerClinicalQuestionAnswerEntity>)info.GetValue("_customerClinicalQuestionAnswer", typeof(EntityCollection<CustomerClinicalQuestionAnswerEntity>));
				_customerEligibility = (EntityCollection<CustomerEligibilityEntity>)info.GetValue("_customerEligibility", typeof(EntityCollection<CustomerEligibilityEntity>));
				_customerEventTestFinding = (EntityCollection<CustomerEventTestFindingEntity>)info.GetValue("_customerEventTestFinding", typeof(EntityCollection<CustomerEventTestFindingEntity>));
				_customerHealthInfo = (EntityCollection<CustomerHealthInfoEntity>)info.GetValue("_customerHealthInfo", typeof(EntityCollection<CustomerHealthInfoEntity>));
				_customerHealthInfoArchive = (EntityCollection<CustomerHealthInfoArchiveEntity>)info.GetValue("_customerHealthInfoArchive", typeof(EntityCollection<CustomerHealthInfoArchiveEntity>));
				_customerIcdCode = (EntityCollection<CustomerIcdCodeEntity>)info.GetValue("_customerIcdCode", typeof(EntityCollection<CustomerIcdCodeEntity>));
				_customerOrderHistory = (EntityCollection<CustomerOrderHistoryEntity>)info.GetValue("_customerOrderHistory", typeof(EntityCollection<CustomerOrderHistoryEntity>));
				_customerPredictedZip = (EntityCollection<CustomerPredictedZipEntity>)info.GetValue("_customerPredictedZip", typeof(EntityCollection<CustomerPredictedZipEntity>));
				_customerPrimaryCarePhysician = (EntityCollection<CustomerPrimaryCarePhysicianEntity>)info.GetValue("_customerPrimaryCarePhysician", typeof(EntityCollection<CustomerPrimaryCarePhysicianEntity>));
				_customerProfileHistory = (EntityCollection<CustomerProfileHistoryEntity>)info.GetValue("_customerProfileHistory", typeof(EntityCollection<CustomerProfileHistoryEntity>));
				_customerSurvey = (EntityCollection<CustomerSurveyEntity>)info.GetValue("_customerSurvey", typeof(EntityCollection<CustomerSurveyEntity>));
				_customerTag = (EntityCollection<CustomerTagEntity>)info.GetValue("_customerTag", typeof(EntityCollection<CustomerTagEntity>));
				_customerTargeted = (EntityCollection<CustomerTargetedEntity>)info.GetValue("_customerTargeted", typeof(EntityCollection<CustomerTargetedEntity>));
				_customerUnsubscribedSmsNotification = (EntityCollection<CustomerUnsubscribedSmsNotificationEntity>)info.GetValue("_customerUnsubscribedSmsNotification", typeof(EntityCollection<CustomerUnsubscribedSmsNotificationEntity>));
				_customerWarmTransfer = (EntityCollection<CustomerWarmTransferEntity>)info.GetValue("_customerWarmTransfer", typeof(EntityCollection<CustomerWarmTransferEntity>));
				_dependentDisqualifiedTest = (EntityCollection<DependentDisqualifiedTestEntity>)info.GetValue("_dependentDisqualifiedTest", typeof(EntityCollection<DependentDisqualifiedTestEntity>));
				_directMail = (EntityCollection<DirectMailEntity>)info.GetValue("_directMail", typeof(EntityCollection<DirectMailEntity>));
				_disqualifiedTest = (EntityCollection<DisqualifiedTestEntity>)info.GetValue("_disqualifiedTest", typeof(EntityCollection<DisqualifiedTestEntity>));
				_eventCustomerQuestionAnswer = (EntityCollection<EventCustomerQuestionAnswerEntity>)info.GetValue("_eventCustomerQuestionAnswer", typeof(EntityCollection<EventCustomerQuestionAnswerEntity>));
				_eventCustomerResult = (EntityCollection<EventCustomerResultEntity>)info.GetValue("_eventCustomerResult", typeof(EntityCollection<EventCustomerResultEntity>));
				_eventCustomers = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomers", typeof(EntityCollection<EventCustomersEntity>));
				_eventPaymentDetails = (EntityCollection<EventPaymentDetailsEntity>)info.GetValue("_eventPaymentDetails", typeof(EntityCollection<EventPaymentDetailsEntity>));
				_fillEventCallQueue = (EntityCollection<FillEventCallQueueEntity>)info.GetValue("_fillEventCallQueue", typeof(EntityCollection<FillEventCallQueueEntity>));
				_guardianDetails = (EntityCollection<GuardianDetailsEntity>)info.GetValue("_guardianDetails", typeof(EntityCollection<GuardianDetailsEntity>));
				_hospitalPartnerCustomer = (EntityCollection<HospitalPartnerCustomerEntity>)info.GetValue("_hospitalPartnerCustomer", typeof(EntityCollection<HospitalPartnerCustomerEntity>));
				_languageBarrierCallQueue = (EntityCollection<LanguageBarrierCallQueueEntity>)info.GetValue("_languageBarrierCallQueue", typeof(EntityCollection<LanguageBarrierCallQueueEntity>));
				_mailRoundCallQueue = (EntityCollection<MailRoundCallQueueEntity>)info.GetValue("_mailRoundCallQueue", typeof(EntityCollection<MailRoundCallQueueEntity>));
				_medication = (EntityCollection<MedicationEntity>)info.GetValue("_medication", typeof(EntityCollection<MedicationEntity>));
				_memberUploadLog = (EntityCollection<MemberUploadLogEntity>)info.GetValue("_memberUploadLog", typeof(EntityCollection<MemberUploadLogEntity>));
				_noShowCallQueue = (EntityCollection<NoShowCallQueueEntity>)info.GetValue("_noShowCallQueue", typeof(EntityCollection<NoShowCallQueueEntity>));
				_physicianInvoiceItem = (EntityCollection<PhysicianInvoiceItemEntity>)info.GetValue("_physicianInvoiceItem", typeof(EntityCollection<PhysicianInvoiceItemEntity>));
				_preAssessmentCustomerCallQueueCallAttempt = (EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>)info.GetValue("_preAssessmentCustomerCallQueueCallAttempt", typeof(EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>));
				_preQualificationResult = (EntityCollection<PreQualificationResultEntity>)info.GetValue("_preQualificationResult", typeof(EntityCollection<PreQualificationResultEntity>));
				_prospectCustomer = (EntityCollection<ProspectCustomerEntity>)info.GetValue("_prospectCustomer", typeof(EntityCollection<ProspectCustomerEntity>));
				_raps = (EntityCollection<RapsEntity>)info.GetValue("_raps", typeof(EntityCollection<RapsEntity>));
				_referral = (EntityCollection<ReferralEntity>)info.GetValue("_referral", typeof(EntityCollection<ReferralEntity>));
				_requiredTest = (EntityCollection<RequiredTestEntity>)info.GetValue("_requiredTest", typeof(EntityCollection<RequiredTestEntity>));
				_resultArchiveUploadLog = (EntityCollection<ResultArchiveUploadLogEntity>)info.GetValue("_resultArchiveUploadLog", typeof(EntityCollection<ResultArchiveUploadLogEntity>));
				_suspectCondition = (EntityCollection<SuspectConditionEntity>)info.GetValue("_suspectCondition", typeof(EntityCollection<SuspectConditionEntity>));
				_tempCart = (EntityCollection<TempCartEntity>)info.GetValue("_tempCart", typeof(EntityCollection<TempCartEntity>));
				_testimonial = (EntityCollection<TestimonialEntity>)info.GetValue("_testimonial", typeof(EntityCollection<TestimonialEntity>));
				_uncontactedCustomerCallQueue = (EntityCollection<UncontactedCustomerCallQueueEntity>)info.GetValue("_uncontactedCustomerCallQueue", typeof(EntityCollection<UncontactedCustomerCallQueueEntity>));
				_accountCollectionViaLanguageBarrierCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaLanguageBarrierCallQueue", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaUncontactedCustomerCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaUncontactedCustomerCallQueue", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaMailRoundCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaMailRoundCallQueue", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaCallRoundCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaCallRoundCallQueue", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaNoShowCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaNoShowCallQueue", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaCallQueueCustomer = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaCallQueueCustomer", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaFillEventCallQueue = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaFillEventCallQueue", typeof(EntityCollection<AccountEntity>));
				_activityTypeCollectionViaCallQueueCustomer = (EntityCollection<ActivityTypeEntity>)info.GetValue("_activityTypeCollectionViaCallQueueCustomer", typeof(EntityCollection<ActivityTypeEntity>));
				_addressCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<AddressEntity>)info.GetValue("_addressCollectionViaCustomerPrimaryCarePhysician", typeof(EntityCollection<AddressEntity>));
				_addressCollectionViaCustomerPrimaryCarePhysician_ = (EntityCollection<AddressEntity>)info.GetValue("_addressCollectionViaCustomerPrimaryCarePhysician_", typeof(EntityCollection<AddressEntity>));
				_afaffiliateCampaignCollectionViaEventCustomers = (EntityCollection<AfaffiliateCampaignEntity>)info.GetValue("_afaffiliateCampaignCollectionViaEventCustomers", typeof(EntityCollection<AfaffiliateCampaignEntity>));
				_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer = (EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>)info.GetValue("_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer", typeof(EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>));
				_billingAccountCollectionViaCustomerBillingAccount = (EntityCollection<BillingAccountEntity>)info.GetValue("_billingAccountCollectionViaCustomerBillingAccount", typeof(EntityCollection<BillingAccountEntity>));
				_callQueueCollectionViaCallQueueCustomer = (EntityCollection<CallQueueEntity>)info.GetValue("_callQueueCollectionViaCallQueueCustomer", typeof(EntityCollection<CallQueueEntity>));
				_callQueueCriteriaCollectionViaCallQueueCustomer = (EntityCollection<CallQueueCriteriaEntity>)info.GetValue("_callQueueCriteriaCollectionViaCallQueueCustomer", typeof(EntityCollection<CallQueueCriteriaEntity>));
				_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<CallQueueCustomerEntity>)info.GetValue("_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt", typeof(EntityCollection<CallQueueCustomerEntity>));
				_callsCollectionViaPreQualificationResult = (EntityCollection<CallsEntity>)info.GetValue("_callsCollectionViaPreQualificationResult", typeof(EntityCollection<CallsEntity>));
				_callsCollectionViaCustomerAccountGlocomNumber = (EntityCollection<CallsEntity>)info.GetValue("_callsCollectionViaCustomerAccountGlocomNumber", typeof(EntityCollection<CallsEntity>));
				_callsCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<CallsEntity>)info.GetValue("_callsCollectionViaCustomerCallQueueCallAttempt", typeof(EntityCollection<CallsEntity>));
				_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<CallsEntity>)info.GetValue("_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt", typeof(EntityCollection<CallsEntity>));
				_callUploadCollectionViaDirectMail = (EntityCollection<CallUploadEntity>)info.GetValue("_callUploadCollectionViaDirectMail", typeof(EntityCollection<CallUploadEntity>));
				_campaignCollectionViaDirectMail = (EntityCollection<CampaignEntity>)info.GetValue("_campaignCollectionViaDirectMail", typeof(EntityCollection<CampaignEntity>));
				_campaignCollectionViaEventCustomers = (EntityCollection<CampaignEntity>)info.GetValue("_campaignCollectionViaEventCustomers", typeof(EntityCollection<CampaignEntity>));
				_campaignCollectionViaCallQueueCustomer = (EntityCollection<CampaignEntity>)info.GetValue("_campaignCollectionViaCallQueueCustomer", typeof(EntityCollection<CampaignEntity>));
				_chargeCardCollectionViaTempCart = (EntityCollection<ChargeCardEntity>)info.GetValue("_chargeCardCollectionViaTempCart", typeof(EntityCollection<ChargeCardEntity>));
				_chaseCampaignCollectionViaCustomerChaseCampaign = (EntityCollection<ChaseCampaignEntity>)info.GetValue("_chaseCampaignCollectionViaCustomerChaseCampaign", typeof(EntityCollection<ChaseCampaignEntity>));
				_chaseChannelLevelCollectionViaCustomerChaseChannel = (EntityCollection<ChaseChannelLevelEntity>)info.GetValue("_chaseChannelLevelCollectionViaCustomerChaseChannel", typeof(EntityCollection<ChaseChannelLevelEntity>));
				_chaseGroupCollectionViaChaseOutbound = (EntityCollection<ChaseGroupEntity>)info.GetValue("_chaseGroupCollectionViaChaseOutbound", typeof(EntityCollection<ChaseGroupEntity>));
				_chaseOutboundCollectionViaCustomerChaseProduct = (EntityCollection<ChaseOutboundEntity>)info.GetValue("_chaseOutboundCollectionViaCustomerChaseProduct", typeof(EntityCollection<ChaseOutboundEntity>));
				_chaseOutboundCollectionViaCustomerChaseChannel = (EntityCollection<ChaseOutboundEntity>)info.GetValue("_chaseOutboundCollectionViaCustomerChaseChannel", typeof(EntityCollection<ChaseOutboundEntity>));
				_chaseOutboundCollectionViaCustomerChaseCampaign = (EntityCollection<ChaseOutboundEntity>)info.GetValue("_chaseOutboundCollectionViaCustomerChaseCampaign", typeof(EntityCollection<ChaseOutboundEntity>));
				_chaseProductCollectionViaCustomerChaseProduct = (EntityCollection<ChaseProductEntity>)info.GetValue("_chaseProductCollectionViaCustomerChaseProduct", typeof(EntityCollection<ChaseProductEntity>));
				_clickLogCollectionViaClickConversion = (EntityCollection<ClickLogEntity>)info.GetValue("_clickLogCollectionViaClickConversion", typeof(EntityCollection<ClickLogEntity>));
				_corporateUploadCollectionViaMemberUploadLog = (EntityCollection<CorporateUploadEntity>)info.GetValue("_corporateUploadCollectionViaMemberUploadLog", typeof(EntityCollection<CorporateUploadEntity>));
				_corporateUploadCollectionViaCustomerOrderHistory = (EntityCollection<CorporateUploadEntity>)info.GetValue("_corporateUploadCollectionViaCustomerOrderHistory", typeof(EntityCollection<CorporateUploadEntity>));
				_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerHealthQuestionsEntity>)info.GetValue("_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<CustomerHealthQuestionsEntity>));
				_customerHealthQuestionsCollectionViaCustomerHealthInfo = (EntityCollection<CustomerHealthQuestionsEntity>)info.GetValue("_customerHealthQuestionsCollectionViaCustomerHealthInfo", typeof(EntityCollection<CustomerHealthQuestionsEntity>));
				_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive = (EntityCollection<CustomerHealthQuestionsEntity>)info.GetValue("_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive", typeof(EntityCollection<CustomerHealthQuestionsEntity>));
				_customerProfileHistoryCollectionViaEventCustomers = (EntityCollection<CustomerProfileHistoryEntity>)info.GetValue("_customerProfileHistoryCollectionViaEventCustomers", typeof(EntityCollection<CustomerProfileHistoryEntity>));
				_customerRegistrationNotesCollectionViaEventCustomers = (EntityCollection<CustomerRegistrationNotesEntity>)info.GetValue("_customerRegistrationNotesCollectionViaEventCustomers", typeof(EntityCollection<CustomerRegistrationNotesEntity>));
				_customerSurveyQuestionAnswerCollectionViaCustomerSurvey = (EntityCollection<CustomerSurveyQuestionAnswerEntity>)info.GetValue("_customerSurveyQuestionAnswerCollectionViaCustomerSurvey", typeof(EntityCollection<CustomerSurveyQuestionAnswerEntity>));
				_directMailTypeCollectionViaDirectMail = (EntityCollection<DirectMailTypeEntity>)info.GetValue("_directMailTypeCollectionViaDirectMail", typeof(EntityCollection<DirectMailTypeEntity>));
				_eligibilityCollectionViaTempCart = (EntityCollection<EligibilityEntity>)info.GetValue("_eligibilityCollectionViaTempCart", typeof(EntityCollection<EligibilityEntity>));
				_eventAppointmentCollectionViaEventCustomers = (EntityCollection<EventAppointmentEntity>)info.GetValue("_eventAppointmentCollectionViaEventCustomers", typeof(EntityCollection<EventAppointmentEntity>));
				_eventCustomersCollectionViaCustomerHealthInfoArchive = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCustomerHealthInfoArchive", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaCallQueueCustomer = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCallQueueCustomer", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaDependentDisqualifiedTest = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaCustomerOrderHistory = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaDisqualifiedTest = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaDisqualifiedTest", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaClickConversion = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaClickConversion", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaCustomerHealthInfo = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCustomerHealthInfo", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<EventCustomersEntity>));
				_eventPackageDetailsCollectionViaCustomerOrderHistory = (EntityCollection<EventPackageDetailsEntity>)info.GetValue("_eventPackageDetailsCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventPackageDetailsEntity>));
				_eventPackageDetailsCollectionViaEventPaymentDetails = (EntityCollection<EventPackageDetailsEntity>)info.GetValue("_eventPackageDetailsCollectionViaEventPaymentDetails", typeof(EntityCollection<EventPackageDetailsEntity>));
				_eventsCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaEventCustomerResult = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaEventCustomerResult", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaEventCustomers = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaEventCustomers", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaPhysicianInvoiceItem = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaDisqualifiedTest = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaDisqualifiedTest", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaPreQualificationResult = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaPreQualificationResult", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaDependentDisqualifiedTest = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaHospitalPartnerCustomer = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaHospitalPartnerCustomer", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaCallQueueCustomer = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaCallQueueCustomer", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaCustomerEventTestFinding = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaCustomerEventTestFinding", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaCustomerOrderHistory = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventsEntity>));
				_eventsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<EventsEntity>)info.GetValue("_eventsCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<EventsEntity>));
				_eventTestCollectionViaCustomerOrderHistory = (EntityCollection<EventTestEntity>)info.GetValue("_eventTestCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventTestEntity>));
				_fileCollectionViaTestimonial = (EntityCollection<FileEntity>)info.GetValue("_fileCollectionViaTestimonial", typeof(EntityCollection<FileEntity>));
				_gcNotGivenReasonCollectionViaEventCustomers = (EntityCollection<GcNotGivenReasonEntity>)info.GetValue("_gcNotGivenReasonCollectionViaEventCustomers", typeof(EntityCollection<GcNotGivenReasonEntity>));
				_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<HafTemplateEntity>)info.GetValue("_hafTemplateCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<HafTemplateEntity>));
				_hospitalFacilityCollectionViaEventCustomers = (EntityCollection<HospitalFacilityEntity>)info.GetValue("_hospitalFacilityCollectionViaEventCustomers", typeof(EntityCollection<HospitalFacilityEntity>));
				_icdCodesCollectionViaCustomerIcdCode = (EntityCollection<IcdCodesEntity>)info.GetValue("_icdCodesCollectionViaCustomerIcdCode", typeof(EntityCollection<IcdCodesEntity>));
				_languageCollectionViaCallQueueCustomer = (EntityCollection<LanguageEntity>)info.GetValue("_languageCollectionViaCallQueueCustomer", typeof(EntityCollection<LanguageEntity>));
				_lookupCollectionViaCallRoundCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCallRoundCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult______ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult______", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaNoShowCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaNoShowCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_______ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_______", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomerResult = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomerResult", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaMailRoundCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaMailRoundCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult__ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult__", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaChaseOutbound = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaChaseOutbound", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaLanguageBarrierCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaLanguageBarrierCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_____ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_____", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult____ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult____", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult___ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult___", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerProfileHistory__ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerProfileHistory__", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerProfileHistory___ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerProfileHistory___", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerOrderHistory = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerOrderHistory", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerProfileHistory_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerProfileHistory_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaUncontactedCustomerCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaUncontactedCustomerCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerPrimaryCarePhysician", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerProfileHistory = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerProfileHistory", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCallQueueCustomer = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCallQueueCustomer", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomers = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomers", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult________ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult________", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerUnsubscribedSmsNotification = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerUnsubscribedSmsNotification", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaFillEventCallQueue = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaFillEventCallQueue", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomers_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomers_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaProspectCustomer = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaProspectCustomer", typeof(EntityCollection<LookupEntity>));
				_ndcCollectionViaCurrentMedication = (EntityCollection<NdcEntity>)info.GetValue("_ndcCollectionViaCurrentMedication", typeof(EntityCollection<NdcEntity>));
				_notesDetailsCollectionViaCallQueueCustomer = (EntityCollection<NotesDetailsEntity>)info.GetValue("_notesDetailsCollectionViaCallQueueCustomer", typeof(EntityCollection<NotesDetailsEntity>));
				_organizationRoleUserCollectionViaGuardianDetails_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaGuardianDetails_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaGuardianDetails = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaGuardianDetails", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaUncontactedCustomerCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaUncontactedCustomerCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaReferral = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaReferral", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaFillEventCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaFillEventCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaRequiredTest = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaRequiredTest", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaProspectCustomer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaProspectCustomer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaMailRoundCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaMailRoundCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaNoShowCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaNoShowCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaMedication = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaMedication", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallRoundCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallRoundCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaMedication_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaMedication_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaLanguageBarrierCallQueue = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaLanguageBarrierCallQueue", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerHealthInfo = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerHealthInfo", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaDisqualifiedTest = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaDisqualifiedTest", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerHealthInfoArchive = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerHealthInfoArchive", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaDirectMail = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaDirectMail", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaDisqualifiedTest_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaDisqualifiedTest_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerEligibility_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerEligibility_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerIcdCode = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerIcdCode", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerProfileHistory = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerProfileHistory", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerTag = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerTag", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerTag_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerTag_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerWarmTransfer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerWarmTransfer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerWarmTransfer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerWarmTransfer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerTargeted = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerTargeted", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerTargeted_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerTargeted_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerEligibility = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerEligibility", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult___ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult___", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomers = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomers", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomers_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomers_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult____ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult____", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult______ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult______", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_____ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_____", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCurrentMedication = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCurrentMedication", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_______ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_______", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult________ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult________", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_physicianEvaluationCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianEvaluationEntity>)info.GetValue("_physicianEvaluationCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<PhysicianEvaluationEntity>));
				_physicianInvoiceCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianInvoiceEntity>)info.GetValue("_physicianInvoiceCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<PhysicianInvoiceEntity>));
				_physicianMasterCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<PhysicianMasterEntity>)info.GetValue("_physicianMasterCollectionViaCustomerPrimaryCarePhysician", typeof(EntityCollection<PhysicianMasterEntity>));
				_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = (EntityCollection<PreQualificationQuestionEntity>)info.GetValue("_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<PreQualificationQuestionEntity>));
				_preQualificationQuestionCollectionViaDisqualifiedTest = (EntityCollection<PreQualificationQuestionEntity>)info.GetValue("_preQualificationQuestionCollectionViaDisqualifiedTest", typeof(EntityCollection<PreQualificationQuestionEntity>));
				_prospectCustomerCollectionViaClickConversion = (EntityCollection<ProspectCustomerEntity>)info.GetValue("_prospectCustomerCollectionViaClickConversion", typeof(EntityCollection<ProspectCustomerEntity>));
				_prospectCustomerCollectionViaTempCart = (EntityCollection<ProspectCustomerEntity>)info.GetValue("_prospectCustomerCollectionViaTempCart", typeof(EntityCollection<ProspectCustomerEntity>));
				_prospectCustomerCollectionViaCallQueueCustomer = (EntityCollection<ProspectCustomerEntity>)info.GetValue("_prospectCustomerCollectionViaCallQueueCustomer", typeof(EntityCollection<ProspectCustomerEntity>));
				_rapsUploadCollectionViaRaps = (EntityCollection<RapsUploadEntity>)info.GetValue("_rapsUploadCollectionViaRaps", typeof(EntityCollection<RapsUploadEntity>));
				_relationshipCollectionViaChaseOutbound = (EntityCollection<RelationshipEntity>)info.GetValue("_relationshipCollectionViaChaseOutbound", typeof(EntityCollection<RelationshipEntity>));
				_relationshipCollectionViaGuardianDetails = (EntityCollection<RelationshipEntity>)info.GetValue("_relationshipCollectionViaGuardianDetails", typeof(EntityCollection<RelationshipEntity>));
				_resultArchiveUploadCollectionViaResultArchiveUploadLog = (EntityCollection<ResultArchiveUploadEntity>)info.GetValue("_resultArchiveUploadCollectionViaResultArchiveUploadLog", typeof(EntityCollection<ResultArchiveUploadEntity>));
				_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification = (EntityCollection<SmsReceivedEntity>)info.GetValue("_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification", typeof(EntityCollection<SmsReceivedEntity>));
				_suspectConditionUploadCollectionViaSuspectCondition = (EntityCollection<SuspectConditionUploadEntity>)info.GetValue("_suspectConditionUploadCollectionViaSuspectCondition", typeof(EntityCollection<SuspectConditionUploadEntity>));
				_tagCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<TagEntity>)info.GetValue("_tagCollectionViaCustomerCallQueueCallAttempt", typeof(EntityCollection<TagEntity>));
				_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<TagEntity>)info.GetValue("_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt", typeof(EntityCollection<TagEntity>));
				_tempCartCollectionViaPreQualificationResult = (EntityCollection<TempCartEntity>)info.GetValue("_tempCartCollectionViaPreQualificationResult", typeof(EntityCollection<TempCartEntity>));
				_testCollectionViaDependentDisqualifiedTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaDisqualifiedTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaDisqualifiedTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaRequiredTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaRequiredTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaResultArchiveUploadLog = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaResultArchiveUploadLog", typeof(EntityCollection<TestEntity>));
				_testCollectionViaCustomerEventTestFinding = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaCustomerEventTestFinding", typeof(EntityCollection<TestEntity>));
				_activityType = (ActivityTypeEntity)info.GetValue("_activityType", typeof(ActivityTypeEntity));
				if(_activityType!=null)
				{
					_activityType.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_address = (AddressEntity)info.GetValue("_address", typeof(AddressEntity));
				if(_address!=null)
				{
					_address.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lab = (LabEntity)info.GetValue("_lab", typeof(LabEntity));
				if(_lab!=null)
				{
					_lab.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_language = (LanguageEntity)info.GetValue("_language", typeof(LanguageEntity));
				if(_language!=null)
				{
					_language.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup______ = (LookupEntity)info.GetValue("_lookup______", typeof(LookupEntity));
				if(_lookup______!=null)
				{
					_lookup______.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup_____ = (LookupEntity)info.GetValue("_lookup_____", typeof(LookupEntity));
				if(_lookup_____!=null)
				{
					_lookup_____.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup_______ = (LookupEntity)info.GetValue("_lookup_______", typeof(LookupEntity));
				if(_lookup_______!=null)
				{
					_lookup_______.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup________ = (LookupEntity)info.GetValue("_lookup________", typeof(LookupEntity));
				if(_lookup________!=null)
				{
					_lookup________.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup____ = (LookupEntity)info.GetValue("_lookup____", typeof(LookupEntity));
				if(_lookup____!=null)
				{
					_lookup____.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup_ = (LookupEntity)info.GetValue("_lookup_", typeof(LookupEntity));
				if(_lookup_!=null)
				{
					_lookup_.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup = (LookupEntity)info.GetValue("_lookup", typeof(LookupEntity));
				if(_lookup!=null)
				{
					_lookup.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup___ = (LookupEntity)info.GetValue("_lookup___", typeof(LookupEntity));
				if(_lookup___!=null)
				{
					_lookup___.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup__ = (LookupEntity)info.GetValue("_lookup__", typeof(LookupEntity));
				if(_lookup__!=null)
				{
					_lookup__.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_notesDetails = (NotesDetailsEntity)info.GetValue("_notesDetails", typeof(NotesDetailsEntity));
				if(_notesDetails!=null)
				{
					_notesDetails.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_role = (RoleEntity)info.GetValue("_role", typeof(RoleEntity));
				if(_role!=null)
				{
					_role.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_customerCallAttempts = (CustomerCallAttemptsEntity)info.GetValue("_customerCallAttempts", typeof(CustomerCallAttemptsEntity));
				if(_customerCallAttempts!=null)
				{
					_customerCallAttempts.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_customerLockForCall = (CustomerLockForCallEntity)info.GetValue("_customerLockForCall", typeof(CustomerLockForCallEntity));
				if(_customerLockForCall!=null)
				{
					_customerLockForCall.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_customerResultPosted = (CustomerResultPostedEntity)info.GetValue("_customerResultPosted", typeof(CustomerResultPostedEntity));
				if(_customerResultPosted!=null)
				{
					_customerResultPosted.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_customerTrale = (CustomerTraleEntity)info.GetValue("_customerTrale", typeof(CustomerTraleEntity));
				if(_customerTrale!=null)
				{
					_customerTrale.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser!=null)
				{
					_organizationRoleUser.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				base.FixupDeserialization(FieldInfoProviderSingleton.GetInstance());
			}
			
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		
		/// <summary>Performs the desync setup when an FK field has been changed. The entity referenced based on the FK field will be dereferenced and sync info will be removed.</summary>
		/// <param name="fieldIndex">The fieldindex.</param>
		protected override void PerformDesyncSetupFKFieldChange(int fieldIndex)
		{
			switch((CustomerProfileFieldIndex)fieldIndex)
			{
				case CustomerProfileFieldIndex.CustomerId:
					DesetupSyncOrganizationRoleUser(true, false);
					break;
				case CustomerProfileFieldIndex.BillingAddressId:
					DesetupSyncAddress(true, false);
					break;
				case CustomerProfileFieldIndex.AddedByRoleId:
					DesetupSyncRole(true, false);
					break;
				case CustomerProfileFieldIndex.DoNotContactReasonId:
					DesetupSyncLookup_______(true, false);
					break;
				case CustomerProfileFieldIndex.DoNotContactReasonNotesId:
					DesetupSyncNotesDetails(true, false);
					break;
				case CustomerProfileFieldIndex.LanguageId:
					DesetupSyncLanguage(true, false);
					break;
				case CustomerProfileFieldIndex.LabId:
					DesetupSyncLab(true, false);
					break;
				case CustomerProfileFieldIndex.DoNotContactTypeId:
					DesetupSyncLookup(true, false);
					break;
				case CustomerProfileFieldIndex.ActivityId:
					DesetupSyncActivityType(true, false);
					break;
				case CustomerProfileFieldIndex.DoNotContactUpdateSource:
					DesetupSyncLookup_(true, false);
					break;
				case CustomerProfileFieldIndex.PreferredContactType:
					DesetupSyncLookup______(true, false);
					break;
				case CustomerProfileFieldIndex.PhoneHomeConsentId:
					DesetupSyncLookup____(true, false);
					break;
				case CustomerProfileFieldIndex.PhoneCellConsentId:
					DesetupSyncLookup___(true, false);
					break;
				case CustomerProfileFieldIndex.PhoneOfficeConsentId:
					DesetupSyncLookup_____(true, false);
					break;
				case CustomerProfileFieldIndex.MemberUploadSourceId:
					DesetupSyncLookup__(true, false);
					break;
				case CustomerProfileFieldIndex.ProductTypeId:
					DesetupSyncLookup________(true, false);
					break;
				default:
					base.PerformDesyncSetupFKFieldChange(fieldIndex);
					break;
			}
		}
				
		/// <summary>Gets the inheritance info provider instance of the project this entity instance is located in. </summary>
		/// <returns>ready to use inheritance info provider instance.</returns>
		protected override IInheritanceInfoProvider GetInheritanceInfoProvider()
		{
			return InheritanceInfoProviderSingleton.GetInstance();
		}
		
		/// <summary> Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.</summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <param name="entity">Entity to set as an related entity</param>
		/// <remarks>Used by prefetch path logic.</remarks>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void SetRelatedEntityProperty(string propertyName, IEntity2 entity)
		{
			switch(propertyName)
			{
				case "ActivityType":
					this.ActivityType = (ActivityTypeEntity)entity;
					break;
				case "Address":
					this.Address = (AddressEntity)entity;
					break;
				case "Lab":
					this.Lab = (LabEntity)entity;
					break;
				case "Language":
					this.Language = (LanguageEntity)entity;
					break;
				case "Lookup______":
					this.Lookup______ = (LookupEntity)entity;
					break;
				case "Lookup_____":
					this.Lookup_____ = (LookupEntity)entity;
					break;
				case "Lookup_______":
					this.Lookup_______ = (LookupEntity)entity;
					break;
				case "Lookup________":
					this.Lookup________ = (LookupEntity)entity;
					break;
				case "Lookup____":
					this.Lookup____ = (LookupEntity)entity;
					break;
				case "Lookup_":
					this.Lookup_ = (LookupEntity)entity;
					break;
				case "Lookup":
					this.Lookup = (LookupEntity)entity;
					break;
				case "Lookup___":
					this.Lookup___ = (LookupEntity)entity;
					break;
				case "Lookup__":
					this.Lookup__ = (LookupEntity)entity;
					break;
				case "NotesDetails":
					this.NotesDetails = (NotesDetailsEntity)entity;
					break;
				case "Role":
					this.Role = (RoleEntity)entity;
					break;
				case "CallQueueCustomer":
					this.CallQueueCustomer.Add((CallQueueCustomerEntity)entity);
					break;
				case "CallRoundCallQueue":
					this.CallRoundCallQueue.Add((CallRoundCallQueueEntity)entity);
					break;
				case "ChaseOutbound":
					this.ChaseOutbound.Add((ChaseOutboundEntity)entity);
					break;
				case "ClickConversion":
					this.ClickConversion.Add((ClickConversionEntity)entity);
					break;
				case "CurrentMedication":
					this.CurrentMedication.Add((CurrentMedicationEntity)entity);
					break;
				case "CustomerAccountGlocomNumber":
					this.CustomerAccountGlocomNumber.Add((CustomerAccountGlocomNumberEntity)entity);
					break;
				case "CustomerBillingAccount":
					this.CustomerBillingAccount.Add((CustomerBillingAccountEntity)entity);
					break;
				case "CustomerCallQueueCallAttempt":
					this.CustomerCallQueueCallAttempt.Add((CustomerCallQueueCallAttemptEntity)entity);
					break;
				case "CustomerChaseCampaign":
					this.CustomerChaseCampaign.Add((CustomerChaseCampaignEntity)entity);
					break;
				case "CustomerChaseChannel":
					this.CustomerChaseChannel.Add((CustomerChaseChannelEntity)entity);
					break;
				case "CustomerChaseProduct":
					this.CustomerChaseProduct.Add((CustomerChaseProductEntity)entity);
					break;
				case "CustomerClinicalQuestionAnswer":
					this.CustomerClinicalQuestionAnswer.Add((CustomerClinicalQuestionAnswerEntity)entity);
					break;
				case "CustomerEligibility":
					this.CustomerEligibility.Add((CustomerEligibilityEntity)entity);
					break;
				case "CustomerEventTestFinding":
					this.CustomerEventTestFinding.Add((CustomerEventTestFindingEntity)entity);
					break;
				case "CustomerHealthInfo":
					this.CustomerHealthInfo.Add((CustomerHealthInfoEntity)entity);
					break;
				case "CustomerHealthInfoArchive":
					this.CustomerHealthInfoArchive.Add((CustomerHealthInfoArchiveEntity)entity);
					break;
				case "CustomerIcdCode":
					this.CustomerIcdCode.Add((CustomerIcdCodeEntity)entity);
					break;
				case "CustomerOrderHistory":
					this.CustomerOrderHistory.Add((CustomerOrderHistoryEntity)entity);
					break;
				case "CustomerPredictedZip":
					this.CustomerPredictedZip.Add((CustomerPredictedZipEntity)entity);
					break;
				case "CustomerPrimaryCarePhysician":
					this.CustomerPrimaryCarePhysician.Add((CustomerPrimaryCarePhysicianEntity)entity);
					break;
				case "CustomerProfileHistory":
					this.CustomerProfileHistory.Add((CustomerProfileHistoryEntity)entity);
					break;
				case "CustomerSurvey":
					this.CustomerSurvey.Add((CustomerSurveyEntity)entity);
					break;
				case "CustomerTag":
					this.CustomerTag.Add((CustomerTagEntity)entity);
					break;
				case "CustomerTargeted":
					this.CustomerTargeted.Add((CustomerTargetedEntity)entity);
					break;
				case "CustomerUnsubscribedSmsNotification":
					this.CustomerUnsubscribedSmsNotification.Add((CustomerUnsubscribedSmsNotificationEntity)entity);
					break;
				case "CustomerWarmTransfer":
					this.CustomerWarmTransfer.Add((CustomerWarmTransferEntity)entity);
					break;
				case "DependentDisqualifiedTest":
					this.DependentDisqualifiedTest.Add((DependentDisqualifiedTestEntity)entity);
					break;
				case "DirectMail":
					this.DirectMail.Add((DirectMailEntity)entity);
					break;
				case "DisqualifiedTest":
					this.DisqualifiedTest.Add((DisqualifiedTestEntity)entity);
					break;
				case "EventCustomerQuestionAnswer":
					this.EventCustomerQuestionAnswer.Add((EventCustomerQuestionAnswerEntity)entity);
					break;
				case "EventCustomerResult":
					this.EventCustomerResult.Add((EventCustomerResultEntity)entity);
					break;
				case "EventCustomers":
					this.EventCustomers.Add((EventCustomersEntity)entity);
					break;
				case "EventPaymentDetails":
					this.EventPaymentDetails.Add((EventPaymentDetailsEntity)entity);
					break;
				case "FillEventCallQueue":
					this.FillEventCallQueue.Add((FillEventCallQueueEntity)entity);
					break;
				case "GuardianDetails":
					this.GuardianDetails.Add((GuardianDetailsEntity)entity);
					break;
				case "HospitalPartnerCustomer":
					this.HospitalPartnerCustomer.Add((HospitalPartnerCustomerEntity)entity);
					break;
				case "LanguageBarrierCallQueue":
					this.LanguageBarrierCallQueue.Add((LanguageBarrierCallQueueEntity)entity);
					break;
				case "MailRoundCallQueue":
					this.MailRoundCallQueue.Add((MailRoundCallQueueEntity)entity);
					break;
				case "Medication":
					this.Medication.Add((MedicationEntity)entity);
					break;
				case "MemberUploadLog":
					this.MemberUploadLog.Add((MemberUploadLogEntity)entity);
					break;
				case "NoShowCallQueue":
					this.NoShowCallQueue.Add((NoShowCallQueueEntity)entity);
					break;
				case "PhysicianInvoiceItem":
					this.PhysicianInvoiceItem.Add((PhysicianInvoiceItemEntity)entity);
					break;
				case "PreAssessmentCustomerCallQueueCallAttempt":
					this.PreAssessmentCustomerCallQueueCallAttempt.Add((PreAssessmentCustomerCallQueueCallAttemptEntity)entity);
					break;
				case "PreQualificationResult":
					this.PreQualificationResult.Add((PreQualificationResultEntity)entity);
					break;
				case "ProspectCustomer":
					this.ProspectCustomer.Add((ProspectCustomerEntity)entity);
					break;
				case "Raps":
					this.Raps.Add((RapsEntity)entity);
					break;
				case "Referral":
					this.Referral.Add((ReferralEntity)entity);
					break;
				case "RequiredTest":
					this.RequiredTest.Add((RequiredTestEntity)entity);
					break;
				case "ResultArchiveUploadLog":
					this.ResultArchiveUploadLog.Add((ResultArchiveUploadLogEntity)entity);
					break;
				case "SuspectCondition":
					this.SuspectCondition.Add((SuspectConditionEntity)entity);
					break;
				case "TempCart":
					this.TempCart.Add((TempCartEntity)entity);
					break;
				case "Testimonial":
					this.Testimonial.Add((TestimonialEntity)entity);
					break;
				case "UncontactedCustomerCallQueue":
					this.UncontactedCustomerCallQueue.Add((UncontactedCustomerCallQueueEntity)entity);
					break;
				case "AccountCollectionViaLanguageBarrierCallQueue":
					this.AccountCollectionViaLanguageBarrierCallQueue.IsReadOnly = false;
					this.AccountCollectionViaLanguageBarrierCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaLanguageBarrierCallQueue.IsReadOnly = true;
					break;
				case "AccountCollectionViaUncontactedCustomerCallQueue":
					this.AccountCollectionViaUncontactedCustomerCallQueue.IsReadOnly = false;
					this.AccountCollectionViaUncontactedCustomerCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaUncontactedCustomerCallQueue.IsReadOnly = true;
					break;
				case "AccountCollectionViaMailRoundCallQueue":
					this.AccountCollectionViaMailRoundCallQueue.IsReadOnly = false;
					this.AccountCollectionViaMailRoundCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaMailRoundCallQueue.IsReadOnly = true;
					break;
				case "AccountCollectionViaCallRoundCallQueue":
					this.AccountCollectionViaCallRoundCallQueue.IsReadOnly = false;
					this.AccountCollectionViaCallRoundCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaCallRoundCallQueue.IsReadOnly = true;
					break;
				case "AccountCollectionViaNoShowCallQueue":
					this.AccountCollectionViaNoShowCallQueue.IsReadOnly = false;
					this.AccountCollectionViaNoShowCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaNoShowCallQueue.IsReadOnly = true;
					break;
				case "AccountCollectionViaCallQueueCustomer":
					this.AccountCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.AccountCollectionViaCallQueueCustomer.Add((AccountEntity)entity);
					this.AccountCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "AccountCollectionViaFillEventCallQueue":
					this.AccountCollectionViaFillEventCallQueue.IsReadOnly = false;
					this.AccountCollectionViaFillEventCallQueue.Add((AccountEntity)entity);
					this.AccountCollectionViaFillEventCallQueue.IsReadOnly = true;
					break;
				case "ActivityTypeCollectionViaCallQueueCustomer":
					this.ActivityTypeCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.ActivityTypeCollectionViaCallQueueCustomer.Add((ActivityTypeEntity)entity);
					this.ActivityTypeCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "AddressCollectionViaCustomerPrimaryCarePhysician":
					this.AddressCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = false;
					this.AddressCollectionViaCustomerPrimaryCarePhysician.Add((AddressEntity)entity);
					this.AddressCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = true;
					break;
				case "AddressCollectionViaCustomerPrimaryCarePhysician_":
					this.AddressCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly = false;
					this.AddressCollectionViaCustomerPrimaryCarePhysician_.Add((AddressEntity)entity);
					this.AddressCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly = true;
					break;
				case "AfaffiliateCampaignCollectionViaEventCustomers":
					this.AfaffiliateCampaignCollectionViaEventCustomers.IsReadOnly = false;
					this.AfaffiliateCampaignCollectionViaEventCustomers.Add((AfaffiliateCampaignEntity)entity);
					this.AfaffiliateCampaignCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer":
					this.AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.IsReadOnly = false;
					this.AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.Add((AfaffiliateCampaignMarketingMaterialEntity)entity);
					this.AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.IsReadOnly = true;
					break;
				case "BillingAccountCollectionViaCustomerBillingAccount":
					this.BillingAccountCollectionViaCustomerBillingAccount.IsReadOnly = false;
					this.BillingAccountCollectionViaCustomerBillingAccount.Add((BillingAccountEntity)entity);
					this.BillingAccountCollectionViaCustomerBillingAccount.IsReadOnly = true;
					break;
				case "CallQueueCollectionViaCallQueueCustomer":
					this.CallQueueCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CallQueueCollectionViaCallQueueCustomer.Add((CallQueueEntity)entity);
					this.CallQueueCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CallQueueCriteriaCollectionViaCallQueueCustomer":
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.Add((CallQueueCriteriaEntity)entity);
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt":
					this.CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt.Add((CallQueueCustomerEntity)entity);
					this.CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "CallsCollectionViaPreQualificationResult":
					this.CallsCollectionViaPreQualificationResult.IsReadOnly = false;
					this.CallsCollectionViaPreQualificationResult.Add((CallsEntity)entity);
					this.CallsCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "CallsCollectionViaCustomerAccountGlocomNumber":
					this.CallsCollectionViaCustomerAccountGlocomNumber.IsReadOnly = false;
					this.CallsCollectionViaCustomerAccountGlocomNumber.Add((CallsEntity)entity);
					this.CallsCollectionViaCustomerAccountGlocomNumber.IsReadOnly = true;
					break;
				case "CallsCollectionViaCustomerCallQueueCallAttempt":
					this.CallsCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.CallsCollectionViaCustomerCallQueueCallAttempt.Add((CallsEntity)entity);
					this.CallsCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					this.CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Add((CallsEntity)entity);
					this.CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "CallUploadCollectionViaDirectMail":
					this.CallUploadCollectionViaDirectMail.IsReadOnly = false;
					this.CallUploadCollectionViaDirectMail.Add((CallUploadEntity)entity);
					this.CallUploadCollectionViaDirectMail.IsReadOnly = true;
					break;
				case "CampaignCollectionViaDirectMail":
					this.CampaignCollectionViaDirectMail.IsReadOnly = false;
					this.CampaignCollectionViaDirectMail.Add((CampaignEntity)entity);
					this.CampaignCollectionViaDirectMail.IsReadOnly = true;
					break;
				case "CampaignCollectionViaEventCustomers":
					this.CampaignCollectionViaEventCustomers.IsReadOnly = false;
					this.CampaignCollectionViaEventCustomers.Add((CampaignEntity)entity);
					this.CampaignCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CampaignCollectionViaCallQueueCustomer":
					this.CampaignCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CampaignCollectionViaCallQueueCustomer.Add((CampaignEntity)entity);
					this.CampaignCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "ChargeCardCollectionViaTempCart":
					this.ChargeCardCollectionViaTempCart.IsReadOnly = false;
					this.ChargeCardCollectionViaTempCart.Add((ChargeCardEntity)entity);
					this.ChargeCardCollectionViaTempCart.IsReadOnly = true;
					break;
				case "ChaseCampaignCollectionViaCustomerChaseCampaign":
					this.ChaseCampaignCollectionViaCustomerChaseCampaign.IsReadOnly = false;
					this.ChaseCampaignCollectionViaCustomerChaseCampaign.Add((ChaseCampaignEntity)entity);
					this.ChaseCampaignCollectionViaCustomerChaseCampaign.IsReadOnly = true;
					break;
				case "ChaseChannelLevelCollectionViaCustomerChaseChannel":
					this.ChaseChannelLevelCollectionViaCustomerChaseChannel.IsReadOnly = false;
					this.ChaseChannelLevelCollectionViaCustomerChaseChannel.Add((ChaseChannelLevelEntity)entity);
					this.ChaseChannelLevelCollectionViaCustomerChaseChannel.IsReadOnly = true;
					break;
				case "ChaseGroupCollectionViaChaseOutbound":
					this.ChaseGroupCollectionViaChaseOutbound.IsReadOnly = false;
					this.ChaseGroupCollectionViaChaseOutbound.Add((ChaseGroupEntity)entity);
					this.ChaseGroupCollectionViaChaseOutbound.IsReadOnly = true;
					break;
				case "ChaseOutboundCollectionViaCustomerChaseProduct":
					this.ChaseOutboundCollectionViaCustomerChaseProduct.IsReadOnly = false;
					this.ChaseOutboundCollectionViaCustomerChaseProduct.Add((ChaseOutboundEntity)entity);
					this.ChaseOutboundCollectionViaCustomerChaseProduct.IsReadOnly = true;
					break;
				case "ChaseOutboundCollectionViaCustomerChaseChannel":
					this.ChaseOutboundCollectionViaCustomerChaseChannel.IsReadOnly = false;
					this.ChaseOutboundCollectionViaCustomerChaseChannel.Add((ChaseOutboundEntity)entity);
					this.ChaseOutboundCollectionViaCustomerChaseChannel.IsReadOnly = true;
					break;
				case "ChaseOutboundCollectionViaCustomerChaseCampaign":
					this.ChaseOutboundCollectionViaCustomerChaseCampaign.IsReadOnly = false;
					this.ChaseOutboundCollectionViaCustomerChaseCampaign.Add((ChaseOutboundEntity)entity);
					this.ChaseOutboundCollectionViaCustomerChaseCampaign.IsReadOnly = true;
					break;
				case "ChaseProductCollectionViaCustomerChaseProduct":
					this.ChaseProductCollectionViaCustomerChaseProduct.IsReadOnly = false;
					this.ChaseProductCollectionViaCustomerChaseProduct.Add((ChaseProductEntity)entity);
					this.ChaseProductCollectionViaCustomerChaseProduct.IsReadOnly = true;
					break;
				case "ClickLogCollectionViaClickConversion":
					this.ClickLogCollectionViaClickConversion.IsReadOnly = false;
					this.ClickLogCollectionViaClickConversion.Add((ClickLogEntity)entity);
					this.ClickLogCollectionViaClickConversion.IsReadOnly = true;
					break;
				case "CorporateUploadCollectionViaMemberUploadLog":
					this.CorporateUploadCollectionViaMemberUploadLog.IsReadOnly = false;
					this.CorporateUploadCollectionViaMemberUploadLog.Add((CorporateUploadEntity)entity);
					this.CorporateUploadCollectionViaMemberUploadLog.IsReadOnly = true;
					break;
				case "CorporateUploadCollectionViaCustomerOrderHistory":
					this.CorporateUploadCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.CorporateUploadCollectionViaCustomerOrderHistory.Add((CorporateUploadEntity)entity);
					this.CorporateUploadCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer":
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.Add((CustomerHealthQuestionsEntity)entity);
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerHealthInfo":
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfo.IsReadOnly = false;
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfo.Add((CustomerHealthQuestionsEntity)entity);
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfo.IsReadOnly = true;
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive":
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive.IsReadOnly = false;
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive.Add((CustomerHealthQuestionsEntity)entity);
					this.CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive.IsReadOnly = true;
					break;
				case "CustomerProfileHistoryCollectionViaEventCustomers":
					this.CustomerProfileHistoryCollectionViaEventCustomers.IsReadOnly = false;
					this.CustomerProfileHistoryCollectionViaEventCustomers.Add((CustomerProfileHistoryEntity)entity);
					this.CustomerProfileHistoryCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CustomerRegistrationNotesCollectionViaEventCustomers":
					this.CustomerRegistrationNotesCollectionViaEventCustomers.IsReadOnly = false;
					this.CustomerRegistrationNotesCollectionViaEventCustomers.Add((CustomerRegistrationNotesEntity)entity);
					this.CustomerRegistrationNotesCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey":
					this.CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey.IsReadOnly = false;
					this.CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey.Add((CustomerSurveyQuestionAnswerEntity)entity);
					this.CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey.IsReadOnly = true;
					break;
				case "DirectMailTypeCollectionViaDirectMail":
					this.DirectMailTypeCollectionViaDirectMail.IsReadOnly = false;
					this.DirectMailTypeCollectionViaDirectMail.Add((DirectMailTypeEntity)entity);
					this.DirectMailTypeCollectionViaDirectMail.IsReadOnly = true;
					break;
				case "EligibilityCollectionViaTempCart":
					this.EligibilityCollectionViaTempCart.IsReadOnly = false;
					this.EligibilityCollectionViaTempCart.Add((EligibilityEntity)entity);
					this.EligibilityCollectionViaTempCart.IsReadOnly = true;
					break;
				case "EventAppointmentCollectionViaEventCustomers":
					this.EventAppointmentCollectionViaEventCustomers.IsReadOnly = false;
					this.EventAppointmentCollectionViaEventCustomers.Add((EventAppointmentEntity)entity);
					this.EventAppointmentCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCustomerHealthInfoArchive":
					this.EventCustomersCollectionViaCustomerHealthInfoArchive.IsReadOnly = false;
					this.EventCustomersCollectionViaCustomerHealthInfoArchive.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCustomerHealthInfoArchive.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCallQueueCustomer":
					this.EventCustomersCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.EventCustomersCollectionViaCallQueueCustomer.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaDependentDisqualifiedTest":
					this.EventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.EventCustomersCollectionViaDependentDisqualifiedTest.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCustomerOrderHistory":
					this.EventCustomersCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventCustomersCollectionViaCustomerOrderHistory.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaDisqualifiedTest":
					this.EventCustomersCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.EventCustomersCollectionViaDisqualifiedTest.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaClickConversion":
					this.EventCustomersCollectionViaClickConversion.IsReadOnly = false;
					this.EventCustomersCollectionViaClickConversion.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaClickConversion.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCustomerHealthInfo":
					this.EventCustomersCollectionViaCustomerHealthInfo.IsReadOnly = false;
					this.EventCustomersCollectionViaCustomerHealthInfo.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCustomerHealthInfo.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaEventCustomerQuestionAnswer":
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "EventPackageDetailsCollectionViaCustomerOrderHistory":
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.Add((EventPackageDetailsEntity)entity);
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "EventPackageDetailsCollectionViaEventPaymentDetails":
					this.EventPackageDetailsCollectionViaEventPaymentDetails.IsReadOnly = false;
					this.EventPackageDetailsCollectionViaEventPaymentDetails.Add((EventPackageDetailsEntity)entity);
					this.EventPackageDetailsCollectionViaEventPaymentDetails.IsReadOnly = true;
					break;
				case "EventsCollectionViaEventCustomerQuestionAnswer":
					this.EventsCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.EventsCollectionViaEventCustomerQuestionAnswer.Add((EventsEntity)entity);
					this.EventsCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "EventsCollectionViaEventCustomerResult":
					this.EventsCollectionViaEventCustomerResult.IsReadOnly = false;
					this.EventsCollectionViaEventCustomerResult.Add((EventsEntity)entity);
					this.EventsCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "EventsCollectionViaEventCustomers":
					this.EventsCollectionViaEventCustomers.IsReadOnly = false;
					this.EventsCollectionViaEventCustomers.Add((EventsEntity)entity);
					this.EventsCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "EventsCollectionViaPhysicianInvoiceItem":
					this.EventsCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.EventsCollectionViaPhysicianInvoiceItem.Add((EventsEntity)entity);
					this.EventsCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "EventsCollectionViaDisqualifiedTest":
					this.EventsCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.EventsCollectionViaDisqualifiedTest.Add((EventsEntity)entity);
					this.EventsCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventsCollectionViaPreQualificationResult":
					this.EventsCollectionViaPreQualificationResult.IsReadOnly = false;
					this.EventsCollectionViaPreQualificationResult.Add((EventsEntity)entity);
					this.EventsCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "EventsCollectionViaDependentDisqualifiedTest":
					this.EventsCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.EventsCollectionViaDependentDisqualifiedTest.Add((EventsEntity)entity);
					this.EventsCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventsCollectionViaHospitalPartnerCustomer":
					this.EventsCollectionViaHospitalPartnerCustomer.IsReadOnly = false;
					this.EventsCollectionViaHospitalPartnerCustomer.Add((EventsEntity)entity);
					this.EventsCollectionViaHospitalPartnerCustomer.IsReadOnly = true;
					break;
				case "EventsCollectionViaCallQueueCustomer":
					this.EventsCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.EventsCollectionViaCallQueueCustomer.Add((EventsEntity)entity);
					this.EventsCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "EventsCollectionViaCustomerEventTestFinding":
					this.EventsCollectionViaCustomerEventTestFinding.IsReadOnly = false;
					this.EventsCollectionViaCustomerEventTestFinding.Add((EventsEntity)entity);
					this.EventsCollectionViaCustomerEventTestFinding.IsReadOnly = true;
					break;
				case "EventsCollectionViaCustomerOrderHistory":
					this.EventsCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventsCollectionViaCustomerOrderHistory.Add((EventsEntity)entity);
					this.EventsCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "EventsCollectionViaCustomerClinicalQuestionAnswer":
					this.EventsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.EventsCollectionViaCustomerClinicalQuestionAnswer.Add((EventsEntity)entity);
					this.EventsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "EventTestCollectionViaCustomerOrderHistory":
					this.EventTestCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventTestCollectionViaCustomerOrderHistory.Add((EventTestEntity)entity);
					this.EventTestCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "FileCollectionViaTestimonial":
					this.FileCollectionViaTestimonial.IsReadOnly = false;
					this.FileCollectionViaTestimonial.Add((FileEntity)entity);
					this.FileCollectionViaTestimonial.IsReadOnly = true;
					break;
				case "GcNotGivenReasonCollectionViaEventCustomers":
					this.GcNotGivenReasonCollectionViaEventCustomers.IsReadOnly = false;
					this.GcNotGivenReasonCollectionViaEventCustomers.Add((GcNotGivenReasonEntity)entity);
					this.GcNotGivenReasonCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "HafTemplateCollectionViaCustomerClinicalQuestionAnswer":
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.Add((HafTemplateEntity)entity);
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "HospitalFacilityCollectionViaEventCustomers":
					this.HospitalFacilityCollectionViaEventCustomers.IsReadOnly = false;
					this.HospitalFacilityCollectionViaEventCustomers.Add((HospitalFacilityEntity)entity);
					this.HospitalFacilityCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "IcdCodesCollectionViaCustomerIcdCode":
					this.IcdCodesCollectionViaCustomerIcdCode.IsReadOnly = false;
					this.IcdCodesCollectionViaCustomerIcdCode.Add((IcdCodesEntity)entity);
					this.IcdCodesCollectionViaCustomerIcdCode.IsReadOnly = true;
					break;
				case "LanguageCollectionViaCallQueueCustomer":
					this.LanguageCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.LanguageCollectionViaCallQueueCustomer.Add((LanguageEntity)entity);
					this.LanguageCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "LookupCollectionViaCallRoundCallQueue":
					this.LookupCollectionViaCallRoundCallQueue.IsReadOnly = false;
					this.LookupCollectionViaCallRoundCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaCallRoundCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult______":
					this.LookupCollectionViaPreQualificationResult______.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult______.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult______.IsReadOnly = true;
					break;
				case "LookupCollectionViaNoShowCallQueue":
					this.LookupCollectionViaNoShowCallQueue.IsReadOnly = false;
					this.LookupCollectionViaNoShowCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaNoShowCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult":
					this.LookupCollectionViaPreQualificationResult.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_______":
					this.LookupCollectionViaPreQualificationResult_______.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_______.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_______.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomerResult":
					this.LookupCollectionViaEventCustomerResult.IsReadOnly = false;
					this.LookupCollectionViaEventCustomerResult.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "LookupCollectionViaMailRoundCallQueue":
					this.LookupCollectionViaMailRoundCallQueue.IsReadOnly = false;
					this.LookupCollectionViaMailRoundCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaMailRoundCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult__":
					this.LookupCollectionViaPreQualificationResult__.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult__.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult__.IsReadOnly = true;
					break;
				case "LookupCollectionViaChaseOutbound":
					this.LookupCollectionViaChaseOutbound.IsReadOnly = false;
					this.LookupCollectionViaChaseOutbound.Add((LookupEntity)entity);
					this.LookupCollectionViaChaseOutbound.IsReadOnly = true;
					break;
				case "LookupCollectionViaLanguageBarrierCallQueue":
					this.LookupCollectionViaLanguageBarrierCallQueue.IsReadOnly = false;
					this.LookupCollectionViaLanguageBarrierCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaLanguageBarrierCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_____":
					this.LookupCollectionViaPreQualificationResult_____.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_____.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_____.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult____":
					this.LookupCollectionViaPreQualificationResult____.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult____.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult____.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult___":
					this.LookupCollectionViaPreQualificationResult___.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult___.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult___.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerProfileHistory__":
					this.LookupCollectionViaCustomerProfileHistory__.IsReadOnly = false;
					this.LookupCollectionViaCustomerProfileHistory__.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerProfileHistory__.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerProfileHistory___":
					this.LookupCollectionViaCustomerProfileHistory___.IsReadOnly = false;
					this.LookupCollectionViaCustomerProfileHistory___.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerProfileHistory___.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerOrderHistory":
					this.LookupCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.LookupCollectionViaCustomerOrderHistory.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerProfileHistory_":
					this.LookupCollectionViaCustomerProfileHistory_.IsReadOnly = false;
					this.LookupCollectionViaCustomerProfileHistory_.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerProfileHistory_.IsReadOnly = true;
					break;
				case "LookupCollectionViaUncontactedCustomerCallQueue":
					this.LookupCollectionViaUncontactedCustomerCallQueue.IsReadOnly = false;
					this.LookupCollectionViaUncontactedCustomerCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaUncontactedCustomerCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerPrimaryCarePhysician":
					this.LookupCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = false;
					this.LookupCollectionViaCustomerPrimaryCarePhysician.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerProfileHistory":
					this.LookupCollectionViaCustomerProfileHistory.IsReadOnly = false;
					this.LookupCollectionViaCustomerProfileHistory.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerProfileHistory.IsReadOnly = true;
					break;
				case "LookupCollectionViaCallQueueCustomer":
					this.LookupCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.LookupCollectionViaCallQueueCustomer.Add((LookupEntity)entity);
					this.LookupCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomers":
					this.LookupCollectionViaEventCustomers.IsReadOnly = false;
					this.LookupCollectionViaEventCustomers.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_":
					this.LookupCollectionViaPreQualificationResult_.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult________":
					this.LookupCollectionViaPreQualificationResult________.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult________.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult________.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerUnsubscribedSmsNotification":
					this.LookupCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly = false;
					this.LookupCollectionViaCustomerUnsubscribedSmsNotification.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly = true;
					break;
				case "LookupCollectionViaFillEventCallQueue":
					this.LookupCollectionViaFillEventCallQueue.IsReadOnly = false;
					this.LookupCollectionViaFillEventCallQueue.Add((LookupEntity)entity);
					this.LookupCollectionViaFillEventCallQueue.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomers_":
					this.LookupCollectionViaEventCustomers_.IsReadOnly = false;
					this.LookupCollectionViaEventCustomers_.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomers_.IsReadOnly = true;
					break;
				case "LookupCollectionViaProspectCustomer":
					this.LookupCollectionViaProspectCustomer.IsReadOnly = false;
					this.LookupCollectionViaProspectCustomer.Add((LookupEntity)entity);
					this.LookupCollectionViaProspectCustomer.IsReadOnly = true;
					break;
				case "NdcCollectionViaCurrentMedication":
					this.NdcCollectionViaCurrentMedication.IsReadOnly = false;
					this.NdcCollectionViaCurrentMedication.Add((NdcEntity)entity);
					this.NdcCollectionViaCurrentMedication.IsReadOnly = true;
					break;
				case "NotesDetailsCollectionViaCallQueueCustomer":
					this.NotesDetailsCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.NotesDetailsCollectionViaCallQueueCustomer.Add((NotesDetailsEntity)entity);
					this.NotesDetailsCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaGuardianDetails_":
					this.OrganizationRoleUserCollectionViaGuardianDetails_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaGuardianDetails_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaGuardianDetails_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaGuardianDetails":
					this.OrganizationRoleUserCollectionViaGuardianDetails.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaGuardianDetails.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaGuardianDetails.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue":
					this.OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer_":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaReferral":
					this.OrganizationRoleUserCollectionViaReferral.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaReferral.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaReferral.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaFillEventCallQueue":
					this.OrganizationRoleUserCollectionViaFillEventCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaFillEventCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaFillEventCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaRequiredTest":
					this.OrganizationRoleUserCollectionViaRequiredTest.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaRequiredTest.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaRequiredTest.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaProspectCustomer":
					this.OrganizationRoleUserCollectionViaProspectCustomer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaProspectCustomer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaProspectCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaMailRoundCallQueue":
					this.OrganizationRoleUserCollectionViaMailRoundCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaMailRoundCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaMailRoundCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaNoShowCallQueue":
					this.OrganizationRoleUserCollectionViaNoShowCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaNoShowCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaNoShowCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaMedication":
					this.OrganizationRoleUserCollectionViaMedication.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaMedication.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaMedication.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallRoundCallQueue":
					this.OrganizationRoleUserCollectionViaCallRoundCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallRoundCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallRoundCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaMedication_":
					this.OrganizationRoleUserCollectionViaMedication_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaMedication_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaMedication_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer__":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaLanguageBarrierCallQueue":
					this.OrganizationRoleUserCollectionViaLanguageBarrierCallQueue.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaLanguageBarrierCallQueue.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaLanguageBarrierCallQueue.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					this.OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerHealthInfo":
					this.OrganizationRoleUserCollectionViaCustomerHealthInfo.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerHealthInfo.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerHealthInfo.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest":
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerHealthInfoArchive":
					this.OrganizationRoleUserCollectionViaCustomerHealthInfoArchive.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerHealthInfoArchive.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerHealthInfoArchive.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaDirectMail":
					this.OrganizationRoleUserCollectionViaDirectMail.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaDirectMail.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaDirectMail.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest_":
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer":
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_":
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician":
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerEligibility_":
					this.OrganizationRoleUserCollectionViaCustomerEligibility_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerEligibility_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerEligibility_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerIcdCode":
					this.OrganizationRoleUserCollectionViaCustomerIcdCode.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerIcdCode.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerIcdCode.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerProfileHistory":
					this.OrganizationRoleUserCollectionViaCustomerProfileHistory.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerProfileHistory.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerProfileHistory.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerTag":
					this.OrganizationRoleUserCollectionViaCustomerTag.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerTag.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerTag.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_":
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__":
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerTag_":
					this.OrganizationRoleUserCollectionViaCustomerTag_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerTag_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerTag_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerWarmTransfer":
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerWarmTransfer_":
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerWarmTransfer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerTargeted":
					this.OrganizationRoleUserCollectionViaCustomerTargeted.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerTargeted.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerTargeted.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerTargeted_":
					this.OrganizationRoleUserCollectionViaCustomerTargeted_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerTargeted_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerTargeted_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerEligibility":
					this.OrganizationRoleUserCollectionViaCustomerEligibility.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerEligibility.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerEligibility.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult___":
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers":
					this.OrganizationRoleUserCollectionViaEventCustomers.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomers.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers_":
					this.OrganizationRoleUserCollectionViaEventCustomers_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomers_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomers_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult__":
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult____":
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult______":
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer":
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_____":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt":
					this.OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_":
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCurrentMedication":
					this.OrganizationRoleUserCollectionViaCurrentMedication.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCurrentMedication.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCurrentMedication.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult":
					this.OrganizationRoleUserCollectionViaEventCustomerResult.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_______":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult________":
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly = true;
					break;
				case "PhysicianEvaluationCollectionViaPhysicianInvoiceItem":
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.Add((PhysicianEvaluationEntity)entity);
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "PhysicianInvoiceCollectionViaPhysicianInvoiceItem":
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.Add((PhysicianInvoiceEntity)entity);
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "PhysicianMasterCollectionViaCustomerPrimaryCarePhysician":
					this.PhysicianMasterCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = false;
					this.PhysicianMasterCollectionViaCustomerPrimaryCarePhysician.Add((PhysicianMasterEntity)entity);
					this.PhysicianMasterCollectionViaCustomerPrimaryCarePhysician.IsReadOnly = true;
					break;
				case "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer":
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.Add((PreQualificationQuestionEntity)entity);
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "PreQualificationQuestionCollectionViaDisqualifiedTest":
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.Add((PreQualificationQuestionEntity)entity);
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "ProspectCustomerCollectionViaClickConversion":
					this.ProspectCustomerCollectionViaClickConversion.IsReadOnly = false;
					this.ProspectCustomerCollectionViaClickConversion.Add((ProspectCustomerEntity)entity);
					this.ProspectCustomerCollectionViaClickConversion.IsReadOnly = true;
					break;
				case "ProspectCustomerCollectionViaTempCart":
					this.ProspectCustomerCollectionViaTempCart.IsReadOnly = false;
					this.ProspectCustomerCollectionViaTempCart.Add((ProspectCustomerEntity)entity);
					this.ProspectCustomerCollectionViaTempCart.IsReadOnly = true;
					break;
				case "ProspectCustomerCollectionViaCallQueueCustomer":
					this.ProspectCustomerCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.ProspectCustomerCollectionViaCallQueueCustomer.Add((ProspectCustomerEntity)entity);
					this.ProspectCustomerCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "RapsUploadCollectionViaRaps":
					this.RapsUploadCollectionViaRaps.IsReadOnly = false;
					this.RapsUploadCollectionViaRaps.Add((RapsUploadEntity)entity);
					this.RapsUploadCollectionViaRaps.IsReadOnly = true;
					break;
				case "RelationshipCollectionViaChaseOutbound":
					this.RelationshipCollectionViaChaseOutbound.IsReadOnly = false;
					this.RelationshipCollectionViaChaseOutbound.Add((RelationshipEntity)entity);
					this.RelationshipCollectionViaChaseOutbound.IsReadOnly = true;
					break;
				case "RelationshipCollectionViaGuardianDetails":
					this.RelationshipCollectionViaGuardianDetails.IsReadOnly = false;
					this.RelationshipCollectionViaGuardianDetails.Add((RelationshipEntity)entity);
					this.RelationshipCollectionViaGuardianDetails.IsReadOnly = true;
					break;
				case "ResultArchiveUploadCollectionViaResultArchiveUploadLog":
					this.ResultArchiveUploadCollectionViaResultArchiveUploadLog.IsReadOnly = false;
					this.ResultArchiveUploadCollectionViaResultArchiveUploadLog.Add((ResultArchiveUploadEntity)entity);
					this.ResultArchiveUploadCollectionViaResultArchiveUploadLog.IsReadOnly = true;
					break;
				case "SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification":
					this.SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly = false;
					this.SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification.Add((SmsReceivedEntity)entity);
					this.SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly = true;
					break;
				case "SuspectConditionUploadCollectionViaSuspectCondition":
					this.SuspectConditionUploadCollectionViaSuspectCondition.IsReadOnly = false;
					this.SuspectConditionUploadCollectionViaSuspectCondition.Add((SuspectConditionUploadEntity)entity);
					this.SuspectConditionUploadCollectionViaSuspectCondition.IsReadOnly = true;
					break;
				case "TagCollectionViaCustomerCallQueueCallAttempt":
					this.TagCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.TagCollectionViaCustomerCallQueueCallAttempt.Add((TagEntity)entity);
					this.TagCollectionViaCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					this.TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = false;
					this.TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Add((TagEntity)entity);
					this.TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly = true;
					break;
				case "TempCartCollectionViaPreQualificationResult":
					this.TempCartCollectionViaPreQualificationResult.IsReadOnly = false;
					this.TempCartCollectionViaPreQualificationResult.Add((TempCartEntity)entity);
					this.TempCartCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "TestCollectionViaDependentDisqualifiedTest":
					this.TestCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.TestCollectionViaDependentDisqualifiedTest.Add((TestEntity)entity);
					this.TestCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "TestCollectionViaDisqualifiedTest":
					this.TestCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.TestCollectionViaDisqualifiedTest.Add((TestEntity)entity);
					this.TestCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "TestCollectionViaRequiredTest":
					this.TestCollectionViaRequiredTest.IsReadOnly = false;
					this.TestCollectionViaRequiredTest.Add((TestEntity)entity);
					this.TestCollectionViaRequiredTest.IsReadOnly = true;
					break;
				case "TestCollectionViaResultArchiveUploadLog":
					this.TestCollectionViaResultArchiveUploadLog.IsReadOnly = false;
					this.TestCollectionViaResultArchiveUploadLog.Add((TestEntity)entity);
					this.TestCollectionViaResultArchiveUploadLog.IsReadOnly = true;
					break;
				case "TestCollectionViaCustomerEventTestFinding":
					this.TestCollectionViaCustomerEventTestFinding.IsReadOnly = false;
					this.TestCollectionViaCustomerEventTestFinding.Add((TestEntity)entity);
					this.TestCollectionViaCustomerEventTestFinding.IsReadOnly = true;
					break;
				case "CustomerCallAttempts":
					this.CustomerCallAttempts = (CustomerCallAttemptsEntity)entity;
					break;
				case "CustomerLockForCall":
					this.CustomerLockForCall = (CustomerLockForCallEntity)entity;
					break;
				case "CustomerResultPosted":
					this.CustomerResultPosted = (CustomerResultPostedEntity)entity;
					break;
				case "CustomerTrale":
					this.CustomerTrale = (CustomerTraleEntity)entity;
					break;
				case "OrganizationRoleUser":
					this.OrganizationRoleUser = (OrganizationRoleUserEntity)entity;
					break;
				default:
					break;
			}
		}
		
		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		public override RelationCollection GetRelationsForFieldOfType(string fieldName)
		{
			return CustomerProfileEntity.GetRelationsForField(fieldName);
		}

		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		public static RelationCollection GetRelationsForField(string fieldName)
		{
			RelationCollection toReturn = new RelationCollection();
			switch(fieldName)
			{
				case "ActivityType":
					toReturn.Add(CustomerProfileEntity.Relations.ActivityTypeEntityUsingActivityId);
					break;
				case "Address":
					toReturn.Add(CustomerProfileEntity.Relations.AddressEntityUsingBillingAddressId);
					break;
				case "Lab":
					toReturn.Add(CustomerProfileEntity.Relations.LabEntityUsingLabId);
					break;
				case "Language":
					toReturn.Add(CustomerProfileEntity.Relations.LanguageEntityUsingLanguageId);
					break;
				case "Lookup______":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingPreferredContactType);
					break;
				case "Lookup_____":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingPhoneOfficeConsentId);
					break;
				case "Lookup_______":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactReasonId);
					break;
				case "Lookup________":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingProductTypeId);
					break;
				case "Lookup____":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingPhoneHomeConsentId);
					break;
				case "Lookup_":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactUpdateSource);
					break;
				case "Lookup":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactTypeId);
					break;
				case "Lookup___":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingPhoneCellConsentId);
					break;
				case "Lookup__":
					toReturn.Add(CustomerProfileEntity.Relations.LookupEntityUsingMemberUploadSourceId);
					break;
				case "NotesDetails":
					toReturn.Add(CustomerProfileEntity.Relations.NotesDetailsEntityUsingDoNotContactReasonNotesId);
					break;
				case "Role":
					toReturn.Add(CustomerProfileEntity.Relations.RoleEntityUsingAddedByRoleId);
					break;
				case "CallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId);
					break;
				case "CallRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId);
					break;
				case "ChaseOutbound":
					toReturn.Add(CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId);
					break;
				case "ClickConversion":
					toReturn.Add(CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId);
					break;
				case "CurrentMedication":
					toReturn.Add(CustomerProfileEntity.Relations.CurrentMedicationEntityUsingCustomerId);
					break;
				case "CustomerAccountGlocomNumber":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerAccountGlocomNumberEntityUsingCustomerId);
					break;
				case "CustomerBillingAccount":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerBillingAccountEntityUsingCustomerId);
					break;
				case "CustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId);
					break;
				case "CustomerChaseCampaign":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseCampaignEntityUsingCustomerId);
					break;
				case "CustomerChaseChannel":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseChannelEntityUsingCustomerId);
					break;
				case "CustomerChaseProduct":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseProductEntityUsingCustomerId);
					break;
				case "CustomerClinicalQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId);
					break;
				case "CustomerEligibility":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEligibilityEntityUsingCustomerId);
					break;
				case "CustomerEventTestFinding":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEventTestFindingEntityUsingCustomerId);
					break;
				case "CustomerHealthInfo":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId);
					break;
				case "CustomerHealthInfoArchive":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId);
					break;
				case "CustomerIcdCode":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerIcdCodeEntityUsingCustomerId);
					break;
				case "CustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId);
					break;
				case "CustomerPredictedZip":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPredictedZipEntityUsingCustomerId);
					break;
				case "CustomerPrimaryCarePhysician":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId);
					break;
				case "CustomerProfileHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId);
					break;
				case "CustomerSurvey":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerSurveyEntityUsingCustomerId);
					break;
				case "CustomerTag":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTagEntityUsingCustomerId);
					break;
				case "CustomerTargeted":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTargetedEntityUsingCustomerId);
					break;
				case "CustomerUnsubscribedSmsNotification":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerUnsubscribedSmsNotificationEntityUsingCustomerId);
					break;
				case "CustomerWarmTransfer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerWarmTransferEntityUsingCustomerId);
					break;
				case "DependentDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId);
					break;
				case "DirectMail":
					toReturn.Add(CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId);
					break;
				case "DisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId);
					break;
				case "EventCustomerQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId);
					break;
				case "EventCustomerResult":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId);
					break;
				case "EventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId);
					break;
				case "EventPaymentDetails":
					toReturn.Add(CustomerProfileEntity.Relations.EventPaymentDetailsEntityUsingCustomerId);
					break;
				case "FillEventCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId);
					break;
				case "GuardianDetails":
					toReturn.Add(CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId);
					break;
				case "HospitalPartnerCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId);
					break;
				case "LanguageBarrierCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId);
					break;
				case "MailRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId);
					break;
				case "Medication":
					toReturn.Add(CustomerProfileEntity.Relations.MedicationEntityUsingCustomerId);
					break;
				case "MemberUploadLog":
					toReturn.Add(CustomerProfileEntity.Relations.MemberUploadLogEntityUsingCustomerId);
					break;
				case "NoShowCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId);
					break;
				case "PhysicianInvoiceItem":
					toReturn.Add(CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId);
					break;
				case "PreAssessmentCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId);
					break;
				case "PreQualificationResult":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId);
					break;
				case "ProspectCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId);
					break;
				case "Raps":
					toReturn.Add(CustomerProfileEntity.Relations.RapsEntityUsingCustomerId);
					break;
				case "Referral":
					toReturn.Add(CustomerProfileEntity.Relations.ReferralEntityUsingReferedCustomerId);
					break;
				case "RequiredTest":
					toReturn.Add(CustomerProfileEntity.Relations.RequiredTestEntityUsingCustomerId);
					break;
				case "ResultArchiveUploadLog":
					toReturn.Add(CustomerProfileEntity.Relations.ResultArchiveUploadLogEntityUsingCustomerId);
					break;
				case "SuspectCondition":
					toReturn.Add(CustomerProfileEntity.Relations.SuspectConditionEntityUsingCustomerId);
					break;
				case "TempCart":
					toReturn.Add(CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId);
					break;
				case "Testimonial":
					toReturn.Add(CustomerProfileEntity.Relations.TestimonialEntityUsingCustomerId);
					break;
				case "UncontactedCustomerCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId);
					break;
				case "AccountCollectionViaLanguageBarrierCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "LanguageBarrierCallQueue_", JoinHint.None);
					toReturn.Add(LanguageBarrierCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "LanguageBarrierCallQueue_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaUncontactedCustomerCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "UncontactedCustomerCallQueue_", JoinHint.None);
					toReturn.Add(UncontactedCustomerCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "UncontactedCustomerCallQueue_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaMailRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "MailRoundCallQueue_", JoinHint.None);
					toReturn.Add(MailRoundCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "MailRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaCallRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "CallRoundCallQueue_", JoinHint.None);
					toReturn.Add(CallRoundCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "CallRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaNoShowCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "NoShowCallQueue_", JoinHint.None);
					toReturn.Add(NoShowCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "NoShowCallQueue_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.AccountEntityUsingHealthPlanId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaFillEventCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "FillEventCallQueue_", JoinHint.None);
					toReturn.Add(FillEventCallQueueEntity.Relations.AccountEntityUsingHealthPlanId, "FillEventCallQueue_", string.Empty, JoinHint.None);
					break;
				case "ActivityTypeCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.ActivityTypeEntityUsingActivityId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "AddressCollectionViaCustomerPrimaryCarePhysician":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.AddressEntityUsingMailingAddressId, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "AddressCollectionViaCustomerPrimaryCarePhysician_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.AddressEntityUsingPcpaddress, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "AfaffiliateCampaignCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.AfaffiliateCampaignEntityUsingAffiliateCampaignId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "ProspectCustomer_", JoinHint.None);
					toReturn.Add(ProspectCustomerEntity.Relations.AfaffiliateCampaignMarketingMaterialEntityUsingAffiliateCampaignMarketingMaterialId, "ProspectCustomer_", string.Empty, JoinHint.None);
					break;
				case "BillingAccountCollectionViaCustomerBillingAccount":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerBillingAccountEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerBillingAccount_", JoinHint.None);
					toReturn.Add(CustomerBillingAccountEntity.Relations.BillingAccountEntityUsingBillingAccountId, "CustomerBillingAccount_", string.Empty, JoinHint.None);
					break;
				case "CallQueueCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CallQueueEntityUsingCallQueueId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CallQueueCriteriaCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CallQueueCriteriaEntityUsingCallQueueCriteriaId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(CustomerCallQueueCallAttemptEntity.Relations.CallQueueCustomerEntityUsingCallQueueCustomerId, "CustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "CallsCollectionViaPreQualificationResult":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.CallsEntityUsingCallId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "CallsCollectionViaCustomerAccountGlocomNumber":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerAccountGlocomNumberEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerAccountGlocomNumber_", JoinHint.None);
					toReturn.Add(CustomerAccountGlocomNumberEntity.Relations.CallsEntityUsingCallId, "CustomerAccountGlocomNumber_", string.Empty, JoinHint.None);
					break;
				case "CallsCollectionViaCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(CustomerCallQueueCallAttemptEntity.Relations.CallsEntityUsingCallId, "CustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "PreAssessmentCustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(PreAssessmentCustomerCallQueueCallAttemptEntity.Relations.CallsEntityUsingCallId, "PreAssessmentCustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "CallUploadCollectionViaDirectMail":
					toReturn.Add(CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId, "CustomerProfileEntity__", "DirectMail_", JoinHint.None);
					toReturn.Add(DirectMailEntity.Relations.CallUploadEntityUsingCallUploadId, "DirectMail_", string.Empty, JoinHint.None);
					break;
				case "CampaignCollectionViaDirectMail":
					toReturn.Add(CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId, "CustomerProfileEntity__", "DirectMail_", JoinHint.None);
					toReturn.Add(DirectMailEntity.Relations.CampaignEntityUsingCampaignId, "DirectMail_", string.Empty, JoinHint.None);
					break;
				case "CampaignCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CampaignEntityUsingCampaignId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CampaignCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CampaignEntityUsingCampaignId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "ChargeCardCollectionViaTempCart":
					toReturn.Add(CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId, "CustomerProfileEntity__", "TempCart_", JoinHint.None);
					toReturn.Add(TempCartEntity.Relations.ChargeCardEntityUsingChargeCardId, "TempCart_", string.Empty, JoinHint.None);
					break;
				case "ChaseCampaignCollectionViaCustomerChaseCampaign":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseCampaignEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseCampaign_", JoinHint.None);
					toReturn.Add(CustomerChaseCampaignEntity.Relations.ChaseCampaignEntityUsingChaseCampaignId, "CustomerChaseCampaign_", string.Empty, JoinHint.None);
					break;
				case "ChaseChannelLevelCollectionViaCustomerChaseChannel":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseChannelEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseChannel_", JoinHint.None);
					toReturn.Add(CustomerChaseChannelEntity.Relations.ChaseChannelLevelEntityUsingChaseChannelLevelId, "CustomerChaseChannel_", string.Empty, JoinHint.None);
					break;
				case "ChaseGroupCollectionViaChaseOutbound":
					toReturn.Add(CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId, "CustomerProfileEntity__", "ChaseOutbound_", JoinHint.None);
					toReturn.Add(ChaseOutboundEntity.Relations.ChaseGroupEntityUsingChaseGroupId, "ChaseOutbound_", string.Empty, JoinHint.None);
					break;
				case "ChaseOutboundCollectionViaCustomerChaseProduct":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseProductEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseProduct_", JoinHint.None);
					toReturn.Add(CustomerChaseProductEntity.Relations.ChaseOutboundEntityUsingChaseOutboundId, "CustomerChaseProduct_", string.Empty, JoinHint.None);
					break;
				case "ChaseOutboundCollectionViaCustomerChaseChannel":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseChannelEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseChannel_", JoinHint.None);
					toReturn.Add(CustomerChaseChannelEntity.Relations.ChaseOutboundEntityUsingChaseOutboundId, "CustomerChaseChannel_", string.Empty, JoinHint.None);
					break;
				case "ChaseOutboundCollectionViaCustomerChaseCampaign":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseCampaignEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseCampaign_", JoinHint.None);
					toReturn.Add(CustomerChaseCampaignEntity.Relations.ChaseOutboundEntityUsingChaseOutboundId, "CustomerChaseCampaign_", string.Empty, JoinHint.None);
					break;
				case "ChaseProductCollectionViaCustomerChaseProduct":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerChaseProductEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerChaseProduct_", JoinHint.None);
					toReturn.Add(CustomerChaseProductEntity.Relations.ChaseProductEntityUsingChaseProductId, "CustomerChaseProduct_", string.Empty, JoinHint.None);
					break;
				case "ClickLogCollectionViaClickConversion":
					toReturn.Add(CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId, "CustomerProfileEntity__", "ClickConversion_", JoinHint.None);
					toReturn.Add(ClickConversionEntity.Relations.ClickLogEntityUsingClickId, "ClickConversion_", string.Empty, JoinHint.None);
					break;
				case "CorporateUploadCollectionViaMemberUploadLog":
					toReturn.Add(CustomerProfileEntity.Relations.MemberUploadLogEntityUsingCustomerId, "CustomerProfileEntity__", "MemberUploadLog_", JoinHint.None);
					toReturn.Add(MemberUploadLogEntity.Relations.CorporateUploadEntityUsingCorporateUploadId, "MemberUploadLog_", string.Empty, JoinHint.None);
					break;
				case "CorporateUploadCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.CorporateUploadEntityUsingUploadId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.CustomerHealthQuestionsEntityUsingClinicalHealthQuestionId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerHealthInfo":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfo_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoEntity.Relations.CustomerHealthQuestionsEntityUsingCustomerHealthQuestionId, "CustomerHealthInfo_", string.Empty, JoinHint.None);
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfoArchive_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoArchiveEntity.Relations.CustomerHealthQuestionsEntityUsingCustomerHealthQuestionId, "CustomerHealthInfoArchive_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileHistoryCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CustomerProfileHistoryEntityUsingCustomerProfileHistoryId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CustomerRegistrationNotesCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CustomerRegistrationNotesEntityUsingLeftWithoutScreeningNotesId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerSurveyEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerSurvey_", JoinHint.None);
					toReturn.Add(CustomerSurveyEntity.Relations.CustomerSurveyQuestionAnswerEntityUsingCustomerSurveyQuestionAnswerId, "CustomerSurvey_", string.Empty, JoinHint.None);
					break;
				case "DirectMailTypeCollectionViaDirectMail":
					toReturn.Add(CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId, "CustomerProfileEntity__", "DirectMail_", JoinHint.None);
					toReturn.Add(DirectMailEntity.Relations.DirectMailTypeEntityUsingDirectMailTypeId, "DirectMail_", string.Empty, JoinHint.None);
					break;
				case "EligibilityCollectionViaTempCart":
					toReturn.Add(CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId, "CustomerProfileEntity__", "TempCart_", JoinHint.None);
					toReturn.Add(TempCartEntity.Relations.EligibilityEntityUsingEligibilityId, "TempCart_", string.Empty, JoinHint.None);
					break;
				case "EventAppointmentCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.EventAppointmentEntityUsingAppointmentId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCustomerHealthInfoArchive":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfoArchive_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoArchiveEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CustomerHealthInfoArchive_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaDependentDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.EventCustomersEntityUsingEventCustomerId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.EventCustomersEntityUsingEventCustomerId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaClickConversion":
					toReturn.Add(CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId, "CustomerProfileEntity__", "ClickConversion_", JoinHint.None);
					toReturn.Add(ClickConversionEntity.Relations.EventCustomersEntityUsingEventCustomerId, "ClickConversion_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCustomerHealthInfo":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfo_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CustomerHealthInfo_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.EventCustomersEntityUsingEventCustomerId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "EventPackageDetailsCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventPackageDetailsEntityUsingEventPackageId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "EventPackageDetailsCollectionViaEventPaymentDetails":
					toReturn.Add(CustomerProfileEntity.Relations.EventPaymentDetailsEntityUsingCustomerId, "CustomerProfileEntity__", "EventPaymentDetails_", JoinHint.None);
					toReturn.Add(EventPaymentDetailsEntity.Relations.EventPackageDetailsEntityUsingEventPackageId, "EventPaymentDetails_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.EventsEntityUsingEventId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaEventCustomerResult":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.EventsEntityUsingEventId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.EventsEntityUsingEventId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaPhysicianInvoiceItem":
					toReturn.Add(CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId, "CustomerProfileEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.EventsEntityUsingEventId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.EventsEntityUsingEventId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaPreQualificationResult":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.EventsEntityUsingEventId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaDependentDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.EventsEntityUsingEventId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaHospitalPartnerCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.EventsEntityUsingEventId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.EventsEntityUsingEventId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaCustomerEventTestFinding":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEventTestFindingEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerEventTestFinding_", JoinHint.None);
					toReturn.Add(CustomerEventTestFindingEntity.Relations.EventsEntityUsingEventId, "CustomerEventTestFinding_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventsEntityUsingEventId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "EventsCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.EventsEntityUsingEventId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "EventTestCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventTestEntityUsingEventTestId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "FileCollectionViaTestimonial":
					toReturn.Add(CustomerProfileEntity.Relations.TestimonialEntityUsingCustomerId, "CustomerProfileEntity__", "Testimonial_", JoinHint.None);
					toReturn.Add(TestimonialEntity.Relations.FileEntityUsingFileId, "Testimonial_", string.Empty, JoinHint.None);
					break;
				case "GcNotGivenReasonCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.GcNotGivenReasonEntityUsingGcNotGivenReasonId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "HafTemplateCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.HafTemplateEntityUsingClinicalQuestionTemplateId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "HospitalFacilityCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.HospitalFacilityEntityUsingHospitalFacilityId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "IcdCodesCollectionViaCustomerIcdCode":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerIcdCodeEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerIcdCode_", JoinHint.None);
					toReturn.Add(CustomerIcdCodeEntity.Relations.IcdCodesEntityUsingIcdCodeId, "CustomerIcdCode_", string.Empty, JoinHint.None);
					break;
				case "LanguageCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.LanguageEntityUsingLanguageId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCallRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "CallRoundCallQueue_", JoinHint.None);
					toReturn.Add(CallRoundCallQueueEntity.Relations.LookupEntityUsingStatus, "CallRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult______":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHighCholestrol, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaNoShowCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "NoShowCallQueue_", JoinHint.None);
					toReturn.Add(NoShowCallQueueEntity.Relations.LookupEntityUsingStatus, "NoShowCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingAgeOverPreQualificationQuestion, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_______":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingOverWeight, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomerResult":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.LookupEntityUsingResultSummary, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaMailRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "MailRoundCallQueue_", JoinHint.None);
					toReturn.Add(MailRoundCallQueueEntity.Relations.LookupEntityUsingStatus, "MailRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult__":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingDiabetic, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaChaseOutbound":
					toReturn.Add(CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId, "CustomerProfileEntity__", "ChaseOutbound_", JoinHint.None);
					toReturn.Add(ChaseOutboundEntity.Relations.LookupEntityUsingConfidenceScoreId, "ChaseOutbound_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaLanguageBarrierCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "LanguageBarrierCallQueue_", JoinHint.None);
					toReturn.Add(LanguageBarrierCallQueueEntity.Relations.LookupEntityUsingStatus, "LanguageBarrierCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_____":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHighBloodPressure, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult____":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHeartDisease, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult___":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingDiagnosedHeartProblem, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerProfileHistory__":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerProfileHistory_", JoinHint.None);
					toReturn.Add(CustomerProfileHistoryEntity.Relations.LookupEntityUsingPreferredContactType, "CustomerProfileHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerProfileHistory___":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerProfileHistory_", JoinHint.None);
					toReturn.Add(CustomerProfileHistoryEntity.Relations.LookupEntityUsingProductTypeId, "CustomerProfileHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerOrderHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.LookupEntityUsingOrderItemStatusId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerProfileHistory_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerProfileHistory_", JoinHint.None);
					toReturn.Add(CustomerProfileHistoryEntity.Relations.LookupEntityUsingMemberUploadSourceId, "CustomerProfileHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaUncontactedCustomerCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "UncontactedCustomerCallQueue_", JoinHint.None);
					toReturn.Add(UncontactedCustomerCallQueueEntity.Relations.LookupEntityUsingStatus, "UncontactedCustomerCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerPrimaryCarePhysician":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.LookupEntityUsingSource, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerProfileHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerProfileHistory_", JoinHint.None);
					toReturn.Add(CustomerProfileHistoryEntity.Relations.LookupEntityUsingDoNotContactUpdateSource, "CustomerProfileHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.LookupEntityUsingDoNotContactUpdateSource, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.LookupEntityUsingLeftWithoutScreeningReasonId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingChestPain, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult________":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingSmoker, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerUnsubscribedSmsNotification":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerUnsubscribedSmsNotificationEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerUnsubscribedSmsNotification_", JoinHint.None);
					toReturn.Add(CustomerUnsubscribedSmsNotificationEntity.Relations.LookupEntityUsingStatusId, "CustomerUnsubscribedSmsNotification_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaFillEventCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "FillEventCallQueue_", JoinHint.None);
					toReturn.Add(FillEventCallQueueEntity.Relations.LookupEntityUsingStatus, "FillEventCallQueue_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomers_":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.LookupEntityUsingPreferredContactType, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaProspectCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "ProspectCustomer_", JoinHint.None);
					toReturn.Add(ProspectCustomerEntity.Relations.LookupEntityUsingSource, "ProspectCustomer_", string.Empty, JoinHint.None);
					break;
				case "NdcCollectionViaCurrentMedication":
					toReturn.Add(CustomerProfileEntity.Relations.CurrentMedicationEntityUsingCustomerId, "CustomerProfileEntity__", "CurrentMedication_", JoinHint.None);
					toReturn.Add(CurrentMedicationEntity.Relations.NdcEntityUsingNdcId, "CurrentMedication_", string.Empty, JoinHint.None);
					break;
				case "NotesDetailsCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.NotesDetailsEntityUsingNotesId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaGuardianDetails_":
					toReturn.Add(CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId, "CustomerProfileEntity__", "GuardianDetails_", JoinHint.None);
					toReturn.Add(GuardianDetailsEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "GuardianDetails_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaGuardianDetails":
					toReturn.Add(CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId, "CustomerProfileEntity__", "GuardianDetails_", JoinHint.None);
					toReturn.Add(GuardianDetailsEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "GuardianDetails_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "UncontactedCustomerCallQueue_", JoinHint.None);
					toReturn.Add(UncontactedCustomerCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "UncontactedCustomerCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer_":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingAssignedToOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaReferral":
					toReturn.Add(CustomerProfileEntity.Relations.ReferralEntityUsingReferedCustomerId, "CustomerProfileEntity__", "Referral_", JoinHint.None);
					toReturn.Add(ReferralEntity.Relations.OrganizationRoleUserEntityUsingReferedByOrgRoleUserId, "Referral_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaFillEventCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "FillEventCallQueue_", JoinHint.None);
					toReturn.Add(FillEventCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "FillEventCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaRequiredTest":
					toReturn.Add(CustomerProfileEntity.Relations.RequiredTestEntityUsingCustomerId, "CustomerProfileEntity__", "RequiredTest_", JoinHint.None);
					toReturn.Add(RequiredTestEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "RequiredTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaProspectCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "ProspectCustomer_", JoinHint.None);
					toReturn.Add(ProspectCustomerEntity.Relations.OrganizationRoleUserEntityUsingContactedBy, "ProspectCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaMailRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "MailRoundCallQueue_", JoinHint.None);
					toReturn.Add(MailRoundCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "MailRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaNoShowCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "NoShowCallQueue_", JoinHint.None);
					toReturn.Add(NoShowCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "NoShowCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaMedication":
					toReturn.Add(CustomerProfileEntity.Relations.MedicationEntityUsingCustomerId, "CustomerProfileEntity__", "Medication_", JoinHint.None);
					toReturn.Add(MedicationEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "Medication_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallRoundCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "CallRoundCallQueue_", JoinHint.None);
					toReturn.Add(CallRoundCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CallRoundCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaMedication_":
					toReturn.Add(CustomerProfileEntity.Relations.MedicationEntityUsingCustomerId, "CustomerProfileEntity__", "Medication_", JoinHint.None);
					toReturn.Add(MedicationEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "Medication_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer__":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_":
					toReturn.Add(CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingCareCoordinatorOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__":
					toReturn.Add(CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaLanguageBarrierCallQueue":
					toReturn.Add(CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId, "CustomerProfileEntity__", "LanguageBarrierCallQueue_", JoinHint.None);
					toReturn.Add(LanguageBarrierCallQueueEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "LanguageBarrierCallQueue_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "PreAssessmentCustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(PreAssessmentCustomerCallQueueCallAttemptEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "PreAssessmentCustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerHealthInfo":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfo_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerHealthInfo_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerHealthInfoArchive":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerHealthInfoArchive_", JoinHint.None);
					toReturn.Add(CustomerHealthInfoArchiveEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerHealthInfoArchive_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaDirectMail":
					toReturn.Add(CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId, "CustomerProfileEntity__", "DirectMail_", JoinHint.None);
					toReturn.Add(DirectMailEntity.Relations.OrganizationRoleUserEntityUsingMailedBy, "DirectMail_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest_":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.OrganizationRoleUserEntityUsingUpdatedBy, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingUpdatedBy, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.OrganizationRoleUserEntityUsingUpdatedByOrganizationRoleUserId, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerEligibility_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEligibilityEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerEligibility_", JoinHint.None);
					toReturn.Add(CustomerEligibilityEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CustomerEligibility_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerIcdCode":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerIcdCodeEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerIcdCode_", JoinHint.None);
					toReturn.Add(CustomerIcdCodeEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerIcdCode_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerProfileHistory":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerProfileHistory_", JoinHint.None);
					toReturn.Add(CustomerProfileHistoryEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerProfileHistory_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerTag":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTagEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerTag_", JoinHint.None);
					toReturn.Add(CustomerTagEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerTag_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.OrganizationRoleUserEntityUsingPcpAddressVerifiedBy, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerTag_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTagEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerTag_", JoinHint.None);
					toReturn.Add(CustomerTagEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "CustomerTag_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerWarmTransfer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerWarmTransferEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerWarmTransfer_", JoinHint.None);
					toReturn.Add(CustomerWarmTransferEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerWarmTransfer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerWarmTransfer_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerWarmTransferEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerWarmTransfer_", JoinHint.None);
					toReturn.Add(CustomerWarmTransferEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CustomerWarmTransfer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerTargeted":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTargetedEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerTargeted_", JoinHint.None);
					toReturn.Add(CustomerTargetedEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerTargeted_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerTargeted_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTargetedEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerTargeted_", JoinHint.None);
					toReturn.Add(CustomerTargetedEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CustomerTargeted_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerEligibility":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEligibilityEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerEligibility_", JoinHint.None);
					toReturn.Add(CustomerEligibilityEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerEligibility_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult___":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingRegeneratedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers_":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.OrganizationRoleUserEntityUsingConfirmedBy, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult__":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingInvoiceDateUpdatedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult____":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingSignedOffBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult______":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_____":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingVerifiedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(CustomerCallQueueCallAttemptEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCurrentMedication":
					toReturn.Add(CustomerProfileEntity.Relations.CurrentMedicationEntityUsingCustomerId, "CustomerProfileEntity__", "CurrentMedication_", JoinHint.None);
					toReturn.Add(CurrentMedicationEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CurrentMedication_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_______":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingChatPdfReviewedByOverreadPhysicianId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingCodedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult________":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingChatPdfReviewedByPhysicianId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "PhysicianEvaluationCollectionViaPhysicianInvoiceItem":
					toReturn.Add(CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId, "CustomerProfileEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.PhysicianEvaluationEntityUsingPhysicianEvaluationId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "PhysicianInvoiceCollectionViaPhysicianInvoiceItem":
					toReturn.Add(CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId, "CustomerProfileEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.PhysicianInvoiceEntityUsingPhysicianInvoiceId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "PhysicianMasterCollectionViaCustomerPrimaryCarePhysician":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerPrimaryCarePhysician_", JoinHint.None);
					toReturn.Add(CustomerPrimaryCarePhysicianEntity.Relations.PhysicianMasterEntityUsingPhysicianMasterId, "CustomerPrimaryCarePhysician_", string.Empty, JoinHint.None);
					break;
				case "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId, "CustomerProfileEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.PreQualificationQuestionEntityUsingQuestionId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "PreQualificationQuestionCollectionViaDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.PreQualificationQuestionEntityUsingQuestionId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "ProspectCustomerCollectionViaClickConversion":
					toReturn.Add(CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId, "CustomerProfileEntity__", "ClickConversion_", JoinHint.None);
					toReturn.Add(ClickConversionEntity.Relations.ProspectCustomerEntityUsingProspectCustomerId, "ClickConversion_", string.Empty, JoinHint.None);
					break;
				case "ProspectCustomerCollectionViaTempCart":
					toReturn.Add(CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId, "CustomerProfileEntity__", "TempCart_", JoinHint.None);
					toReturn.Add(TempCartEntity.Relations.ProspectCustomerEntityUsingProspectCustomerId, "TempCart_", string.Empty, JoinHint.None);
					break;
				case "ProspectCustomerCollectionViaCallQueueCustomer":
					toReturn.Add(CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId, "CustomerProfileEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.ProspectCustomerEntityUsingProspectCustomerId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "RapsUploadCollectionViaRaps":
					toReturn.Add(CustomerProfileEntity.Relations.RapsEntityUsingCustomerId, "CustomerProfileEntity__", "Raps_", JoinHint.None);
					toReturn.Add(RapsEntity.Relations.RapsUploadEntityUsingRapsUploadId, "Raps_", string.Empty, JoinHint.None);
					break;
				case "RelationshipCollectionViaChaseOutbound":
					toReturn.Add(CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId, "CustomerProfileEntity__", "ChaseOutbound_", JoinHint.None);
					toReturn.Add(ChaseOutboundEntity.Relations.RelationshipEntityUsingRelationshipId, "ChaseOutbound_", string.Empty, JoinHint.None);
					break;
				case "RelationshipCollectionViaGuardianDetails":
					toReturn.Add(CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId, "CustomerProfileEntity__", "GuardianDetails_", JoinHint.None);
					toReturn.Add(GuardianDetailsEntity.Relations.RelationshipEntityUsingRelationshipId, "GuardianDetails_", string.Empty, JoinHint.None);
					break;
				case "ResultArchiveUploadCollectionViaResultArchiveUploadLog":
					toReturn.Add(CustomerProfileEntity.Relations.ResultArchiveUploadLogEntityUsingCustomerId, "CustomerProfileEntity__", "ResultArchiveUploadLog_", JoinHint.None);
					toReturn.Add(ResultArchiveUploadLogEntity.Relations.ResultArchiveUploadEntityUsingResultArchiveUploadId, "ResultArchiveUploadLog_", string.Empty, JoinHint.None);
					break;
				case "SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerUnsubscribedSmsNotificationEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerUnsubscribedSmsNotification_", JoinHint.None);
					toReturn.Add(CustomerUnsubscribedSmsNotificationEntity.Relations.SmsReceivedEntityUsingSmsReceivedId, "CustomerUnsubscribedSmsNotification_", string.Empty, JoinHint.None);
					break;
				case "SuspectConditionUploadCollectionViaSuspectCondition":
					toReturn.Add(CustomerProfileEntity.Relations.SuspectConditionEntityUsingCustomerId, "CustomerProfileEntity__", "SuspectCondition_", JoinHint.None);
					toReturn.Add(SuspectConditionEntity.Relations.SuspectConditionUploadEntityUsingSuspectConditionUploadId, "SuspectCondition_", string.Empty, JoinHint.None);
					break;
				case "TagCollectionViaCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(CustomerCallQueueCallAttemptEntity.Relations.TagEntityUsingNotInterestedReasonId, "CustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt":
					toReturn.Add(CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId, "CustomerProfileEntity__", "PreAssessmentCustomerCallQueueCallAttempt_", JoinHint.None);
					toReturn.Add(PreAssessmentCustomerCallQueueCallAttemptEntity.Relations.TagEntityUsingNotInterestedReasonId, "PreAssessmentCustomerCallQueueCallAttempt_", string.Empty, JoinHint.None);
					break;
				case "TempCartCollectionViaPreQualificationResult":
					toReturn.Add(CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId, "CustomerProfileEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.TempCartEntityUsingTempCartId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaDependentDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.TestEntityUsingTestId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaDisqualifiedTest":
					toReturn.Add(CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId, "CustomerProfileEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.TestEntityUsingTestId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaRequiredTest":
					toReturn.Add(CustomerProfileEntity.Relations.RequiredTestEntityUsingCustomerId, "CustomerProfileEntity__", "RequiredTest_", JoinHint.None);
					toReturn.Add(RequiredTestEntity.Relations.TestEntityUsingTestId, "RequiredTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaResultArchiveUploadLog":
					toReturn.Add(CustomerProfileEntity.Relations.ResultArchiveUploadLogEntityUsingCustomerId, "CustomerProfileEntity__", "ResultArchiveUploadLog_", JoinHint.None);
					toReturn.Add(ResultArchiveUploadLogEntity.Relations.TestEntityUsingTestId, "ResultArchiveUploadLog_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaCustomerEventTestFinding":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerEventTestFindingEntityUsingCustomerId, "CustomerProfileEntity__", "CustomerEventTestFinding_", JoinHint.None);
					toReturn.Add(CustomerEventTestFindingEntity.Relations.TestEntityUsingTestId, "CustomerEventTestFinding_", string.Empty, JoinHint.None);
					break;
				case "CustomerCallAttempts":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerCallAttemptsEntityUsingCustomerId);
					break;
				case "CustomerLockForCall":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerLockForCallEntityUsingCustomerId);
					break;
				case "CustomerResultPosted":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerResultPostedEntityUsingCustomerId);
					break;
				case "CustomerTrale":
					toReturn.Add(CustomerProfileEntity.Relations.CustomerTraleEntityUsingCustomerId);
					break;
				case "OrganizationRoleUser":
					toReturn.Add(CustomerProfileEntity.Relations.OrganizationRoleUserEntityUsingCustomerId);
					break;
				default:

					break;				
			}
			return toReturn;
		}
#if !CF
		/// <summary>Checks if the relation mapped by the property with the name specified is a one way / single sided relation. If the passed in name is null, it
		/// will return true if the entity has any single-sided relation</summary>
		/// <param name="propertyName">Name of the property which is mapped onto the relation to check, or null to check if the entity has any relation/ which is single sided</param>
		/// <returns>true if the relation is single sided / one way (so the opposite relation isn't present), false otherwise</returns>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override bool CheckOneWayRelations(string propertyName)
		{
			// use template trick to calculate the # of single-sided / oneway relations
			int numberOfOneWayRelations = 0;
			switch(propertyName)
			{
				case null:
					return ((numberOfOneWayRelations > 0) || base.CheckOneWayRelations(null));




















				default:
					return base.CheckOneWayRelations(propertyName);
			}
		}
#endif
		/// <summary> Sets the internal parameter related to the fieldname passed to the instance relatedEntity. </summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void SetRelatedEntity(IEntity2 relatedEntity, string fieldName)
		{
			switch(fieldName)
			{
				case "ActivityType":
					SetupSyncActivityType(relatedEntity);
					break;
				case "Address":
					SetupSyncAddress(relatedEntity);
					break;
				case "Lab":
					SetupSyncLab(relatedEntity);
					break;
				case "Language":
					SetupSyncLanguage(relatedEntity);
					break;
				case "Lookup______":
					SetupSyncLookup______(relatedEntity);
					break;
				case "Lookup_____":
					SetupSyncLookup_____(relatedEntity);
					break;
				case "Lookup_______":
					SetupSyncLookup_______(relatedEntity);
					break;
				case "Lookup________":
					SetupSyncLookup________(relatedEntity);
					break;
				case "Lookup____":
					SetupSyncLookup____(relatedEntity);
					break;
				case "Lookup_":
					SetupSyncLookup_(relatedEntity);
					break;
				case "Lookup":
					SetupSyncLookup(relatedEntity);
					break;
				case "Lookup___":
					SetupSyncLookup___(relatedEntity);
					break;
				case "Lookup__":
					SetupSyncLookup__(relatedEntity);
					break;
				case "NotesDetails":
					SetupSyncNotesDetails(relatedEntity);
					break;
				case "Role":
					SetupSyncRole(relatedEntity);
					break;
				case "CallQueueCustomer":
					this.CallQueueCustomer.Add((CallQueueCustomerEntity)relatedEntity);
					break;
				case "CallRoundCallQueue":
					this.CallRoundCallQueue.Add((CallRoundCallQueueEntity)relatedEntity);
					break;
				case "ChaseOutbound":
					this.ChaseOutbound.Add((ChaseOutboundEntity)relatedEntity);
					break;
				case "ClickConversion":
					this.ClickConversion.Add((ClickConversionEntity)relatedEntity);
					break;
				case "CurrentMedication":
					this.CurrentMedication.Add((CurrentMedicationEntity)relatedEntity);
					break;
				case "CustomerAccountGlocomNumber":
					this.CustomerAccountGlocomNumber.Add((CustomerAccountGlocomNumberEntity)relatedEntity);
					break;
				case "CustomerBillingAccount":
					this.CustomerBillingAccount.Add((CustomerBillingAccountEntity)relatedEntity);
					break;
				case "CustomerCallQueueCallAttempt":
					this.CustomerCallQueueCallAttempt.Add((CustomerCallQueueCallAttemptEntity)relatedEntity);
					break;
				case "CustomerChaseCampaign":
					this.CustomerChaseCampaign.Add((CustomerChaseCampaignEntity)relatedEntity);
					break;
				case "CustomerChaseChannel":
					this.CustomerChaseChannel.Add((CustomerChaseChannelEntity)relatedEntity);
					break;
				case "CustomerChaseProduct":
					this.CustomerChaseProduct.Add((CustomerChaseProductEntity)relatedEntity);
					break;
				case "CustomerClinicalQuestionAnswer":
					this.CustomerClinicalQuestionAnswer.Add((CustomerClinicalQuestionAnswerEntity)relatedEntity);
					break;
				case "CustomerEligibility":
					this.CustomerEligibility.Add((CustomerEligibilityEntity)relatedEntity);
					break;
				case "CustomerEventTestFinding":
					this.CustomerEventTestFinding.Add((CustomerEventTestFindingEntity)relatedEntity);
					break;
				case "CustomerHealthInfo":
					this.CustomerHealthInfo.Add((CustomerHealthInfoEntity)relatedEntity);
					break;
				case "CustomerHealthInfoArchive":
					this.CustomerHealthInfoArchive.Add((CustomerHealthInfoArchiveEntity)relatedEntity);
					break;
				case "CustomerIcdCode":
					this.CustomerIcdCode.Add((CustomerIcdCodeEntity)relatedEntity);
					break;
				case "CustomerOrderHistory":
					this.CustomerOrderHistory.Add((CustomerOrderHistoryEntity)relatedEntity);
					break;
				case "CustomerPredictedZip":
					this.CustomerPredictedZip.Add((CustomerPredictedZipEntity)relatedEntity);
					break;
				case "CustomerPrimaryCarePhysician":
					this.CustomerPrimaryCarePhysician.Add((CustomerPrimaryCarePhysicianEntity)relatedEntity);
					break;
				case "CustomerProfileHistory":
					this.CustomerProfileHistory.Add((CustomerProfileHistoryEntity)relatedEntity);
					break;
				case "CustomerSurvey":
					this.CustomerSurvey.Add((CustomerSurveyEntity)relatedEntity);
					break;
				case "CustomerTag":
					this.CustomerTag.Add((CustomerTagEntity)relatedEntity);
					break;
				case "CustomerTargeted":
					this.CustomerTargeted.Add((CustomerTargetedEntity)relatedEntity);
					break;
				case "CustomerUnsubscribedSmsNotification":
					this.CustomerUnsubscribedSmsNotification.Add((CustomerUnsubscribedSmsNotificationEntity)relatedEntity);
					break;
				case "CustomerWarmTransfer":
					this.CustomerWarmTransfer.Add((CustomerWarmTransferEntity)relatedEntity);
					break;
				case "DependentDisqualifiedTest":
					this.DependentDisqualifiedTest.Add((DependentDisqualifiedTestEntity)relatedEntity);
					break;
				case "DirectMail":
					this.DirectMail.Add((DirectMailEntity)relatedEntity);
					break;
				case "DisqualifiedTest":
					this.DisqualifiedTest.Add((DisqualifiedTestEntity)relatedEntity);
					break;
				case "EventCustomerQuestionAnswer":
					this.EventCustomerQuestionAnswer.Add((EventCustomerQuestionAnswerEntity)relatedEntity);
					break;
				case "EventCustomerResult":
					this.EventCustomerResult.Add((EventCustomerResultEntity)relatedEntity);
					break;
				case "EventCustomers":
					this.EventCustomers.Add((EventCustomersEntity)relatedEntity);
					break;
				case "EventPaymentDetails":
					this.EventPaymentDetails.Add((EventPaymentDetailsEntity)relatedEntity);
					break;
				case "FillEventCallQueue":
					this.FillEventCallQueue.Add((FillEventCallQueueEntity)relatedEntity);
					break;
				case "GuardianDetails":
					this.GuardianDetails.Add((GuardianDetailsEntity)relatedEntity);
					break;
				case "HospitalPartnerCustomer":
					this.HospitalPartnerCustomer.Add((HospitalPartnerCustomerEntity)relatedEntity);
					break;
				case "LanguageBarrierCallQueue":
					this.LanguageBarrierCallQueue.Add((LanguageBarrierCallQueueEntity)relatedEntity);
					break;
				case "MailRoundCallQueue":
					this.MailRoundCallQueue.Add((MailRoundCallQueueEntity)relatedEntity);
					break;
				case "Medication":
					this.Medication.Add((MedicationEntity)relatedEntity);
					break;
				case "MemberUploadLog":
					this.MemberUploadLog.Add((MemberUploadLogEntity)relatedEntity);
					break;
				case "NoShowCallQueue":
					this.NoShowCallQueue.Add((NoShowCallQueueEntity)relatedEntity);
					break;
				case "PhysicianInvoiceItem":
					this.PhysicianInvoiceItem.Add((PhysicianInvoiceItemEntity)relatedEntity);
					break;
				case "PreAssessmentCustomerCallQueueCallAttempt":
					this.PreAssessmentCustomerCallQueueCallAttempt.Add((PreAssessmentCustomerCallQueueCallAttemptEntity)relatedEntity);
					break;
				case "PreQualificationResult":
					this.PreQualificationResult.Add((PreQualificationResultEntity)relatedEntity);
					break;
				case "ProspectCustomer":
					this.ProspectCustomer.Add((ProspectCustomerEntity)relatedEntity);
					break;
				case "Raps":
					this.Raps.Add((RapsEntity)relatedEntity);
					break;
				case "Referral":
					this.Referral.Add((ReferralEntity)relatedEntity);
					break;
				case "RequiredTest":
					this.RequiredTest.Add((RequiredTestEntity)relatedEntity);
					break;
				case "ResultArchiveUploadLog":
					this.ResultArchiveUploadLog.Add((ResultArchiveUploadLogEntity)relatedEntity);
					break;
				case "SuspectCondition":
					this.SuspectCondition.Add((SuspectConditionEntity)relatedEntity);
					break;
				case "TempCart":
					this.TempCart.Add((TempCartEntity)relatedEntity);
					break;
				case "Testimonial":
					this.Testimonial.Add((TestimonialEntity)relatedEntity);
					break;
				case "UncontactedCustomerCallQueue":
					this.UncontactedCustomerCallQueue.Add((UncontactedCustomerCallQueueEntity)relatedEntity);
					break;
				case "CustomerCallAttempts":
					SetupSyncCustomerCallAttempts(relatedEntity);
					break;
				case "CustomerLockForCall":
					SetupSyncCustomerLockForCall(relatedEntity);
					break;
				case "CustomerResultPosted":
					SetupSyncCustomerResultPosted(relatedEntity);
					break;
				case "CustomerTrale":
					SetupSyncCustomerTrale(relatedEntity);
					break;
				case "OrganizationRoleUser":
					SetupSyncOrganizationRoleUser(relatedEntity);
					break;
				default:
					break;
			}
		}

		/// <summary> Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() </summary>
		/// <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		/// <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void UnsetRelatedEntity(IEntity2 relatedEntity, string fieldName, bool signalRelatedEntityManyToOne)
		{
			switch(fieldName)
			{
				case "ActivityType":
					DesetupSyncActivityType(false, true);
					break;
				case "Address":
					DesetupSyncAddress(false, true);
					break;
				case "Lab":
					DesetupSyncLab(false, true);
					break;
				case "Language":
					DesetupSyncLanguage(false, true);
					break;
				case "Lookup______":
					DesetupSyncLookup______(false, true);
					break;
				case "Lookup_____":
					DesetupSyncLookup_____(false, true);
					break;
				case "Lookup_______":
					DesetupSyncLookup_______(false, true);
					break;
				case "Lookup________":
					DesetupSyncLookup________(false, true);
					break;
				case "Lookup____":
					DesetupSyncLookup____(false, true);
					break;
				case "Lookup_":
					DesetupSyncLookup_(false, true);
					break;
				case "Lookup":
					DesetupSyncLookup(false, true);
					break;
				case "Lookup___":
					DesetupSyncLookup___(false, true);
					break;
				case "Lookup__":
					DesetupSyncLookup__(false, true);
					break;
				case "NotesDetails":
					DesetupSyncNotesDetails(false, true);
					break;
				case "Role":
					DesetupSyncRole(false, true);
					break;
				case "CallQueueCustomer":
					base.PerformRelatedEntityRemoval(this.CallQueueCustomer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CallRoundCallQueue":
					base.PerformRelatedEntityRemoval(this.CallRoundCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "ChaseOutbound":
					base.PerformRelatedEntityRemoval(this.ChaseOutbound, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "ClickConversion":
					base.PerformRelatedEntityRemoval(this.ClickConversion, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CurrentMedication":
					base.PerformRelatedEntityRemoval(this.CurrentMedication, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerAccountGlocomNumber":
					base.PerformRelatedEntityRemoval(this.CustomerAccountGlocomNumber, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerBillingAccount":
					base.PerformRelatedEntityRemoval(this.CustomerBillingAccount, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerCallQueueCallAttempt":
					base.PerformRelatedEntityRemoval(this.CustomerCallQueueCallAttempt, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerChaseCampaign":
					base.PerformRelatedEntityRemoval(this.CustomerChaseCampaign, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerChaseChannel":
					base.PerformRelatedEntityRemoval(this.CustomerChaseChannel, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerChaseProduct":
					base.PerformRelatedEntityRemoval(this.CustomerChaseProduct, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerClinicalQuestionAnswer":
					base.PerformRelatedEntityRemoval(this.CustomerClinicalQuestionAnswer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerEligibility":
					base.PerformRelatedEntityRemoval(this.CustomerEligibility, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerEventTestFinding":
					base.PerformRelatedEntityRemoval(this.CustomerEventTestFinding, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerHealthInfo":
					base.PerformRelatedEntityRemoval(this.CustomerHealthInfo, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerHealthInfoArchive":
					base.PerformRelatedEntityRemoval(this.CustomerHealthInfoArchive, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerIcdCode":
					base.PerformRelatedEntityRemoval(this.CustomerIcdCode, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerOrderHistory":
					base.PerformRelatedEntityRemoval(this.CustomerOrderHistory, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerPredictedZip":
					base.PerformRelatedEntityRemoval(this.CustomerPredictedZip, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerPrimaryCarePhysician":
					base.PerformRelatedEntityRemoval(this.CustomerPrimaryCarePhysician, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerProfileHistory":
					base.PerformRelatedEntityRemoval(this.CustomerProfileHistory, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerSurvey":
					base.PerformRelatedEntityRemoval(this.CustomerSurvey, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerTag":
					base.PerformRelatedEntityRemoval(this.CustomerTag, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerTargeted":
					base.PerformRelatedEntityRemoval(this.CustomerTargeted, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerUnsubscribedSmsNotification":
					base.PerformRelatedEntityRemoval(this.CustomerUnsubscribedSmsNotification, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerWarmTransfer":
					base.PerformRelatedEntityRemoval(this.CustomerWarmTransfer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "DependentDisqualifiedTest":
					base.PerformRelatedEntityRemoval(this.DependentDisqualifiedTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "DirectMail":
					base.PerformRelatedEntityRemoval(this.DirectMail, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "DisqualifiedTest":
					base.PerformRelatedEntityRemoval(this.DisqualifiedTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomerQuestionAnswer":
					base.PerformRelatedEntityRemoval(this.EventCustomerQuestionAnswer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomerResult":
					base.PerformRelatedEntityRemoval(this.EventCustomerResult, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomers":
					base.PerformRelatedEntityRemoval(this.EventCustomers, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventPaymentDetails":
					base.PerformRelatedEntityRemoval(this.EventPaymentDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "FillEventCallQueue":
					base.PerformRelatedEntityRemoval(this.FillEventCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "GuardianDetails":
					base.PerformRelatedEntityRemoval(this.GuardianDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HospitalPartnerCustomer":
					base.PerformRelatedEntityRemoval(this.HospitalPartnerCustomer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "LanguageBarrierCallQueue":
					base.PerformRelatedEntityRemoval(this.LanguageBarrierCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "MailRoundCallQueue":
					base.PerformRelatedEntityRemoval(this.MailRoundCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "Medication":
					base.PerformRelatedEntityRemoval(this.Medication, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "MemberUploadLog":
					base.PerformRelatedEntityRemoval(this.MemberUploadLog, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "NoShowCallQueue":
					base.PerformRelatedEntityRemoval(this.NoShowCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PhysicianInvoiceItem":
					base.PerformRelatedEntityRemoval(this.PhysicianInvoiceItem, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PreAssessmentCustomerCallQueueCallAttempt":
					base.PerformRelatedEntityRemoval(this.PreAssessmentCustomerCallQueueCallAttempt, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PreQualificationResult":
					base.PerformRelatedEntityRemoval(this.PreQualificationResult, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "ProspectCustomer":
					base.PerformRelatedEntityRemoval(this.ProspectCustomer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "Raps":
					base.PerformRelatedEntityRemoval(this.Raps, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "Referral":
					base.PerformRelatedEntityRemoval(this.Referral, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "RequiredTest":
					base.PerformRelatedEntityRemoval(this.RequiredTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "ResultArchiveUploadLog":
					base.PerformRelatedEntityRemoval(this.ResultArchiveUploadLog, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "SuspectCondition":
					base.PerformRelatedEntityRemoval(this.SuspectCondition, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "TempCart":
					base.PerformRelatedEntityRemoval(this.TempCart, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "Testimonial":
					base.PerformRelatedEntityRemoval(this.Testimonial, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "UncontactedCustomerCallQueue":
					base.PerformRelatedEntityRemoval(this.UncontactedCustomerCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerCallAttempts":
					DesetupSyncCustomerCallAttempts(false, true);
					break;
				case "CustomerLockForCall":
					DesetupSyncCustomerLockForCall(false, true);
					break;
				case "CustomerResultPosted":
					DesetupSyncCustomerResultPosted(false, true);
					break;
				case "CustomerTrale":
					DesetupSyncCustomerTrale(false, true);
					break;
				case "OrganizationRoleUser":
					DesetupSyncOrganizationRoleUser(false, true);
					break;
				default:
					break;
			}
		}

		/// <summary> Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These entities will have to be persisted after this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		public override List<IEntity2> GetDependingRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();
			if(_customerCallAttempts!=null)
			{
				toReturn.Add(_customerCallAttempts);
			}

			if(_customerLockForCall!=null)
			{
				toReturn.Add(_customerLockForCall);
			}

			if(_customerResultPosted!=null)
			{
				toReturn.Add(_customerResultPosted);
			}

			if(_customerTrale!=null)
			{
				toReturn.Add(_customerTrale);
			}



			return toReturn;
		}
		
		/// <summary> Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
		/// entities will have to be persisted before this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		public override List<IEntity2> GetDependentRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();
			if(_activityType!=null)
			{
				toReturn.Add(_activityType);
			}
			if(_address!=null)
			{
				toReturn.Add(_address);
			}
			if(_lab!=null)
			{
				toReturn.Add(_lab);
			}
			if(_language!=null)
			{
				toReturn.Add(_language);
			}
			if(_lookup______!=null)
			{
				toReturn.Add(_lookup______);
			}
			if(_lookup_____!=null)
			{
				toReturn.Add(_lookup_____);
			}
			if(_lookup_______!=null)
			{
				toReturn.Add(_lookup_______);
			}
			if(_lookup________!=null)
			{
				toReturn.Add(_lookup________);
			}
			if(_lookup____!=null)
			{
				toReturn.Add(_lookup____);
			}
			if(_lookup_!=null)
			{
				toReturn.Add(_lookup_);
			}
			if(_lookup!=null)
			{
				toReturn.Add(_lookup);
			}
			if(_lookup___!=null)
			{
				toReturn.Add(_lookup___);
			}
			if(_lookup__!=null)
			{
				toReturn.Add(_lookup__);
			}
			if(_notesDetails!=null)
			{
				toReturn.Add(_notesDetails);
			}
			if(_role!=null)
			{
				toReturn.Add(_role);
			}








			if(_organizationRoleUser!=null)
			{
				toReturn.Add(_organizationRoleUser);
			}

			return toReturn;
		}
		
		/// <summary>Gets a list of all entity collections stored as member variables in this entity. The contents of the ArrayList is used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.</summary>
		/// <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
		public override List<IEntityCollection2> GetMemberEntityCollections()
		{
			List<IEntityCollection2> toReturn = new List<IEntityCollection2>();
			toReturn.Add(this.CallQueueCustomer);
			toReturn.Add(this.CallRoundCallQueue);
			toReturn.Add(this.ChaseOutbound);
			toReturn.Add(this.ClickConversion);
			toReturn.Add(this.CurrentMedication);
			toReturn.Add(this.CustomerAccountGlocomNumber);
			toReturn.Add(this.CustomerBillingAccount);
			toReturn.Add(this.CustomerCallQueueCallAttempt);
			toReturn.Add(this.CustomerChaseCampaign);
			toReturn.Add(this.CustomerChaseChannel);
			toReturn.Add(this.CustomerChaseProduct);
			toReturn.Add(this.CustomerClinicalQuestionAnswer);
			toReturn.Add(this.CustomerEligibility);
			toReturn.Add(this.CustomerEventTestFinding);
			toReturn.Add(this.CustomerHealthInfo);
			toReturn.Add(this.CustomerHealthInfoArchive);
			toReturn.Add(this.CustomerIcdCode);
			toReturn.Add(this.CustomerOrderHistory);
			toReturn.Add(this.CustomerPredictedZip);
			toReturn.Add(this.CustomerPrimaryCarePhysician);
			toReturn.Add(this.CustomerProfileHistory);
			toReturn.Add(this.CustomerSurvey);
			toReturn.Add(this.CustomerTag);
			toReturn.Add(this.CustomerTargeted);
			toReturn.Add(this.CustomerUnsubscribedSmsNotification);
			toReturn.Add(this.CustomerWarmTransfer);
			toReturn.Add(this.DependentDisqualifiedTest);
			toReturn.Add(this.DirectMail);
			toReturn.Add(this.DisqualifiedTest);
			toReturn.Add(this.EventCustomerQuestionAnswer);
			toReturn.Add(this.EventCustomerResult);
			toReturn.Add(this.EventCustomers);
			toReturn.Add(this.EventPaymentDetails);
			toReturn.Add(this.FillEventCallQueue);
			toReturn.Add(this.GuardianDetails);
			toReturn.Add(this.HospitalPartnerCustomer);
			toReturn.Add(this.LanguageBarrierCallQueue);
			toReturn.Add(this.MailRoundCallQueue);
			toReturn.Add(this.Medication);
			toReturn.Add(this.MemberUploadLog);
			toReturn.Add(this.NoShowCallQueue);
			toReturn.Add(this.PhysicianInvoiceItem);
			toReturn.Add(this.PreAssessmentCustomerCallQueueCallAttempt);
			toReturn.Add(this.PreQualificationResult);
			toReturn.Add(this.ProspectCustomer);
			toReturn.Add(this.Raps);
			toReturn.Add(this.Referral);
			toReturn.Add(this.RequiredTest);
			toReturn.Add(this.ResultArchiveUploadLog);
			toReturn.Add(this.SuspectCondition);
			toReturn.Add(this.TempCart);
			toReturn.Add(this.Testimonial);
			toReturn.Add(this.UncontactedCustomerCallQueue);

			return toReturn;
		}
		


		/// <summary>ISerializable member. Does custom serialization so event handlers do not get serialized. Serializes members of this entity class and uses the base class' implementation to serialize the rest.</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				info.AddValue("_callQueueCustomer", ((_callQueueCustomer!=null) && (_callQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCustomer:null);
				info.AddValue("_callRoundCallQueue", ((_callRoundCallQueue!=null) && (_callRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_callRoundCallQueue:null);
				info.AddValue("_chaseOutbound", ((_chaseOutbound!=null) && (_chaseOutbound.Count>0) && !this.MarkedForDeletion)?_chaseOutbound:null);
				info.AddValue("_clickConversion", ((_clickConversion!=null) && (_clickConversion.Count>0) && !this.MarkedForDeletion)?_clickConversion:null);
				info.AddValue("_currentMedication", ((_currentMedication!=null) && (_currentMedication.Count>0) && !this.MarkedForDeletion)?_currentMedication:null);
				info.AddValue("_customerAccountGlocomNumber", ((_customerAccountGlocomNumber!=null) && (_customerAccountGlocomNumber.Count>0) && !this.MarkedForDeletion)?_customerAccountGlocomNumber:null);
				info.AddValue("_customerBillingAccount", ((_customerBillingAccount!=null) && (_customerBillingAccount.Count>0) && !this.MarkedForDeletion)?_customerBillingAccount:null);
				info.AddValue("_customerCallQueueCallAttempt", ((_customerCallQueueCallAttempt!=null) && (_customerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_customerCallQueueCallAttempt:null);
				info.AddValue("_customerChaseCampaign", ((_customerChaseCampaign!=null) && (_customerChaseCampaign.Count>0) && !this.MarkedForDeletion)?_customerChaseCampaign:null);
				info.AddValue("_customerChaseChannel", ((_customerChaseChannel!=null) && (_customerChaseChannel.Count>0) && !this.MarkedForDeletion)?_customerChaseChannel:null);
				info.AddValue("_customerChaseProduct", ((_customerChaseProduct!=null) && (_customerChaseProduct.Count>0) && !this.MarkedForDeletion)?_customerChaseProduct:null);
				info.AddValue("_customerClinicalQuestionAnswer", ((_customerClinicalQuestionAnswer!=null) && (_customerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerClinicalQuestionAnswer:null);
				info.AddValue("_customerEligibility", ((_customerEligibility!=null) && (_customerEligibility.Count>0) && !this.MarkedForDeletion)?_customerEligibility:null);
				info.AddValue("_customerEventTestFinding", ((_customerEventTestFinding!=null) && (_customerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_customerEventTestFinding:null);
				info.AddValue("_customerHealthInfo", ((_customerHealthInfo!=null) && (_customerHealthInfo.Count>0) && !this.MarkedForDeletion)?_customerHealthInfo:null);
				info.AddValue("_customerHealthInfoArchive", ((_customerHealthInfoArchive!=null) && (_customerHealthInfoArchive.Count>0) && !this.MarkedForDeletion)?_customerHealthInfoArchive:null);
				info.AddValue("_customerIcdCode", ((_customerIcdCode!=null) && (_customerIcdCode.Count>0) && !this.MarkedForDeletion)?_customerIcdCode:null);
				info.AddValue("_customerOrderHistory", ((_customerOrderHistory!=null) && (_customerOrderHistory.Count>0) && !this.MarkedForDeletion)?_customerOrderHistory:null);
				info.AddValue("_customerPredictedZip", ((_customerPredictedZip!=null) && (_customerPredictedZip.Count>0) && !this.MarkedForDeletion)?_customerPredictedZip:null);
				info.AddValue("_customerPrimaryCarePhysician", ((_customerPrimaryCarePhysician!=null) && (_customerPrimaryCarePhysician.Count>0) && !this.MarkedForDeletion)?_customerPrimaryCarePhysician:null);
				info.AddValue("_customerProfileHistory", ((_customerProfileHistory!=null) && (_customerProfileHistory.Count>0) && !this.MarkedForDeletion)?_customerProfileHistory:null);
				info.AddValue("_customerSurvey", ((_customerSurvey!=null) && (_customerSurvey.Count>0) && !this.MarkedForDeletion)?_customerSurvey:null);
				info.AddValue("_customerTag", ((_customerTag!=null) && (_customerTag.Count>0) && !this.MarkedForDeletion)?_customerTag:null);
				info.AddValue("_customerTargeted", ((_customerTargeted!=null) && (_customerTargeted.Count>0) && !this.MarkedForDeletion)?_customerTargeted:null);
				info.AddValue("_customerUnsubscribedSmsNotification", ((_customerUnsubscribedSmsNotification!=null) && (_customerUnsubscribedSmsNotification.Count>0) && !this.MarkedForDeletion)?_customerUnsubscribedSmsNotification:null);
				info.AddValue("_customerWarmTransfer", ((_customerWarmTransfer!=null) && (_customerWarmTransfer.Count>0) && !this.MarkedForDeletion)?_customerWarmTransfer:null);
				info.AddValue("_dependentDisqualifiedTest", ((_dependentDisqualifiedTest!=null) && (_dependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_dependentDisqualifiedTest:null);
				info.AddValue("_directMail", ((_directMail!=null) && (_directMail.Count>0) && !this.MarkedForDeletion)?_directMail:null);
				info.AddValue("_disqualifiedTest", ((_disqualifiedTest!=null) && (_disqualifiedTest.Count>0) && !this.MarkedForDeletion)?_disqualifiedTest:null);
				info.AddValue("_eventCustomerQuestionAnswer", ((_eventCustomerQuestionAnswer!=null) && (_eventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventCustomerQuestionAnswer:null);
				info.AddValue("_eventCustomerResult", ((_eventCustomerResult!=null) && (_eventCustomerResult.Count>0) && !this.MarkedForDeletion)?_eventCustomerResult:null);
				info.AddValue("_eventCustomers", ((_eventCustomers!=null) && (_eventCustomers.Count>0) && !this.MarkedForDeletion)?_eventCustomers:null);
				info.AddValue("_eventPaymentDetails", ((_eventPaymentDetails!=null) && (_eventPaymentDetails.Count>0) && !this.MarkedForDeletion)?_eventPaymentDetails:null);
				info.AddValue("_fillEventCallQueue", ((_fillEventCallQueue!=null) && (_fillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_fillEventCallQueue:null);
				info.AddValue("_guardianDetails", ((_guardianDetails!=null) && (_guardianDetails.Count>0) && !this.MarkedForDeletion)?_guardianDetails:null);
				info.AddValue("_hospitalPartnerCustomer", ((_hospitalPartnerCustomer!=null) && (_hospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_hospitalPartnerCustomer:null);
				info.AddValue("_languageBarrierCallQueue", ((_languageBarrierCallQueue!=null) && (_languageBarrierCallQueue.Count>0) && !this.MarkedForDeletion)?_languageBarrierCallQueue:null);
				info.AddValue("_mailRoundCallQueue", ((_mailRoundCallQueue!=null) && (_mailRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_mailRoundCallQueue:null);
				info.AddValue("_medication", ((_medication!=null) && (_medication.Count>0) && !this.MarkedForDeletion)?_medication:null);
				info.AddValue("_memberUploadLog", ((_memberUploadLog!=null) && (_memberUploadLog.Count>0) && !this.MarkedForDeletion)?_memberUploadLog:null);
				info.AddValue("_noShowCallQueue", ((_noShowCallQueue!=null) && (_noShowCallQueue.Count>0) && !this.MarkedForDeletion)?_noShowCallQueue:null);
				info.AddValue("_physicianInvoiceItem", ((_physicianInvoiceItem!=null) && (_physicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianInvoiceItem:null);
				info.AddValue("_preAssessmentCustomerCallQueueCallAttempt", ((_preAssessmentCustomerCallQueueCallAttempt!=null) && (_preAssessmentCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_preAssessmentCustomerCallQueueCallAttempt:null);
				info.AddValue("_preQualificationResult", ((_preQualificationResult!=null) && (_preQualificationResult.Count>0) && !this.MarkedForDeletion)?_preQualificationResult:null);
				info.AddValue("_prospectCustomer", ((_prospectCustomer!=null) && (_prospectCustomer.Count>0) && !this.MarkedForDeletion)?_prospectCustomer:null);
				info.AddValue("_raps", ((_raps!=null) && (_raps.Count>0) && !this.MarkedForDeletion)?_raps:null);
				info.AddValue("_referral", ((_referral!=null) && (_referral.Count>0) && !this.MarkedForDeletion)?_referral:null);
				info.AddValue("_requiredTest", ((_requiredTest!=null) && (_requiredTest.Count>0) && !this.MarkedForDeletion)?_requiredTest:null);
				info.AddValue("_resultArchiveUploadLog", ((_resultArchiveUploadLog!=null) && (_resultArchiveUploadLog.Count>0) && !this.MarkedForDeletion)?_resultArchiveUploadLog:null);
				info.AddValue("_suspectCondition", ((_suspectCondition!=null) && (_suspectCondition.Count>0) && !this.MarkedForDeletion)?_suspectCondition:null);
				info.AddValue("_tempCart", ((_tempCart!=null) && (_tempCart.Count>0) && !this.MarkedForDeletion)?_tempCart:null);
				info.AddValue("_testimonial", ((_testimonial!=null) && (_testimonial.Count>0) && !this.MarkedForDeletion)?_testimonial:null);
				info.AddValue("_uncontactedCustomerCallQueue", ((_uncontactedCustomerCallQueue!=null) && (_uncontactedCustomerCallQueue.Count>0) && !this.MarkedForDeletion)?_uncontactedCustomerCallQueue:null);
				info.AddValue("_accountCollectionViaLanguageBarrierCallQueue", ((_accountCollectionViaLanguageBarrierCallQueue!=null) && (_accountCollectionViaLanguageBarrierCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaLanguageBarrierCallQueue:null);
				info.AddValue("_accountCollectionViaUncontactedCustomerCallQueue", ((_accountCollectionViaUncontactedCustomerCallQueue!=null) && (_accountCollectionViaUncontactedCustomerCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaUncontactedCustomerCallQueue:null);
				info.AddValue("_accountCollectionViaMailRoundCallQueue", ((_accountCollectionViaMailRoundCallQueue!=null) && (_accountCollectionViaMailRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaMailRoundCallQueue:null);
				info.AddValue("_accountCollectionViaCallRoundCallQueue", ((_accountCollectionViaCallRoundCallQueue!=null) && (_accountCollectionViaCallRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaCallRoundCallQueue:null);
				info.AddValue("_accountCollectionViaNoShowCallQueue", ((_accountCollectionViaNoShowCallQueue!=null) && (_accountCollectionViaNoShowCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaNoShowCallQueue:null);
				info.AddValue("_accountCollectionViaCallQueueCustomer", ((_accountCollectionViaCallQueueCustomer!=null) && (_accountCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaCallQueueCustomer:null);
				info.AddValue("_accountCollectionViaFillEventCallQueue", ((_accountCollectionViaFillEventCallQueue!=null) && (_accountCollectionViaFillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaFillEventCallQueue:null);
				info.AddValue("_activityTypeCollectionViaCallQueueCustomer", ((_activityTypeCollectionViaCallQueueCustomer!=null) && (_activityTypeCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_activityTypeCollectionViaCallQueueCustomer:null);
				info.AddValue("_addressCollectionViaCustomerPrimaryCarePhysician", ((_addressCollectionViaCustomerPrimaryCarePhysician!=null) && (_addressCollectionViaCustomerPrimaryCarePhysician.Count>0) && !this.MarkedForDeletion)?_addressCollectionViaCustomerPrimaryCarePhysician:null);
				info.AddValue("_addressCollectionViaCustomerPrimaryCarePhysician_", ((_addressCollectionViaCustomerPrimaryCarePhysician_!=null) && (_addressCollectionViaCustomerPrimaryCarePhysician_.Count>0) && !this.MarkedForDeletion)?_addressCollectionViaCustomerPrimaryCarePhysician_:null);
				info.AddValue("_afaffiliateCampaignCollectionViaEventCustomers", ((_afaffiliateCampaignCollectionViaEventCustomers!=null) && (_afaffiliateCampaignCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_afaffiliateCampaignCollectionViaEventCustomers:null);
				info.AddValue("_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer", ((_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer!=null) && (_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.Count>0) && !this.MarkedForDeletion)?_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer:null);
				info.AddValue("_billingAccountCollectionViaCustomerBillingAccount", ((_billingAccountCollectionViaCustomerBillingAccount!=null) && (_billingAccountCollectionViaCustomerBillingAccount.Count>0) && !this.MarkedForDeletion)?_billingAccountCollectionViaCustomerBillingAccount:null);
				info.AddValue("_callQueueCollectionViaCallQueueCustomer", ((_callQueueCollectionViaCallQueueCustomer!=null) && (_callQueueCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCollectionViaCallQueueCustomer:null);
				info.AddValue("_callQueueCriteriaCollectionViaCallQueueCustomer", ((_callQueueCriteriaCollectionViaCallQueueCustomer!=null) && (_callQueueCriteriaCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCriteriaCollectionViaCallQueueCustomer:null);
				info.AddValue("_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt", ((_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt!=null) && (_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt:null);
				info.AddValue("_callsCollectionViaPreQualificationResult", ((_callsCollectionViaPreQualificationResult!=null) && (_callsCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_callsCollectionViaPreQualificationResult:null);
				info.AddValue("_callsCollectionViaCustomerAccountGlocomNumber", ((_callsCollectionViaCustomerAccountGlocomNumber!=null) && (_callsCollectionViaCustomerAccountGlocomNumber.Count>0) && !this.MarkedForDeletion)?_callsCollectionViaCustomerAccountGlocomNumber:null);
				info.AddValue("_callsCollectionViaCustomerCallQueueCallAttempt", ((_callsCollectionViaCustomerCallQueueCallAttempt!=null) && (_callsCollectionViaCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_callsCollectionViaCustomerCallQueueCallAttempt:null);
				info.AddValue("_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt", ((_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null) && (_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt:null);
				info.AddValue("_callUploadCollectionViaDirectMail", ((_callUploadCollectionViaDirectMail!=null) && (_callUploadCollectionViaDirectMail.Count>0) && !this.MarkedForDeletion)?_callUploadCollectionViaDirectMail:null);
				info.AddValue("_campaignCollectionViaDirectMail", ((_campaignCollectionViaDirectMail!=null) && (_campaignCollectionViaDirectMail.Count>0) && !this.MarkedForDeletion)?_campaignCollectionViaDirectMail:null);
				info.AddValue("_campaignCollectionViaEventCustomers", ((_campaignCollectionViaEventCustomers!=null) && (_campaignCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_campaignCollectionViaEventCustomers:null);
				info.AddValue("_campaignCollectionViaCallQueueCustomer", ((_campaignCollectionViaCallQueueCustomer!=null) && (_campaignCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_campaignCollectionViaCallQueueCustomer:null);
				info.AddValue("_chargeCardCollectionViaTempCart", ((_chargeCardCollectionViaTempCart!=null) && (_chargeCardCollectionViaTempCart.Count>0) && !this.MarkedForDeletion)?_chargeCardCollectionViaTempCart:null);
				info.AddValue("_chaseCampaignCollectionViaCustomerChaseCampaign", ((_chaseCampaignCollectionViaCustomerChaseCampaign!=null) && (_chaseCampaignCollectionViaCustomerChaseCampaign.Count>0) && !this.MarkedForDeletion)?_chaseCampaignCollectionViaCustomerChaseCampaign:null);
				info.AddValue("_chaseChannelLevelCollectionViaCustomerChaseChannel", ((_chaseChannelLevelCollectionViaCustomerChaseChannel!=null) && (_chaseChannelLevelCollectionViaCustomerChaseChannel.Count>0) && !this.MarkedForDeletion)?_chaseChannelLevelCollectionViaCustomerChaseChannel:null);
				info.AddValue("_chaseGroupCollectionViaChaseOutbound", ((_chaseGroupCollectionViaChaseOutbound!=null) && (_chaseGroupCollectionViaChaseOutbound.Count>0) && !this.MarkedForDeletion)?_chaseGroupCollectionViaChaseOutbound:null);
				info.AddValue("_chaseOutboundCollectionViaCustomerChaseProduct", ((_chaseOutboundCollectionViaCustomerChaseProduct!=null) && (_chaseOutboundCollectionViaCustomerChaseProduct.Count>0) && !this.MarkedForDeletion)?_chaseOutboundCollectionViaCustomerChaseProduct:null);
				info.AddValue("_chaseOutboundCollectionViaCustomerChaseChannel", ((_chaseOutboundCollectionViaCustomerChaseChannel!=null) && (_chaseOutboundCollectionViaCustomerChaseChannel.Count>0) && !this.MarkedForDeletion)?_chaseOutboundCollectionViaCustomerChaseChannel:null);
				info.AddValue("_chaseOutboundCollectionViaCustomerChaseCampaign", ((_chaseOutboundCollectionViaCustomerChaseCampaign!=null) && (_chaseOutboundCollectionViaCustomerChaseCampaign.Count>0) && !this.MarkedForDeletion)?_chaseOutboundCollectionViaCustomerChaseCampaign:null);
				info.AddValue("_chaseProductCollectionViaCustomerChaseProduct", ((_chaseProductCollectionViaCustomerChaseProduct!=null) && (_chaseProductCollectionViaCustomerChaseProduct.Count>0) && !this.MarkedForDeletion)?_chaseProductCollectionViaCustomerChaseProduct:null);
				info.AddValue("_clickLogCollectionViaClickConversion", ((_clickLogCollectionViaClickConversion!=null) && (_clickLogCollectionViaClickConversion.Count>0) && !this.MarkedForDeletion)?_clickLogCollectionViaClickConversion:null);
				info.AddValue("_corporateUploadCollectionViaMemberUploadLog", ((_corporateUploadCollectionViaMemberUploadLog!=null) && (_corporateUploadCollectionViaMemberUploadLog.Count>0) && !this.MarkedForDeletion)?_corporateUploadCollectionViaMemberUploadLog:null);
				info.AddValue("_corporateUploadCollectionViaCustomerOrderHistory", ((_corporateUploadCollectionViaCustomerOrderHistory!=null) && (_corporateUploadCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_corporateUploadCollectionViaCustomerOrderHistory:null);
				info.AddValue("_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", ((_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer!=null) && (_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_customerHealthQuestionsCollectionViaCustomerHealthInfo", ((_customerHealthQuestionsCollectionViaCustomerHealthInfo!=null) && (_customerHealthQuestionsCollectionViaCustomerHealthInfo.Count>0) && !this.MarkedForDeletion)?_customerHealthQuestionsCollectionViaCustomerHealthInfo:null);
				info.AddValue("_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive", ((_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive!=null) && (_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive.Count>0) && !this.MarkedForDeletion)?_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive:null);
				info.AddValue("_customerProfileHistoryCollectionViaEventCustomers", ((_customerProfileHistoryCollectionViaEventCustomers!=null) && (_customerProfileHistoryCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_customerProfileHistoryCollectionViaEventCustomers:null);
				info.AddValue("_customerRegistrationNotesCollectionViaEventCustomers", ((_customerRegistrationNotesCollectionViaEventCustomers!=null) && (_customerRegistrationNotesCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_customerRegistrationNotesCollectionViaEventCustomers:null);
				info.AddValue("_customerSurveyQuestionAnswerCollectionViaCustomerSurvey", ((_customerSurveyQuestionAnswerCollectionViaCustomerSurvey!=null) && (_customerSurveyQuestionAnswerCollectionViaCustomerSurvey.Count>0) && !this.MarkedForDeletion)?_customerSurveyQuestionAnswerCollectionViaCustomerSurvey:null);
				info.AddValue("_directMailTypeCollectionViaDirectMail", ((_directMailTypeCollectionViaDirectMail!=null) && (_directMailTypeCollectionViaDirectMail.Count>0) && !this.MarkedForDeletion)?_directMailTypeCollectionViaDirectMail:null);
				info.AddValue("_eligibilityCollectionViaTempCart", ((_eligibilityCollectionViaTempCart!=null) && (_eligibilityCollectionViaTempCart.Count>0) && !this.MarkedForDeletion)?_eligibilityCollectionViaTempCart:null);
				info.AddValue("_eventAppointmentCollectionViaEventCustomers", ((_eventAppointmentCollectionViaEventCustomers!=null) && (_eventAppointmentCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_eventAppointmentCollectionViaEventCustomers:null);
				info.AddValue("_eventCustomersCollectionViaCustomerHealthInfoArchive", ((_eventCustomersCollectionViaCustomerHealthInfoArchive!=null) && (_eventCustomersCollectionViaCustomerHealthInfoArchive.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCustomerHealthInfoArchive:null);
				info.AddValue("_eventCustomersCollectionViaCallQueueCustomer", ((_eventCustomersCollectionViaCallQueueCustomer!=null) && (_eventCustomersCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCallQueueCustomer:null);
				info.AddValue("_eventCustomersCollectionViaDependentDisqualifiedTest", ((_eventCustomersCollectionViaDependentDisqualifiedTest!=null) && (_eventCustomersCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_eventCustomersCollectionViaCustomerOrderHistory", ((_eventCustomersCollectionViaCustomerOrderHistory!=null) && (_eventCustomersCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCustomerOrderHistory:null);
				info.AddValue("_eventCustomersCollectionViaDisqualifiedTest", ((_eventCustomersCollectionViaDisqualifiedTest!=null) && (_eventCustomersCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaDisqualifiedTest:null);
				info.AddValue("_eventCustomersCollectionViaClickConversion", ((_eventCustomersCollectionViaClickConversion!=null) && (_eventCustomersCollectionViaClickConversion.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaClickConversion:null);
				info.AddValue("_eventCustomersCollectionViaCustomerHealthInfo", ((_eventCustomersCollectionViaCustomerHealthInfo!=null) && (_eventCustomersCollectionViaCustomerHealthInfo.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCustomerHealthInfo:null);
				info.AddValue("_eventCustomersCollectionViaEventCustomerQuestionAnswer", ((_eventCustomersCollectionViaEventCustomerQuestionAnswer!=null) && (_eventCustomersCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_eventPackageDetailsCollectionViaCustomerOrderHistory", ((_eventPackageDetailsCollectionViaCustomerOrderHistory!=null) && (_eventPackageDetailsCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventPackageDetailsCollectionViaCustomerOrderHistory:null);
				info.AddValue("_eventPackageDetailsCollectionViaEventPaymentDetails", ((_eventPackageDetailsCollectionViaEventPaymentDetails!=null) && (_eventPackageDetailsCollectionViaEventPaymentDetails.Count>0) && !this.MarkedForDeletion)?_eventPackageDetailsCollectionViaEventPaymentDetails:null);
				info.AddValue("_eventsCollectionViaEventCustomerQuestionAnswer", ((_eventsCollectionViaEventCustomerQuestionAnswer!=null) && (_eventsCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_eventsCollectionViaEventCustomerResult", ((_eventsCollectionViaEventCustomerResult!=null) && (_eventsCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaEventCustomerResult:null);
				info.AddValue("_eventsCollectionViaEventCustomers", ((_eventsCollectionViaEventCustomers!=null) && (_eventsCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaEventCustomers:null);
				info.AddValue("_eventsCollectionViaPhysicianInvoiceItem", ((_eventsCollectionViaPhysicianInvoiceItem!=null) && (_eventsCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_eventsCollectionViaDisqualifiedTest", ((_eventsCollectionViaDisqualifiedTest!=null) && (_eventsCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaDisqualifiedTest:null);
				info.AddValue("_eventsCollectionViaPreQualificationResult", ((_eventsCollectionViaPreQualificationResult!=null) && (_eventsCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaPreQualificationResult:null);
				info.AddValue("_eventsCollectionViaDependentDisqualifiedTest", ((_eventsCollectionViaDependentDisqualifiedTest!=null) && (_eventsCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_eventsCollectionViaHospitalPartnerCustomer", ((_eventsCollectionViaHospitalPartnerCustomer!=null) && (_eventsCollectionViaHospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaHospitalPartnerCustomer:null);
				info.AddValue("_eventsCollectionViaCallQueueCustomer", ((_eventsCollectionViaCallQueueCustomer!=null) && (_eventsCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaCallQueueCustomer:null);
				info.AddValue("_eventsCollectionViaCustomerEventTestFinding", ((_eventsCollectionViaCustomerEventTestFinding!=null) && (_eventsCollectionViaCustomerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaCustomerEventTestFinding:null);
				info.AddValue("_eventsCollectionViaCustomerOrderHistory", ((_eventsCollectionViaCustomerOrderHistory!=null) && (_eventsCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaCustomerOrderHistory:null);
				info.AddValue("_eventsCollectionViaCustomerClinicalQuestionAnswer", ((_eventsCollectionViaCustomerClinicalQuestionAnswer!=null) && (_eventsCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventsCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_eventTestCollectionViaCustomerOrderHistory", ((_eventTestCollectionViaCustomerOrderHistory!=null) && (_eventTestCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventTestCollectionViaCustomerOrderHistory:null);
				info.AddValue("_fileCollectionViaTestimonial", ((_fileCollectionViaTestimonial!=null) && (_fileCollectionViaTestimonial.Count>0) && !this.MarkedForDeletion)?_fileCollectionViaTestimonial:null);
				info.AddValue("_gcNotGivenReasonCollectionViaEventCustomers", ((_gcNotGivenReasonCollectionViaEventCustomers!=null) && (_gcNotGivenReasonCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_gcNotGivenReasonCollectionViaEventCustomers:null);
				info.AddValue("_hafTemplateCollectionViaCustomerClinicalQuestionAnswer", ((_hafTemplateCollectionViaCustomerClinicalQuestionAnswer!=null) && (_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_hafTemplateCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_hospitalFacilityCollectionViaEventCustomers", ((_hospitalFacilityCollectionViaEventCustomers!=null) && (_hospitalFacilityCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_hospitalFacilityCollectionViaEventCustomers:null);
				info.AddValue("_icdCodesCollectionViaCustomerIcdCode", ((_icdCodesCollectionViaCustomerIcdCode!=null) && (_icdCodesCollectionViaCustomerIcdCode.Count>0) && !this.MarkedForDeletion)?_icdCodesCollectionViaCustomerIcdCode:null);
				info.AddValue("_languageCollectionViaCallQueueCustomer", ((_languageCollectionViaCallQueueCustomer!=null) && (_languageCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_languageCollectionViaCallQueueCustomer:null);
				info.AddValue("_lookupCollectionViaCallRoundCallQueue", ((_lookupCollectionViaCallRoundCallQueue!=null) && (_lookupCollectionViaCallRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCallRoundCallQueue:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult______", ((_lookupCollectionViaPreQualificationResult______!=null) && (_lookupCollectionViaPreQualificationResult______.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult______:null);
				info.AddValue("_lookupCollectionViaNoShowCallQueue", ((_lookupCollectionViaNoShowCallQueue!=null) && (_lookupCollectionViaNoShowCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaNoShowCallQueue:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult", ((_lookupCollectionViaPreQualificationResult!=null) && (_lookupCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_______", ((_lookupCollectionViaPreQualificationResult_______!=null) && (_lookupCollectionViaPreQualificationResult_______.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_______:null);
				info.AddValue("_lookupCollectionViaEventCustomerResult", ((_lookupCollectionViaEventCustomerResult!=null) && (_lookupCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomerResult:null);
				info.AddValue("_lookupCollectionViaMailRoundCallQueue", ((_lookupCollectionViaMailRoundCallQueue!=null) && (_lookupCollectionViaMailRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaMailRoundCallQueue:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult__", ((_lookupCollectionViaPreQualificationResult__!=null) && (_lookupCollectionViaPreQualificationResult__.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult__:null);
				info.AddValue("_lookupCollectionViaChaseOutbound", ((_lookupCollectionViaChaseOutbound!=null) && (_lookupCollectionViaChaseOutbound.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaChaseOutbound:null);
				info.AddValue("_lookupCollectionViaLanguageBarrierCallQueue", ((_lookupCollectionViaLanguageBarrierCallQueue!=null) && (_lookupCollectionViaLanguageBarrierCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaLanguageBarrierCallQueue:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_____", ((_lookupCollectionViaPreQualificationResult_____!=null) && (_lookupCollectionViaPreQualificationResult_____.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_____:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult____", ((_lookupCollectionViaPreQualificationResult____!=null) && (_lookupCollectionViaPreQualificationResult____.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult____:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult___", ((_lookupCollectionViaPreQualificationResult___!=null) && (_lookupCollectionViaPreQualificationResult___.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult___:null);
				info.AddValue("_lookupCollectionViaCustomerProfileHistory__", ((_lookupCollectionViaCustomerProfileHistory__!=null) && (_lookupCollectionViaCustomerProfileHistory__.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerProfileHistory__:null);
				info.AddValue("_lookupCollectionViaCustomerProfileHistory___", ((_lookupCollectionViaCustomerProfileHistory___!=null) && (_lookupCollectionViaCustomerProfileHistory___.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerProfileHistory___:null);
				info.AddValue("_lookupCollectionViaCustomerOrderHistory", ((_lookupCollectionViaCustomerOrderHistory!=null) && (_lookupCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerOrderHistory:null);
				info.AddValue("_lookupCollectionViaCustomerProfileHistory_", ((_lookupCollectionViaCustomerProfileHistory_!=null) && (_lookupCollectionViaCustomerProfileHistory_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerProfileHistory_:null);
				info.AddValue("_lookupCollectionViaUncontactedCustomerCallQueue", ((_lookupCollectionViaUncontactedCustomerCallQueue!=null) && (_lookupCollectionViaUncontactedCustomerCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaUncontactedCustomerCallQueue:null);
				info.AddValue("_lookupCollectionViaCustomerPrimaryCarePhysician", ((_lookupCollectionViaCustomerPrimaryCarePhysician!=null) && (_lookupCollectionViaCustomerPrimaryCarePhysician.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerPrimaryCarePhysician:null);
				info.AddValue("_lookupCollectionViaCustomerProfileHistory", ((_lookupCollectionViaCustomerProfileHistory!=null) && (_lookupCollectionViaCustomerProfileHistory.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerProfileHistory:null);
				info.AddValue("_lookupCollectionViaCallQueueCustomer", ((_lookupCollectionViaCallQueueCustomer!=null) && (_lookupCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCallQueueCustomer:null);
				info.AddValue("_lookupCollectionViaEventCustomers", ((_lookupCollectionViaEventCustomers!=null) && (_lookupCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomers:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_", ((_lookupCollectionViaPreQualificationResult_!=null) && (_lookupCollectionViaPreQualificationResult_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult________", ((_lookupCollectionViaPreQualificationResult________!=null) && (_lookupCollectionViaPreQualificationResult________.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult________:null);
				info.AddValue("_lookupCollectionViaCustomerUnsubscribedSmsNotification", ((_lookupCollectionViaCustomerUnsubscribedSmsNotification!=null) && (_lookupCollectionViaCustomerUnsubscribedSmsNotification.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerUnsubscribedSmsNotification:null);
				info.AddValue("_lookupCollectionViaFillEventCallQueue", ((_lookupCollectionViaFillEventCallQueue!=null) && (_lookupCollectionViaFillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaFillEventCallQueue:null);
				info.AddValue("_lookupCollectionViaEventCustomers_", ((_lookupCollectionViaEventCustomers_!=null) && (_lookupCollectionViaEventCustomers_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomers_:null);
				info.AddValue("_lookupCollectionViaProspectCustomer", ((_lookupCollectionViaProspectCustomer!=null) && (_lookupCollectionViaProspectCustomer.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaProspectCustomer:null);
				info.AddValue("_ndcCollectionViaCurrentMedication", ((_ndcCollectionViaCurrentMedication!=null) && (_ndcCollectionViaCurrentMedication.Count>0) && !this.MarkedForDeletion)?_ndcCollectionViaCurrentMedication:null);
				info.AddValue("_notesDetailsCollectionViaCallQueueCustomer", ((_notesDetailsCollectionViaCallQueueCustomer!=null) && (_notesDetailsCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_notesDetailsCollectionViaCallQueueCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaGuardianDetails_", ((_organizationRoleUserCollectionViaGuardianDetails_!=null) && (_organizationRoleUserCollectionViaGuardianDetails_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaGuardianDetails_:null);
				info.AddValue("_organizationRoleUserCollectionViaGuardianDetails", ((_organizationRoleUserCollectionViaGuardianDetails!=null) && (_organizationRoleUserCollectionViaGuardianDetails.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaGuardianDetails:null);
				info.AddValue("_organizationRoleUserCollectionViaUncontactedCustomerCallQueue", ((_organizationRoleUserCollectionViaUncontactedCustomerCallQueue!=null) && (_organizationRoleUserCollectionViaUncontactedCustomerCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaUncontactedCustomerCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer_", ((_organizationRoleUserCollectionViaCallQueueCustomer_!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer", ((_organizationRoleUserCollectionViaCallQueueCustomer!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaReferral", ((_organizationRoleUserCollectionViaReferral!=null) && (_organizationRoleUserCollectionViaReferral.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaReferral:null);
				info.AddValue("_organizationRoleUserCollectionViaFillEventCallQueue", ((_organizationRoleUserCollectionViaFillEventCallQueue!=null) && (_organizationRoleUserCollectionViaFillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaFillEventCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaRequiredTest", ((_organizationRoleUserCollectionViaRequiredTest!=null) && (_organizationRoleUserCollectionViaRequiredTest.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaRequiredTest:null);
				info.AddValue("_organizationRoleUserCollectionViaProspectCustomer", ((_organizationRoleUserCollectionViaProspectCustomer!=null) && (_organizationRoleUserCollectionViaProspectCustomer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaProspectCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaMailRoundCallQueue", ((_organizationRoleUserCollectionViaMailRoundCallQueue!=null) && (_organizationRoleUserCollectionViaMailRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaMailRoundCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaNoShowCallQueue", ((_organizationRoleUserCollectionViaNoShowCallQueue!=null) && (_organizationRoleUserCollectionViaNoShowCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaNoShowCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaMedication", ((_organizationRoleUserCollectionViaMedication!=null) && (_organizationRoleUserCollectionViaMedication.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaMedication:null);
				info.AddValue("_organizationRoleUserCollectionViaCallRoundCallQueue", ((_organizationRoleUserCollectionViaCallRoundCallQueue!=null) && (_organizationRoleUserCollectionViaCallRoundCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallRoundCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaMedication_", ((_organizationRoleUserCollectionViaMedication_!=null) && (_organizationRoleUserCollectionViaMedication_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaMedication_:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer__", ((_organizationRoleUserCollectionViaCallQueueCustomer__!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer__:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer_", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer_!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer_:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer__", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer__!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer__:null);
				info.AddValue("_organizationRoleUserCollectionViaLanguageBarrierCallQueue", ((_organizationRoleUserCollectionViaLanguageBarrierCallQueue!=null) && (_organizationRoleUserCollectionViaLanguageBarrierCallQueue.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaLanguageBarrierCallQueue:null);
				info.AddValue("_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt", ((_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null) && (_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerHealthInfo", ((_organizationRoleUserCollectionViaCustomerHealthInfo!=null) && (_organizationRoleUserCollectionViaCustomerHealthInfo.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerHealthInfo:null);
				info.AddValue("_organizationRoleUserCollectionViaDisqualifiedTest", ((_organizationRoleUserCollectionViaDisqualifiedTest!=null) && (_organizationRoleUserCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaDisqualifiedTest:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerHealthInfoArchive", ((_organizationRoleUserCollectionViaCustomerHealthInfoArchive!=null) && (_organizationRoleUserCollectionViaCustomerHealthInfoArchive.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerHealthInfoArchive:null);
				info.AddValue("_organizationRoleUserCollectionViaDirectMail", ((_organizationRoleUserCollectionViaDirectMail!=null) && (_organizationRoleUserCollectionViaDirectMail.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaDirectMail:null);
				info.AddValue("_organizationRoleUserCollectionViaDisqualifiedTest_", ((_organizationRoleUserCollectionViaDisqualifiedTest_!=null) && (_organizationRoleUserCollectionViaDisqualifiedTest_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaDisqualifiedTest_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer", ((_organizationRoleUserCollectionViaEventCustomerQuestionAnswer!=null) && (_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_", ((_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_!=null) && (_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician", ((_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician!=null) && (_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerEligibility_", ((_organizationRoleUserCollectionViaCustomerEligibility_!=null) && (_organizationRoleUserCollectionViaCustomerEligibility_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerEligibility_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerIcdCode", ((_organizationRoleUserCollectionViaCustomerIcdCode!=null) && (_organizationRoleUserCollectionViaCustomerIcdCode.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerIcdCode:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerProfileHistory", ((_organizationRoleUserCollectionViaCustomerProfileHistory!=null) && (_organizationRoleUserCollectionViaCustomerProfileHistory.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerProfileHistory:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerTag", ((_organizationRoleUserCollectionViaCustomerTag!=null) && (_organizationRoleUserCollectionViaCustomerTag.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerTag:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_", ((_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_!=null) && (_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__", ((_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__!=null) && (_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerTag_", ((_organizationRoleUserCollectionViaCustomerTag_!=null) && (_organizationRoleUserCollectionViaCustomerTag_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerTag_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerWarmTransfer", ((_organizationRoleUserCollectionViaCustomerWarmTransfer!=null) && (_organizationRoleUserCollectionViaCustomerWarmTransfer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerWarmTransfer:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerWarmTransfer_", ((_organizationRoleUserCollectionViaCustomerWarmTransfer_!=null) && (_organizationRoleUserCollectionViaCustomerWarmTransfer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerWarmTransfer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerTargeted", ((_organizationRoleUserCollectionViaCustomerTargeted!=null) && (_organizationRoleUserCollectionViaCustomerTargeted.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerTargeted:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerTargeted_", ((_organizationRoleUserCollectionViaCustomerTargeted_!=null) && (_organizationRoleUserCollectionViaCustomerTargeted_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerTargeted_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerEligibility", ((_organizationRoleUserCollectionViaCustomerEligibility!=null) && (_organizationRoleUserCollectionViaCustomerEligibility.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerEligibility:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult___", ((_organizationRoleUserCollectionViaEventCustomerResult___!=null) && (_organizationRoleUserCollectionViaEventCustomerResult___.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult___:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomers", ((_organizationRoleUserCollectionViaEventCustomers!=null) && (_organizationRoleUserCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomers:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomers_", ((_organizationRoleUserCollectionViaEventCustomers_!=null) && (_organizationRoleUserCollectionViaEventCustomers_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomers_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult__", ((_organizationRoleUserCollectionViaEventCustomerResult__!=null) && (_organizationRoleUserCollectionViaEventCustomerResult__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult__:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult____", ((_organizationRoleUserCollectionViaEventCustomerResult____!=null) && (_organizationRoleUserCollectionViaEventCustomerResult____.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult____:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult______", ((_organizationRoleUserCollectionViaEventCustomerResult______!=null) && (_organizationRoleUserCollectionViaEventCustomerResult______.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult______:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", ((_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer!=null) && (_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_____", ((_organizationRoleUserCollectionViaEventCustomerResult_____!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_____.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_____:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt", ((_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt!=null) && (_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", ((_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_!=null) && (_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCurrentMedication", ((_organizationRoleUserCollectionViaCurrentMedication!=null) && (_organizationRoleUserCollectionViaCurrentMedication.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCurrentMedication:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult", ((_organizationRoleUserCollectionViaEventCustomerResult!=null) && (_organizationRoleUserCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_______", ((_organizationRoleUserCollectionViaEventCustomerResult_______!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_______.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_______:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_", ((_organizationRoleUserCollectionViaEventCustomerResult_!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult________", ((_organizationRoleUserCollectionViaEventCustomerResult________!=null) && (_organizationRoleUserCollectionViaEventCustomerResult________.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult________:null);
				info.AddValue("_physicianEvaluationCollectionViaPhysicianInvoiceItem", ((_physicianEvaluationCollectionViaPhysicianInvoiceItem!=null) && (_physicianEvaluationCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianEvaluationCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_physicianInvoiceCollectionViaPhysicianInvoiceItem", ((_physicianInvoiceCollectionViaPhysicianInvoiceItem!=null) && (_physicianInvoiceCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianInvoiceCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_physicianMasterCollectionViaCustomerPrimaryCarePhysician", ((_physicianMasterCollectionViaCustomerPrimaryCarePhysician!=null) && (_physicianMasterCollectionViaCustomerPrimaryCarePhysician.Count>0) && !this.MarkedForDeletion)?_physicianMasterCollectionViaCustomerPrimaryCarePhysician:null);
				info.AddValue("_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer", ((_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer!=null) && (_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_preQualificationQuestionCollectionViaDisqualifiedTest", ((_preQualificationQuestionCollectionViaDisqualifiedTest!=null) && (_preQualificationQuestionCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_preQualificationQuestionCollectionViaDisqualifiedTest:null);
				info.AddValue("_prospectCustomerCollectionViaClickConversion", ((_prospectCustomerCollectionViaClickConversion!=null) && (_prospectCustomerCollectionViaClickConversion.Count>0) && !this.MarkedForDeletion)?_prospectCustomerCollectionViaClickConversion:null);
				info.AddValue("_prospectCustomerCollectionViaTempCart", ((_prospectCustomerCollectionViaTempCart!=null) && (_prospectCustomerCollectionViaTempCart.Count>0) && !this.MarkedForDeletion)?_prospectCustomerCollectionViaTempCart:null);
				info.AddValue("_prospectCustomerCollectionViaCallQueueCustomer", ((_prospectCustomerCollectionViaCallQueueCustomer!=null) && (_prospectCustomerCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_prospectCustomerCollectionViaCallQueueCustomer:null);
				info.AddValue("_rapsUploadCollectionViaRaps", ((_rapsUploadCollectionViaRaps!=null) && (_rapsUploadCollectionViaRaps.Count>0) && !this.MarkedForDeletion)?_rapsUploadCollectionViaRaps:null);
				info.AddValue("_relationshipCollectionViaChaseOutbound", ((_relationshipCollectionViaChaseOutbound!=null) && (_relationshipCollectionViaChaseOutbound.Count>0) && !this.MarkedForDeletion)?_relationshipCollectionViaChaseOutbound:null);
				info.AddValue("_relationshipCollectionViaGuardianDetails", ((_relationshipCollectionViaGuardianDetails!=null) && (_relationshipCollectionViaGuardianDetails.Count>0) && !this.MarkedForDeletion)?_relationshipCollectionViaGuardianDetails:null);
				info.AddValue("_resultArchiveUploadCollectionViaResultArchiveUploadLog", ((_resultArchiveUploadCollectionViaResultArchiveUploadLog!=null) && (_resultArchiveUploadCollectionViaResultArchiveUploadLog.Count>0) && !this.MarkedForDeletion)?_resultArchiveUploadCollectionViaResultArchiveUploadLog:null);
				info.AddValue("_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification", ((_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification!=null) && (_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification.Count>0) && !this.MarkedForDeletion)?_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification:null);
				info.AddValue("_suspectConditionUploadCollectionViaSuspectCondition", ((_suspectConditionUploadCollectionViaSuspectCondition!=null) && (_suspectConditionUploadCollectionViaSuspectCondition.Count>0) && !this.MarkedForDeletion)?_suspectConditionUploadCollectionViaSuspectCondition:null);
				info.AddValue("_tagCollectionViaCustomerCallQueueCallAttempt", ((_tagCollectionViaCustomerCallQueueCallAttempt!=null) && (_tagCollectionViaCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_tagCollectionViaCustomerCallQueueCallAttempt:null);
				info.AddValue("_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt", ((_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null) && (_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.Count>0) && !this.MarkedForDeletion)?_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt:null);
				info.AddValue("_tempCartCollectionViaPreQualificationResult", ((_tempCartCollectionViaPreQualificationResult!=null) && (_tempCartCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_tempCartCollectionViaPreQualificationResult:null);
				info.AddValue("_testCollectionViaDependentDisqualifiedTest", ((_testCollectionViaDependentDisqualifiedTest!=null) && (_testCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_testCollectionViaDisqualifiedTest", ((_testCollectionViaDisqualifiedTest!=null) && (_testCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaDisqualifiedTest:null);
				info.AddValue("_testCollectionViaRequiredTest", ((_testCollectionViaRequiredTest!=null) && (_testCollectionViaRequiredTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaRequiredTest:null);
				info.AddValue("_testCollectionViaResultArchiveUploadLog", ((_testCollectionViaResultArchiveUploadLog!=null) && (_testCollectionViaResultArchiveUploadLog.Count>0) && !this.MarkedForDeletion)?_testCollectionViaResultArchiveUploadLog:null);
				info.AddValue("_testCollectionViaCustomerEventTestFinding", ((_testCollectionViaCustomerEventTestFinding!=null) && (_testCollectionViaCustomerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_testCollectionViaCustomerEventTestFinding:null);
				info.AddValue("_activityType", (!this.MarkedForDeletion?_activityType:null));
				info.AddValue("_address", (!this.MarkedForDeletion?_address:null));
				info.AddValue("_lab", (!this.MarkedForDeletion?_lab:null));
				info.AddValue("_language", (!this.MarkedForDeletion?_language:null));
				info.AddValue("_lookup______", (!this.MarkedForDeletion?_lookup______:null));
				info.AddValue("_lookup_____", (!this.MarkedForDeletion?_lookup_____:null));
				info.AddValue("_lookup_______", (!this.MarkedForDeletion?_lookup_______:null));
				info.AddValue("_lookup________", (!this.MarkedForDeletion?_lookup________:null));
				info.AddValue("_lookup____", (!this.MarkedForDeletion?_lookup____:null));
				info.AddValue("_lookup_", (!this.MarkedForDeletion?_lookup_:null));
				info.AddValue("_lookup", (!this.MarkedForDeletion?_lookup:null));
				info.AddValue("_lookup___", (!this.MarkedForDeletion?_lookup___:null));
				info.AddValue("_lookup__", (!this.MarkedForDeletion?_lookup__:null));
				info.AddValue("_notesDetails", (!this.MarkedForDeletion?_notesDetails:null));
				info.AddValue("_role", (!this.MarkedForDeletion?_role:null));
				info.AddValue("_customerCallAttempts", (!this.MarkedForDeletion?_customerCallAttempts:null));
				info.AddValue("_customerLockForCall", (!this.MarkedForDeletion?_customerLockForCall:null));
				info.AddValue("_customerResultPosted", (!this.MarkedForDeletion?_customerResultPosted:null));
				info.AddValue("_customerTrale", (!this.MarkedForDeletion?_customerTrale:null));
				info.AddValue("_organizationRoleUser", (!this.MarkedForDeletion?_organizationRoleUser:null));
			}
			
			// __LLBLGENPRO_USER_CODE_REGION_START GetObjectInfo
			// __LLBLGENPRO_USER_CODE_REGION_END
			base.GetObjectData(info, context);
		}

		/// <summary> Method which will construct a filter (predicate expression) for the unique constraint defined on the fields:
		/// DisplayId .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCDisplayId()
		{
			IPredicateExpression filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(base.Fields[(int)CustomerProfileFieldIndex.DisplayId], null, ComparisonOperator.Equal)); 
			return filter;
		}

		/// <summary>Returns true if the original value for the field with the fieldIndex passed in, read from the persistent storage was NULL, false otherwise.
		/// Should not be used for testing if the current value is NULL, use <see cref="TestCurrentFieldValueForNull"/> for that.</summary>
		/// <param name="fieldIndex">Index of the field to test if that field was NULL in the persistent storage</param>
		/// <returns>true if the field with the passed in index was NULL in the persistent storage, false otherwise</returns>
		public bool TestOriginalFieldValueForNull(CustomerProfileFieldIndex fieldIndex)
		{
			return base.Fields[(int)fieldIndex].IsNull;
		}
		
		/// <summary>Returns true if the current value for the field with the fieldIndex passed in represents null/not defined, false otherwise.
		/// Should not be used for testing if the original value (read from the db) is NULL</summary>
		/// <param name="fieldIndex">Index of the field to test if its currentvalue is null/undefined</param>
		/// <returns>true if the field's value isn't defined yet, false otherwise</returns>
		public bool TestCurrentFieldValueForNull(CustomerProfileFieldIndex fieldIndex)
		{
			return base.CheckIfCurrentFieldValueIsNull((int)fieldIndex);
		}

				
		/// <summary>Gets a list of all the EntityRelation objects the type of this instance has.</summary>
		/// <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
		public override List<IEntityRelation> GetAllRelations()
		{
			return new CustomerProfileRelations().GetAllRelations();
		}
		

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueueCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CallQueueCustomerFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallRoundCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CallRoundCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseOutbound' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseOutbound()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ChaseOutboundFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ClickConversion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoClickConversion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ClickConversionFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CurrentMedication' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCurrentMedication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CurrentMedicationFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerAccountGlocomNumber' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerAccountGlocomNumber()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerAccountGlocomNumberFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerBillingAccount' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerBillingAccount()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerBillingAccountFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerCallQueueCallAttempt' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerCallQueueCallAttemptFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerChaseCampaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerChaseCampaign()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerChaseCampaignFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerChaseChannel' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerChaseChannel()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerChaseChannelFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerChaseProduct' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerChaseProduct()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerChaseProductFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerClinicalQuestionAnswer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerClinicalQuestionAnswerFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerEligibility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerEligibility()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerEligibilityFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerEventTestFinding' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerEventTestFindingFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthInfo' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthInfo()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerHealthInfoFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthInfoArchive' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthInfoArchive()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerHealthInfoArchiveFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerIcdCode' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerIcdCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerIcdCodeFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerOrderHistory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerOrderHistoryFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerPredictedZip' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerPredictedZip()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerPredictedZipFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerPrimaryCarePhysician' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerPrimaryCarePhysician()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerPrimaryCarePhysicianFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfileHistory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileHistoryFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerSurvey' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerSurvey()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerSurveyFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerTag' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerTag()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerTagFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerTargeted' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerTargeted()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerTargetedFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerUnsubscribedSmsNotification' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerUnsubscribedSmsNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerUnsubscribedSmsNotificationFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerWarmTransfer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerWarmTransfer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerWarmTransferFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DependentDisqualifiedTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(DependentDisqualifiedTestFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DirectMail' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDirectMail()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(DirectMailFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DisqualifiedTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(DisqualifiedTestFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomerQuestionAnswer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomerQuestionAnswerFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomerResult' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomerResultFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomersFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPaymentDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPaymentDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventPaymentDetailsFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'FillEventCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(FillEventCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'GuardianDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGuardianDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(GuardianDetailsFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalPartnerCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HospitalPartnerCustomerFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'LanguageBarrierCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLanguageBarrierCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LanguageBarrierCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'MailRoundCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMailRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(MailRoundCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Medication' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMedication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(MedicationFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'MemberUploadLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMemberUploadLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(MemberUploadLogFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'NoShowCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNoShowCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(NoShowCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianInvoiceItem' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PhysicianInvoiceItemFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreAssessmentCustomerCallQueueCallAttempt' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreAssessmentCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PreAssessmentCustomerCallQueueCallAttemptFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationResult' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PreQualificationResultFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ProspectCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ProspectCustomerFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Raps' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRaps()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(RapsFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Referral' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoReferral()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ReferralFields.ReferedCustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RequiredTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRequiredTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(RequiredTestFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ResultArchiveUploadLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoResultArchiveUploadLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ResultArchiveUploadLogFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'SuspectCondition' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSuspectCondition()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(SuspectConditionFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'TempCart' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTempCart()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(TempCartFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Testimonial' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestimonial()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(TestimonialFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'UncontactedCustomerCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUncontactedCustomerCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(UncontactedCustomerCallQueueFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaLanguageBarrierCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaLanguageBarrierCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaUncontactedCustomerCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaUncontactedCustomerCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaMailRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaMailRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaCallRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaCallRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaNoShowCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaNoShowCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaFillEventCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ActivityType' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoActivityTypeCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ActivityTypeCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Address' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddressCollectionViaCustomerPrimaryCarePhysician()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AddressCollectionViaCustomerPrimaryCarePhysician"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Address' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddressCollectionViaCustomerPrimaryCarePhysician_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AddressCollectionViaCustomerPrimaryCarePhysician_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AfaffiliateCampaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfaffiliateCampaignCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AfaffiliateCampaignCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AfaffiliateCampaignMarketingMaterial' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'BillingAccount' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBillingAccountCollectionViaCustomerBillingAccount()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("BillingAccountCollectionViaCustomerBillingAccount"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallQueueCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueueCriteria' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCriteriaCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallQueueCriteriaCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueueCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCustomerCollectionViaCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Calls' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallsCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallsCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Calls' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallsCollectionViaCustomerAccountGlocomNumber()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallsCollectionViaCustomerAccountGlocomNumber"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Calls' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallsCollectionViaCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallsCollectionViaCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Calls' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallUploadCollectionViaDirectMail()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallUploadCollectionViaDirectMail"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Campaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCampaignCollectionViaDirectMail()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CampaignCollectionViaDirectMail"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Campaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCampaignCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CampaignCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Campaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCampaignCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CampaignCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChargeCard' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChargeCardCollectionViaTempCart()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChargeCardCollectionViaTempCart"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseCampaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseCampaignCollectionViaCustomerChaseCampaign()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseCampaignCollectionViaCustomerChaseCampaign"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseChannelLevel' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseChannelLevelCollectionViaCustomerChaseChannel()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseChannelLevelCollectionViaCustomerChaseChannel"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseGroup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseGroupCollectionViaChaseOutbound()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseGroupCollectionViaChaseOutbound"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseOutbound' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseOutboundCollectionViaCustomerChaseProduct()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseOutboundCollectionViaCustomerChaseProduct"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseOutbound' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseOutboundCollectionViaCustomerChaseChannel()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseOutboundCollectionViaCustomerChaseChannel"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseOutbound' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseOutboundCollectionViaCustomerChaseCampaign()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseOutboundCollectionViaCustomerChaseCampaign"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ChaseProduct' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoChaseProductCollectionViaCustomerChaseProduct()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ChaseProductCollectionViaCustomerChaseProduct"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ClickLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoClickLogCollectionViaClickConversion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ClickLogCollectionViaClickConversion"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CorporateUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCorporateUploadCollectionViaMemberUploadLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CorporateUploadCollectionViaMemberUploadLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CorporateUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCorporateUploadCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CorporateUploadCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthQuestions' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthQuestions' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthQuestionsCollectionViaCustomerHealthInfo()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerHealthQuestionsCollectionViaCustomerHealthInfo"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthQuestions' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfileHistory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileHistoryCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileHistoryCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerRegistrationNotes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerRegistrationNotesCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerRegistrationNotesCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerSurveyQuestionAnswer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerSurveyQuestionAnswerCollectionViaCustomerSurvey()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DirectMailType' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDirectMailTypeCollectionViaDirectMail()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("DirectMailTypeCollectionViaDirectMail"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Eligibility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEligibilityCollectionViaTempCart()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EligibilityCollectionViaTempCart"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAppointment' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAppointmentCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventAppointmentCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCustomerHealthInfoArchive()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCustomerHealthInfoArchive"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaClickConversion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaClickConversion"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCustomerHealthInfo()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCustomerHealthInfo"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPackageDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPackageDetailsCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventPackageDetailsCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPackageDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPackageDetailsCollectionViaEventPaymentDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventPackageDetailsCollectionViaEventPaymentDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaHospitalPartnerCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaCustomerEventTestFinding"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Events' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventsCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventsCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventTestCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventTestCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'File' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFileCollectionViaTestimonial()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("FileCollectionViaTestimonial"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'GcNotGivenReason' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGcNotGivenReasonCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("GcNotGivenReasonCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HafTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHafTemplateCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HafTemplateCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalFacility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalFacilityCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HospitalFacilityCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'IcdCodes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIcdCodesCollectionViaCustomerIcdCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("IcdCodesCollectionViaCustomerIcdCode"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Language' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLanguageCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LanguageCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCallRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCallRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaNoShowCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaNoShowCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaMailRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaMailRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaChaseOutbound()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaChaseOutbound"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaLanguageBarrierCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaLanguageBarrierCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult___"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerProfileHistory__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerProfileHistory__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerProfileHistory___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerProfileHistory___"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerProfileHistory_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerProfileHistory_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaUncontactedCustomerCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaUncontactedCustomerCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerPrimaryCarePhysician()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerPrimaryCarePhysician"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerProfileHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerProfileHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult________()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult________"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerUnsubscribedSmsNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerUnsubscribedSmsNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaFillEventCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomers_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomers_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaProspectCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaProspectCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Ndc' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNdcCollectionViaCurrentMedication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("NdcCollectionViaCurrentMedication"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'NotesDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNotesDetailsCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("NotesDetailsCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaGuardianDetails_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaGuardianDetails_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaGuardianDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaGuardianDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaUncontactedCustomerCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaReferral()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaReferral"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaFillEventCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaRequiredTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaRequiredTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaProspectCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaProspectCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaMailRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaMailRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaNoShowCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaNoShowCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaMedication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaMedication"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallRoundCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallRoundCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaMedication_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaMedication_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaLanguageBarrierCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaLanguageBarrierCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerHealthInfo()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerHealthInfo"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerHealthInfoArchive()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerHealthInfoArchive"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaDirectMail()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaDirectMail"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaDisqualifiedTest_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaDisqualifiedTest_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerEligibility_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerEligibility_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerIcdCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerIcdCode"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerProfileHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerProfileHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerTag()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerTag"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerTag_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerTag_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerWarmTransfer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerWarmTransfer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerWarmTransfer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerWarmTransfer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerTargeted()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerTargeted"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerTargeted_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerTargeted_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerEligibility()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerEligibility"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult___"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomers_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomers_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCurrentMedication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCurrentMedication"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult________()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult________"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianEvaluation' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianEvaluationCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianEvaluationCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianInvoice' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianInvoiceCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianInvoiceCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianMaster' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianMasterCollectionViaCustomerPrimaryCarePhysician()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianMasterCollectionViaCustomerPrimaryCarePhysician"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationQuestion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationQuestionCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationQuestion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationQuestionCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PreQualificationQuestionCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ProspectCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectCustomerCollectionViaClickConversion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectCustomerCollectionViaClickConversion"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ProspectCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectCustomerCollectionViaTempCart()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectCustomerCollectionViaTempCart"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ProspectCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectCustomerCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectCustomerCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RapsUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRapsUploadCollectionViaRaps()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RapsUploadCollectionViaRaps"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Relationship' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRelationshipCollectionViaChaseOutbound()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RelationshipCollectionViaChaseOutbound"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Relationship' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRelationshipCollectionViaGuardianDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RelationshipCollectionViaGuardianDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ResultArchiveUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoResultArchiveUploadCollectionViaResultArchiveUploadLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ResultArchiveUploadCollectionViaResultArchiveUploadLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'SmsReceived' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSmsReceivedCollectionViaCustomerUnsubscribedSmsNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'SuspectConditionUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSuspectConditionUploadCollectionViaSuspectCondition()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("SuspectConditionUploadCollectionViaSuspectCondition"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Tag' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTagCollectionViaCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TagCollectionViaCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Tag' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTagCollectionViaPreAssessmentCustomerCallQueueCallAttempt()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'TempCart' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTempCartCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TempCartCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaRequiredTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaRequiredTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaResultArchiveUploadLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaResultArchiveUploadLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaCustomerEventTestFinding"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerProfileFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId, "CustomerProfileEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'ActivityType' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoActivityType()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ActivityTypeFields.Id, null, ComparisonOperator.Equal, this.ActivityId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Address' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddress()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AddressFields.AddressId, null, ComparisonOperator.Equal, this.BillingAddressId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lab' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLab()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LabFields.Id, null, ComparisonOperator.Equal, this.LabId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Language' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLanguage()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LanguageFields.Id, null, ComparisonOperator.Equal, this.LanguageId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.PreferredContactType));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup_____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.PhoneOfficeConsentId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup_______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.DoNotContactReasonId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup________()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.ProductTypeId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.PhoneHomeConsentId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.DoNotContactUpdateSource));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.DoNotContactTypeId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.PhoneCellConsentId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.MemberUploadSourceId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'NotesDetails' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNotesDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(NotesDetailsFields.NoteId, null, ComparisonOperator.Equal, this.DoNotContactReasonNotesId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Role' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRole()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(RoleFields.RoleId, null, ComparisonOperator.Equal, this.AddedByRoleId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'CustomerCallAttempts' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerCallAttempts()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerCallAttemptsFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'CustomerLockForCall' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerLockForCall()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerLockForCallFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'CustomerResultPosted' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerResultPosted()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerResultPostedFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'CustomerTrale' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerTrale()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerTraleFields.CustomerId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.CustomerId));
			return bucket;
		}
	
		
		/// <summary>Creates entity fields object for this entity. Used in constructor to setup this entity in a polymorphic scenario.</summary>
		protected virtual IEntityFields2 CreateFields()
		{
			return EntityFieldsFactory.CreateEntityFieldsObject(Falcon.Data.EntityType.CustomerProfileEntity);
		}

		/// <summary>
		/// Creates the ITypeDefaultValue instance used to provide default values for value types which aren't of type nullable(of T)
		/// </summary>
		/// <returns></returns>
		protected override ITypeDefaultValue CreateTypeDefaultValueProvider()
		{
			return new TypeDefaultValue();
		}

		/// <summary>Creates a new instance of the factory related to this entity</summary>
		protected override IEntityFactory2 CreateEntityFactory()
		{
			return EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory));
		}
#if !CF
		/// <summary>Adds the member collections to the collections queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void AddToMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue) 
		{
			base.AddToMemberEntityCollectionsQueue(collectionsQueue);
			collectionsQueue.Enqueue(this._callQueueCustomer);
			collectionsQueue.Enqueue(this._callRoundCallQueue);
			collectionsQueue.Enqueue(this._chaseOutbound);
			collectionsQueue.Enqueue(this._clickConversion);
			collectionsQueue.Enqueue(this._currentMedication);
			collectionsQueue.Enqueue(this._customerAccountGlocomNumber);
			collectionsQueue.Enqueue(this._customerBillingAccount);
			collectionsQueue.Enqueue(this._customerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._customerChaseCampaign);
			collectionsQueue.Enqueue(this._customerChaseChannel);
			collectionsQueue.Enqueue(this._customerChaseProduct);
			collectionsQueue.Enqueue(this._customerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._customerEligibility);
			collectionsQueue.Enqueue(this._customerEventTestFinding);
			collectionsQueue.Enqueue(this._customerHealthInfo);
			collectionsQueue.Enqueue(this._customerHealthInfoArchive);
			collectionsQueue.Enqueue(this._customerIcdCode);
			collectionsQueue.Enqueue(this._customerOrderHistory);
			collectionsQueue.Enqueue(this._customerPredictedZip);
			collectionsQueue.Enqueue(this._customerPrimaryCarePhysician);
			collectionsQueue.Enqueue(this._customerProfileHistory);
			collectionsQueue.Enqueue(this._customerSurvey);
			collectionsQueue.Enqueue(this._customerTag);
			collectionsQueue.Enqueue(this._customerTargeted);
			collectionsQueue.Enqueue(this._customerUnsubscribedSmsNotification);
			collectionsQueue.Enqueue(this._customerWarmTransfer);
			collectionsQueue.Enqueue(this._dependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._directMail);
			collectionsQueue.Enqueue(this._disqualifiedTest);
			collectionsQueue.Enqueue(this._eventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._eventCustomerResult);
			collectionsQueue.Enqueue(this._eventCustomers);
			collectionsQueue.Enqueue(this._eventPaymentDetails);
			collectionsQueue.Enqueue(this._fillEventCallQueue);
			collectionsQueue.Enqueue(this._guardianDetails);
			collectionsQueue.Enqueue(this._hospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._languageBarrierCallQueue);
			collectionsQueue.Enqueue(this._mailRoundCallQueue);
			collectionsQueue.Enqueue(this._medication);
			collectionsQueue.Enqueue(this._memberUploadLog);
			collectionsQueue.Enqueue(this._noShowCallQueue);
			collectionsQueue.Enqueue(this._physicianInvoiceItem);
			collectionsQueue.Enqueue(this._preAssessmentCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._preQualificationResult);
			collectionsQueue.Enqueue(this._prospectCustomer);
			collectionsQueue.Enqueue(this._raps);
			collectionsQueue.Enqueue(this._referral);
			collectionsQueue.Enqueue(this._requiredTest);
			collectionsQueue.Enqueue(this._resultArchiveUploadLog);
			collectionsQueue.Enqueue(this._suspectCondition);
			collectionsQueue.Enqueue(this._tempCart);
			collectionsQueue.Enqueue(this._testimonial);
			collectionsQueue.Enqueue(this._uncontactedCustomerCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaLanguageBarrierCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaUncontactedCustomerCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaMailRoundCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaCallRoundCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaNoShowCallQueue);
			collectionsQueue.Enqueue(this._accountCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._accountCollectionViaFillEventCallQueue);
			collectionsQueue.Enqueue(this._activityTypeCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._addressCollectionViaCustomerPrimaryCarePhysician);
			collectionsQueue.Enqueue(this._addressCollectionViaCustomerPrimaryCarePhysician_);
			collectionsQueue.Enqueue(this._afaffiliateCampaignCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer);
			collectionsQueue.Enqueue(this._billingAccountCollectionViaCustomerBillingAccount);
			collectionsQueue.Enqueue(this._callQueueCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._callQueueCriteriaCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._callQueueCustomerCollectionViaCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._callsCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._callsCollectionViaCustomerAccountGlocomNumber);
			collectionsQueue.Enqueue(this._callsCollectionViaCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._callUploadCollectionViaDirectMail);
			collectionsQueue.Enqueue(this._campaignCollectionViaDirectMail);
			collectionsQueue.Enqueue(this._campaignCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._campaignCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._chargeCardCollectionViaTempCart);
			collectionsQueue.Enqueue(this._chaseCampaignCollectionViaCustomerChaseCampaign);
			collectionsQueue.Enqueue(this._chaseChannelLevelCollectionViaCustomerChaseChannel);
			collectionsQueue.Enqueue(this._chaseGroupCollectionViaChaseOutbound);
			collectionsQueue.Enqueue(this._chaseOutboundCollectionViaCustomerChaseProduct);
			collectionsQueue.Enqueue(this._chaseOutboundCollectionViaCustomerChaseChannel);
			collectionsQueue.Enqueue(this._chaseOutboundCollectionViaCustomerChaseCampaign);
			collectionsQueue.Enqueue(this._chaseProductCollectionViaCustomerChaseProduct);
			collectionsQueue.Enqueue(this._clickLogCollectionViaClickConversion);
			collectionsQueue.Enqueue(this._corporateUploadCollectionViaMemberUploadLog);
			collectionsQueue.Enqueue(this._corporateUploadCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._customerHealthQuestionsCollectionViaCustomerHealthInfo);
			collectionsQueue.Enqueue(this._customerHealthQuestionsCollectionViaCustomerHealthInfoArchive);
			collectionsQueue.Enqueue(this._customerProfileHistoryCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._customerRegistrationNotesCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._customerSurveyQuestionAnswerCollectionViaCustomerSurvey);
			collectionsQueue.Enqueue(this._directMailTypeCollectionViaDirectMail);
			collectionsQueue.Enqueue(this._eligibilityCollectionViaTempCart);
			collectionsQueue.Enqueue(this._eventAppointmentCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCustomerHealthInfoArchive);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaClickConversion);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCustomerHealthInfo);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._eventPackageDetailsCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._eventPackageDetailsCollectionViaEventPaymentDetails);
			collectionsQueue.Enqueue(this._eventsCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._eventsCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._eventsCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._eventsCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._eventsCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventsCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._eventsCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventsCollectionViaHospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._eventsCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._eventsCollectionViaCustomerEventTestFinding);
			collectionsQueue.Enqueue(this._eventsCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._eventsCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._eventTestCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._fileCollectionViaTestimonial);
			collectionsQueue.Enqueue(this._gcNotGivenReasonCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._hospitalFacilityCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._icdCodesCollectionViaCustomerIcdCode);
			collectionsQueue.Enqueue(this._languageCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._lookupCollectionViaCallRoundCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult______);
			collectionsQueue.Enqueue(this._lookupCollectionViaNoShowCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_______);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._lookupCollectionViaMailRoundCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult__);
			collectionsQueue.Enqueue(this._lookupCollectionViaChaseOutbound);
			collectionsQueue.Enqueue(this._lookupCollectionViaLanguageBarrierCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_____);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult____);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult___);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerProfileHistory__);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerProfileHistory___);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerProfileHistory_);
			collectionsQueue.Enqueue(this._lookupCollectionViaUncontactedCustomerCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerPrimaryCarePhysician);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerProfileHistory);
			collectionsQueue.Enqueue(this._lookupCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult________);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerUnsubscribedSmsNotification);
			collectionsQueue.Enqueue(this._lookupCollectionViaFillEventCallQueue);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomers_);
			collectionsQueue.Enqueue(this._lookupCollectionViaProspectCustomer);
			collectionsQueue.Enqueue(this._ndcCollectionViaCurrentMedication);
			collectionsQueue.Enqueue(this._notesDetailsCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaGuardianDetails_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaGuardianDetails);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaUncontactedCustomerCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaReferral);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaFillEventCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaRequiredTest);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaProspectCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaMailRoundCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaNoShowCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaMedication);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallRoundCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaMedication_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaLanguageBarrierCallQueue);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerHealthInfo);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerHealthInfoArchive);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaDirectMail);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaDisqualifiedTest_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerEligibility_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerIcdCode);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerProfileHistory);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerTag);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerTag_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerWarmTransfer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerWarmTransfer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerTargeted);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerTargeted_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerEligibility);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult___);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomers_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult____);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult______);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_____);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCurrentMedication);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_______);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult________);
			collectionsQueue.Enqueue(this._physicianEvaluationCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._physicianInvoiceCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._physicianMasterCollectionViaCustomerPrimaryCarePhysician);
			collectionsQueue.Enqueue(this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._preQualificationQuestionCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._prospectCustomerCollectionViaClickConversion);
			collectionsQueue.Enqueue(this._prospectCustomerCollectionViaTempCart);
			collectionsQueue.Enqueue(this._prospectCustomerCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._rapsUploadCollectionViaRaps);
			collectionsQueue.Enqueue(this._relationshipCollectionViaChaseOutbound);
			collectionsQueue.Enqueue(this._relationshipCollectionViaGuardianDetails);
			collectionsQueue.Enqueue(this._resultArchiveUploadCollectionViaResultArchiveUploadLog);
			collectionsQueue.Enqueue(this._smsReceivedCollectionViaCustomerUnsubscribedSmsNotification);
			collectionsQueue.Enqueue(this._suspectConditionUploadCollectionViaSuspectCondition);
			collectionsQueue.Enqueue(this._tagCollectionViaCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			collectionsQueue.Enqueue(this._tempCartCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._testCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._testCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._testCollectionViaRequiredTest);
			collectionsQueue.Enqueue(this._testCollectionViaResultArchiveUploadLog);
			collectionsQueue.Enqueue(this._testCollectionViaCustomerEventTestFinding);
		}
		
		/// <summary>Gets the member collections queue from the queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void GetFromMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue)
		{
			base.GetFromMemberEntityCollectionsQueue(collectionsQueue);
			this._callQueueCustomer = (EntityCollection<CallQueueCustomerEntity>) collectionsQueue.Dequeue();
			this._callRoundCallQueue = (EntityCollection<CallRoundCallQueueEntity>) collectionsQueue.Dequeue();
			this._chaseOutbound = (EntityCollection<ChaseOutboundEntity>) collectionsQueue.Dequeue();
			this._clickConversion = (EntityCollection<ClickConversionEntity>) collectionsQueue.Dequeue();
			this._currentMedication = (EntityCollection<CurrentMedicationEntity>) collectionsQueue.Dequeue();
			this._customerAccountGlocomNumber = (EntityCollection<CustomerAccountGlocomNumberEntity>) collectionsQueue.Dequeue();
			this._customerBillingAccount = (EntityCollection<CustomerBillingAccountEntity>) collectionsQueue.Dequeue();
			this._customerCallQueueCallAttempt = (EntityCollection<CustomerCallQueueCallAttemptEntity>) collectionsQueue.Dequeue();
			this._customerChaseCampaign = (EntityCollection<CustomerChaseCampaignEntity>) collectionsQueue.Dequeue();
			this._customerChaseChannel = (EntityCollection<CustomerChaseChannelEntity>) collectionsQueue.Dequeue();
			this._customerChaseProduct = (EntityCollection<CustomerChaseProductEntity>) collectionsQueue.Dequeue();
			this._customerClinicalQuestionAnswer = (EntityCollection<CustomerClinicalQuestionAnswerEntity>) collectionsQueue.Dequeue();
			this._customerEligibility = (EntityCollection<CustomerEligibilityEntity>) collectionsQueue.Dequeue();
			this._customerEventTestFinding = (EntityCollection<CustomerEventTestFindingEntity>) collectionsQueue.Dequeue();
			this._customerHealthInfo = (EntityCollection<CustomerHealthInfoEntity>) collectionsQueue.Dequeue();
			this._customerHealthInfoArchive = (EntityCollection<CustomerHealthInfoArchiveEntity>) collectionsQueue.Dequeue();
			this._customerIcdCode = (EntityCollection<CustomerIcdCodeEntity>) collectionsQueue.Dequeue();
			this._customerOrderHistory = (EntityCollection<CustomerOrderHistoryEntity>) collectionsQueue.Dequeue();
			this._customerPredictedZip = (EntityCollection<CustomerPredictedZipEntity>) collectionsQueue.Dequeue();
			this._customerPrimaryCarePhysician = (EntityCollection<CustomerPrimaryCarePhysicianEntity>) collectionsQueue.Dequeue();
			this._customerProfileHistory = (EntityCollection<CustomerProfileHistoryEntity>) collectionsQueue.Dequeue();
			this._customerSurvey = (EntityCollection<CustomerSurveyEntity>) collectionsQueue.Dequeue();
			this._customerTag = (EntityCollection<CustomerTagEntity>) collectionsQueue.Dequeue();
			this._customerTargeted = (EntityCollection<CustomerTargetedEntity>) collectionsQueue.Dequeue();
			this._customerUnsubscribedSmsNotification = (EntityCollection<CustomerUnsubscribedSmsNotificationEntity>) collectionsQueue.Dequeue();
			this._customerWarmTransfer = (EntityCollection<CustomerWarmTransferEntity>) collectionsQueue.Dequeue();
			this._dependentDisqualifiedTest = (EntityCollection<DependentDisqualifiedTestEntity>) collectionsQueue.Dequeue();
			this._directMail = (EntityCollection<DirectMailEntity>) collectionsQueue.Dequeue();
			this._disqualifiedTest = (EntityCollection<DisqualifiedTestEntity>) collectionsQueue.Dequeue();
			this._eventCustomerQuestionAnswer = (EntityCollection<EventCustomerQuestionAnswerEntity>) collectionsQueue.Dequeue();
			this._eventCustomerResult = (EntityCollection<EventCustomerResultEntity>) collectionsQueue.Dequeue();
			this._eventCustomers = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventPaymentDetails = (EntityCollection<EventPaymentDetailsEntity>) collectionsQueue.Dequeue();
			this._fillEventCallQueue = (EntityCollection<FillEventCallQueueEntity>) collectionsQueue.Dequeue();
			this._guardianDetails = (EntityCollection<GuardianDetailsEntity>) collectionsQueue.Dequeue();
			this._hospitalPartnerCustomer = (EntityCollection<HospitalPartnerCustomerEntity>) collectionsQueue.Dequeue();
			this._languageBarrierCallQueue = (EntityCollection<LanguageBarrierCallQueueEntity>) collectionsQueue.Dequeue();
			this._mailRoundCallQueue = (EntityCollection<MailRoundCallQueueEntity>) collectionsQueue.Dequeue();
			this._medication = (EntityCollection<MedicationEntity>) collectionsQueue.Dequeue();
			this._memberUploadLog = (EntityCollection<MemberUploadLogEntity>) collectionsQueue.Dequeue();
			this._noShowCallQueue = (EntityCollection<NoShowCallQueueEntity>) collectionsQueue.Dequeue();
			this._physicianInvoiceItem = (EntityCollection<PhysicianInvoiceItemEntity>) collectionsQueue.Dequeue();
			this._preAssessmentCustomerCallQueueCallAttempt = (EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>) collectionsQueue.Dequeue();
			this._preQualificationResult = (EntityCollection<PreQualificationResultEntity>) collectionsQueue.Dequeue();
			this._prospectCustomer = (EntityCollection<ProspectCustomerEntity>) collectionsQueue.Dequeue();
			this._raps = (EntityCollection<RapsEntity>) collectionsQueue.Dequeue();
			this._referral = (EntityCollection<ReferralEntity>) collectionsQueue.Dequeue();
			this._requiredTest = (EntityCollection<RequiredTestEntity>) collectionsQueue.Dequeue();
			this._resultArchiveUploadLog = (EntityCollection<ResultArchiveUploadLogEntity>) collectionsQueue.Dequeue();
			this._suspectCondition = (EntityCollection<SuspectConditionEntity>) collectionsQueue.Dequeue();
			this._tempCart = (EntityCollection<TempCartEntity>) collectionsQueue.Dequeue();
			this._testimonial = (EntityCollection<TestimonialEntity>) collectionsQueue.Dequeue();
			this._uncontactedCustomerCallQueue = (EntityCollection<UncontactedCustomerCallQueueEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaLanguageBarrierCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaUncontactedCustomerCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaMailRoundCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaCallRoundCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaNoShowCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaCallQueueCustomer = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaFillEventCallQueue = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._activityTypeCollectionViaCallQueueCustomer = (EntityCollection<ActivityTypeEntity>) collectionsQueue.Dequeue();
			this._addressCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<AddressEntity>) collectionsQueue.Dequeue();
			this._addressCollectionViaCustomerPrimaryCarePhysician_ = (EntityCollection<AddressEntity>) collectionsQueue.Dequeue();
			this._afaffiliateCampaignCollectionViaEventCustomers = (EntityCollection<AfaffiliateCampaignEntity>) collectionsQueue.Dequeue();
			this._afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer = (EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>) collectionsQueue.Dequeue();
			this._billingAccountCollectionViaCustomerBillingAccount = (EntityCollection<BillingAccountEntity>) collectionsQueue.Dequeue();
			this._callQueueCollectionViaCallQueueCustomer = (EntityCollection<CallQueueEntity>) collectionsQueue.Dequeue();
			this._callQueueCriteriaCollectionViaCallQueueCustomer = (EntityCollection<CallQueueCriteriaEntity>) collectionsQueue.Dequeue();
			this._callQueueCustomerCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<CallQueueCustomerEntity>) collectionsQueue.Dequeue();
			this._callsCollectionViaPreQualificationResult = (EntityCollection<CallsEntity>) collectionsQueue.Dequeue();
			this._callsCollectionViaCustomerAccountGlocomNumber = (EntityCollection<CallsEntity>) collectionsQueue.Dequeue();
			this._callsCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<CallsEntity>) collectionsQueue.Dequeue();
			this._callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<CallsEntity>) collectionsQueue.Dequeue();
			this._callUploadCollectionViaDirectMail = (EntityCollection<CallUploadEntity>) collectionsQueue.Dequeue();
			this._campaignCollectionViaDirectMail = (EntityCollection<CampaignEntity>) collectionsQueue.Dequeue();
			this._campaignCollectionViaEventCustomers = (EntityCollection<CampaignEntity>) collectionsQueue.Dequeue();
			this._campaignCollectionViaCallQueueCustomer = (EntityCollection<CampaignEntity>) collectionsQueue.Dequeue();
			this._chargeCardCollectionViaTempCart = (EntityCollection<ChargeCardEntity>) collectionsQueue.Dequeue();
			this._chaseCampaignCollectionViaCustomerChaseCampaign = (EntityCollection<ChaseCampaignEntity>) collectionsQueue.Dequeue();
			this._chaseChannelLevelCollectionViaCustomerChaseChannel = (EntityCollection<ChaseChannelLevelEntity>) collectionsQueue.Dequeue();
			this._chaseGroupCollectionViaChaseOutbound = (EntityCollection<ChaseGroupEntity>) collectionsQueue.Dequeue();
			this._chaseOutboundCollectionViaCustomerChaseProduct = (EntityCollection<ChaseOutboundEntity>) collectionsQueue.Dequeue();
			this._chaseOutboundCollectionViaCustomerChaseChannel = (EntityCollection<ChaseOutboundEntity>) collectionsQueue.Dequeue();
			this._chaseOutboundCollectionViaCustomerChaseCampaign = (EntityCollection<ChaseOutboundEntity>) collectionsQueue.Dequeue();
			this._chaseProductCollectionViaCustomerChaseProduct = (EntityCollection<ChaseProductEntity>) collectionsQueue.Dequeue();
			this._clickLogCollectionViaClickConversion = (EntityCollection<ClickLogEntity>) collectionsQueue.Dequeue();
			this._corporateUploadCollectionViaMemberUploadLog = (EntityCollection<CorporateUploadEntity>) collectionsQueue.Dequeue();
			this._corporateUploadCollectionViaCustomerOrderHistory = (EntityCollection<CorporateUploadEntity>) collectionsQueue.Dequeue();
			this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerHealthQuestionsEntity>) collectionsQueue.Dequeue();
			this._customerHealthQuestionsCollectionViaCustomerHealthInfo = (EntityCollection<CustomerHealthQuestionsEntity>) collectionsQueue.Dequeue();
			this._customerHealthQuestionsCollectionViaCustomerHealthInfoArchive = (EntityCollection<CustomerHealthQuestionsEntity>) collectionsQueue.Dequeue();
			this._customerProfileHistoryCollectionViaEventCustomers = (EntityCollection<CustomerProfileHistoryEntity>) collectionsQueue.Dequeue();
			this._customerRegistrationNotesCollectionViaEventCustomers = (EntityCollection<CustomerRegistrationNotesEntity>) collectionsQueue.Dequeue();
			this._customerSurveyQuestionAnswerCollectionViaCustomerSurvey = (EntityCollection<CustomerSurveyQuestionAnswerEntity>) collectionsQueue.Dequeue();
			this._directMailTypeCollectionViaDirectMail = (EntityCollection<DirectMailTypeEntity>) collectionsQueue.Dequeue();
			this._eligibilityCollectionViaTempCart = (EntityCollection<EligibilityEntity>) collectionsQueue.Dequeue();
			this._eventAppointmentCollectionViaEventCustomers = (EntityCollection<EventAppointmentEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCustomerHealthInfoArchive = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCallQueueCustomer = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaDependentDisqualifiedTest = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCustomerOrderHistory = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaDisqualifiedTest = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaClickConversion = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCustomerHealthInfo = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventPackageDetailsCollectionViaCustomerOrderHistory = (EntityCollection<EventPackageDetailsEntity>) collectionsQueue.Dequeue();
			this._eventPackageDetailsCollectionViaEventPaymentDetails = (EntityCollection<EventPackageDetailsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaEventCustomerResult = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaEventCustomers = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaPhysicianInvoiceItem = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaDisqualifiedTest = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaPreQualificationResult = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaDependentDisqualifiedTest = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaHospitalPartnerCustomer = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaCallQueueCustomer = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaCustomerEventTestFinding = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaCustomerOrderHistory = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<EventsEntity>) collectionsQueue.Dequeue();
			this._eventTestCollectionViaCustomerOrderHistory = (EntityCollection<EventTestEntity>) collectionsQueue.Dequeue();
			this._fileCollectionViaTestimonial = (EntityCollection<FileEntity>) collectionsQueue.Dequeue();
			this._gcNotGivenReasonCollectionViaEventCustomers = (EntityCollection<GcNotGivenReasonEntity>) collectionsQueue.Dequeue();
			this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<HafTemplateEntity>) collectionsQueue.Dequeue();
			this._hospitalFacilityCollectionViaEventCustomers = (EntityCollection<HospitalFacilityEntity>) collectionsQueue.Dequeue();
			this._icdCodesCollectionViaCustomerIcdCode = (EntityCollection<IcdCodesEntity>) collectionsQueue.Dequeue();
			this._languageCollectionViaCallQueueCustomer = (EntityCollection<LanguageEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCallRoundCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult______ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaNoShowCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_______ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomerResult = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaMailRoundCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult__ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaChaseOutbound = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaLanguageBarrierCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_____ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult____ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult___ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerProfileHistory__ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerProfileHistory___ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerOrderHistory = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerProfileHistory_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaUncontactedCustomerCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerProfileHistory = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCallQueueCustomer = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomers = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult________ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerUnsubscribedSmsNotification = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaFillEventCallQueue = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomers_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaProspectCustomer = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._ndcCollectionViaCurrentMedication = (EntityCollection<NdcEntity>) collectionsQueue.Dequeue();
			this._notesDetailsCollectionViaCallQueueCustomer = (EntityCollection<NotesDetailsEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaGuardianDetails_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaGuardianDetails = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaUncontactedCustomerCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaReferral = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaFillEventCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaRequiredTest = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaProspectCustomer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaMailRoundCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaNoShowCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaMedication = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallRoundCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaMedication_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaLanguageBarrierCallQueue = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerHealthInfo = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaDisqualifiedTest = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerHealthInfoArchive = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaDirectMail = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaDisqualifiedTest_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerEligibility_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerIcdCode = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerProfileHistory = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerTag = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerTag_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerWarmTransfer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerWarmTransfer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerTargeted = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerTargeted_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerEligibility = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult___ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomers = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomers_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult____ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult______ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_____ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCurrentMedication = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_______ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult________ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._physicianEvaluationCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianEvaluationEntity>) collectionsQueue.Dequeue();
			this._physicianInvoiceCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianInvoiceEntity>) collectionsQueue.Dequeue();
			this._physicianMasterCollectionViaCustomerPrimaryCarePhysician = (EntityCollection<PhysicianMasterEntity>) collectionsQueue.Dequeue();
			this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = (EntityCollection<PreQualificationQuestionEntity>) collectionsQueue.Dequeue();
			this._preQualificationQuestionCollectionViaDisqualifiedTest = (EntityCollection<PreQualificationQuestionEntity>) collectionsQueue.Dequeue();
			this._prospectCustomerCollectionViaClickConversion = (EntityCollection<ProspectCustomerEntity>) collectionsQueue.Dequeue();
			this._prospectCustomerCollectionViaTempCart = (EntityCollection<ProspectCustomerEntity>) collectionsQueue.Dequeue();
			this._prospectCustomerCollectionViaCallQueueCustomer = (EntityCollection<ProspectCustomerEntity>) collectionsQueue.Dequeue();
			this._rapsUploadCollectionViaRaps = (EntityCollection<RapsUploadEntity>) collectionsQueue.Dequeue();
			this._relationshipCollectionViaChaseOutbound = (EntityCollection<RelationshipEntity>) collectionsQueue.Dequeue();
			this._relationshipCollectionViaGuardianDetails = (EntityCollection<RelationshipEntity>) collectionsQueue.Dequeue();
			this._resultArchiveUploadCollectionViaResultArchiveUploadLog = (EntityCollection<ResultArchiveUploadEntity>) collectionsQueue.Dequeue();
			this._smsReceivedCollectionViaCustomerUnsubscribedSmsNotification = (EntityCollection<SmsReceivedEntity>) collectionsQueue.Dequeue();
			this._suspectConditionUploadCollectionViaSuspectCondition = (EntityCollection<SuspectConditionUploadEntity>) collectionsQueue.Dequeue();
			this._tagCollectionViaCustomerCallQueueCallAttempt = (EntityCollection<TagEntity>) collectionsQueue.Dequeue();
			this._tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt = (EntityCollection<TagEntity>) collectionsQueue.Dequeue();
			this._tempCartCollectionViaPreQualificationResult = (EntityCollection<TempCartEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaDependentDisqualifiedTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaDisqualifiedTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaRequiredTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaResultArchiveUploadLog = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaCustomerEventTestFinding = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
		}
		
		/// <summary>Determines whether the entity has populated member collections</summary>
		/// <returns>true if the entity has populated member collections.</returns>
		protected override bool HasPopulatedMemberEntityCollections()
		{
			if (this._callQueueCustomer != null)
			{
				return true;
			}
			if (this._callRoundCallQueue != null)
			{
				return true;
			}
			if (this._chaseOutbound != null)
			{
				return true;
			}
			if (this._clickConversion != null)
			{
				return true;
			}
			if (this._currentMedication != null)
			{
				return true;
			}
			if (this._customerAccountGlocomNumber != null)
			{
				return true;
			}
			if (this._customerBillingAccount != null)
			{
				return true;
			}
			if (this._customerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._customerChaseCampaign != null)
			{
				return true;
			}
			if (this._customerChaseChannel != null)
			{
				return true;
			}
			if (this._customerChaseProduct != null)
			{
				return true;
			}
			if (this._customerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerEligibility != null)
			{
				return true;
			}
			if (this._customerEventTestFinding != null)
			{
				return true;
			}
			if (this._customerHealthInfo != null)
			{
				return true;
			}
			if (this._customerHealthInfoArchive != null)
			{
				return true;
			}
			if (this._customerIcdCode != null)
			{
				return true;
			}
			if (this._customerOrderHistory != null)
			{
				return true;
			}
			if (this._customerPredictedZip != null)
			{
				return true;
			}
			if (this._customerPrimaryCarePhysician != null)
			{
				return true;
			}
			if (this._customerProfileHistory != null)
			{
				return true;
			}
			if (this._customerSurvey != null)
			{
				return true;
			}
			if (this._customerTag != null)
			{
				return true;
			}
			if (this._customerTargeted != null)
			{
				return true;
			}
			if (this._customerUnsubscribedSmsNotification != null)
			{
				return true;
			}
			if (this._customerWarmTransfer != null)
			{
				return true;
			}
			if (this._dependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._directMail != null)
			{
				return true;
			}
			if (this._disqualifiedTest != null)
			{
				return true;
			}
			if (this._eventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventCustomerResult != null)
			{
				return true;
			}
			if (this._eventCustomers != null)
			{
				return true;
			}
			if (this._eventPaymentDetails != null)
			{
				return true;
			}
			if (this._fillEventCallQueue != null)
			{
				return true;
			}
			if (this._guardianDetails != null)
			{
				return true;
			}
			if (this._hospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._languageBarrierCallQueue != null)
			{
				return true;
			}
			if (this._mailRoundCallQueue != null)
			{
				return true;
			}
			if (this._medication != null)
			{
				return true;
			}
			if (this._memberUploadLog != null)
			{
				return true;
			}
			if (this._noShowCallQueue != null)
			{
				return true;
			}
			if (this._physicianInvoiceItem != null)
			{
				return true;
			}
			if (this._preAssessmentCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._preQualificationResult != null)
			{
				return true;
			}
			if (this._prospectCustomer != null)
			{
				return true;
			}
			if (this._raps != null)
			{
				return true;
			}
			if (this._referral != null)
			{
				return true;
			}
			if (this._requiredTest != null)
			{
				return true;
			}
			if (this._resultArchiveUploadLog != null)
			{
				return true;
			}
			if (this._suspectCondition != null)
			{
				return true;
			}
			if (this._tempCart != null)
			{
				return true;
			}
			if (this._testimonial != null)
			{
				return true;
			}
			if (this._uncontactedCustomerCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaLanguageBarrierCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaUncontactedCustomerCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaMailRoundCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaCallRoundCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaNoShowCallQueue != null)
			{
				return true;
			}
			if (this._accountCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._accountCollectionViaFillEventCallQueue != null)
			{
				return true;
			}
			if (this._activityTypeCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._addressCollectionViaCustomerPrimaryCarePhysician != null)
			{
				return true;
			}
			if (this._addressCollectionViaCustomerPrimaryCarePhysician_ != null)
			{
				return true;
			}
			if (this._afaffiliateCampaignCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer != null)
			{
				return true;
			}
			if (this._billingAccountCollectionViaCustomerBillingAccount != null)
			{
				return true;
			}
			if (this._callQueueCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._callQueueCriteriaCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._callQueueCustomerCollectionViaCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._callsCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._callsCollectionViaCustomerAccountGlocomNumber != null)
			{
				return true;
			}
			if (this._callsCollectionViaCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._callUploadCollectionViaDirectMail != null)
			{
				return true;
			}
			if (this._campaignCollectionViaDirectMail != null)
			{
				return true;
			}
			if (this._campaignCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._campaignCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._chargeCardCollectionViaTempCart != null)
			{
				return true;
			}
			if (this._chaseCampaignCollectionViaCustomerChaseCampaign != null)
			{
				return true;
			}
			if (this._chaseChannelLevelCollectionViaCustomerChaseChannel != null)
			{
				return true;
			}
			if (this._chaseGroupCollectionViaChaseOutbound != null)
			{
				return true;
			}
			if (this._chaseOutboundCollectionViaCustomerChaseProduct != null)
			{
				return true;
			}
			if (this._chaseOutboundCollectionViaCustomerChaseChannel != null)
			{
				return true;
			}
			if (this._chaseOutboundCollectionViaCustomerChaseCampaign != null)
			{
				return true;
			}
			if (this._chaseProductCollectionViaCustomerChaseProduct != null)
			{
				return true;
			}
			if (this._clickLogCollectionViaClickConversion != null)
			{
				return true;
			}
			if (this._corporateUploadCollectionViaMemberUploadLog != null)
			{
				return true;
			}
			if (this._corporateUploadCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerHealthQuestionsCollectionViaCustomerHealthInfo != null)
			{
				return true;
			}
			if (this._customerHealthQuestionsCollectionViaCustomerHealthInfoArchive != null)
			{
				return true;
			}
			if (this._customerProfileHistoryCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._customerRegistrationNotesCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._customerSurveyQuestionAnswerCollectionViaCustomerSurvey != null)
			{
				return true;
			}
			if (this._directMailTypeCollectionViaDirectMail != null)
			{
				return true;
			}
			if (this._eligibilityCollectionViaTempCart != null)
			{
				return true;
			}
			if (this._eventAppointmentCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCustomerHealthInfoArchive != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaClickConversion != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCustomerHealthInfo != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventPackageDetailsCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._eventPackageDetailsCollectionViaEventPaymentDetails != null)
			{
				return true;
			}
			if (this._eventsCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventsCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._eventsCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._eventsCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._eventsCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventsCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._eventsCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventsCollectionViaHospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._eventsCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._eventsCollectionViaCustomerEventTestFinding != null)
			{
				return true;
			}
			if (this._eventsCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._eventsCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventTestCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._fileCollectionViaTestimonial != null)
			{
				return true;
			}
			if (this._gcNotGivenReasonCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._hospitalFacilityCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._icdCodesCollectionViaCustomerIcdCode != null)
			{
				return true;
			}
			if (this._languageCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCallRoundCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult______ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaNoShowCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_______ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._lookupCollectionViaMailRoundCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult__ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaChaseOutbound != null)
			{
				return true;
			}
			if (this._lookupCollectionViaLanguageBarrierCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_____ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult____ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult___ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerProfileHistory__ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerProfileHistory___ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerProfileHistory_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaUncontactedCustomerCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerPrimaryCarePhysician != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerProfileHistory != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult________ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerUnsubscribedSmsNotification != null)
			{
				return true;
			}
			if (this._lookupCollectionViaFillEventCallQueue != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomers_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaProspectCustomer != null)
			{
				return true;
			}
			if (this._ndcCollectionViaCurrentMedication != null)
			{
				return true;
			}
			if (this._notesDetailsCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaGuardianDetails_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaGuardianDetails != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaUncontactedCustomerCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaReferral != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaFillEventCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaRequiredTest != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaProspectCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaMailRoundCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaNoShowCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaMedication != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallRoundCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaMedication_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaLanguageBarrierCallQueue != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerHealthInfo != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerHealthInfoArchive != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaDirectMail != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaDisqualifiedTest_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerEligibility_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerIcdCode != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerProfileHistory != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerTag != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerTag_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerWarmTransfer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerWarmTransfer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerTargeted != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerTargeted_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerEligibility != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult___ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomers_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult____ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult______ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_____ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCurrentMedication != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_______ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult________ != null)
			{
				return true;
			}
			if (this._physicianEvaluationCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._physicianInvoiceCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._physicianMasterCollectionViaCustomerPrimaryCarePhysician != null)
			{
				return true;
			}
			if (this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._preQualificationQuestionCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._prospectCustomerCollectionViaClickConversion != null)
			{
				return true;
			}
			if (this._prospectCustomerCollectionViaTempCart != null)
			{
				return true;
			}
			if (this._prospectCustomerCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._rapsUploadCollectionViaRaps != null)
			{
				return true;
			}
			if (this._relationshipCollectionViaChaseOutbound != null)
			{
				return true;
			}
			if (this._relationshipCollectionViaGuardianDetails != null)
			{
				return true;
			}
			if (this._resultArchiveUploadCollectionViaResultArchiveUploadLog != null)
			{
				return true;
			}
			if (this._smsReceivedCollectionViaCustomerUnsubscribedSmsNotification != null)
			{
				return true;
			}
			if (this._suspectConditionUploadCollectionViaSuspectCondition != null)
			{
				return true;
			}
			if (this._tagCollectionViaCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt != null)
			{
				return true;
			}
			if (this._tempCartCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._testCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._testCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._testCollectionViaRequiredTest != null)
			{
				return true;
			}
			if (this._testCollectionViaResultArchiveUploadLog != null)
			{
				return true;
			}
			if (this._testCollectionViaCustomerEventTestFinding != null)
			{
				return true;
			}
			return base.HasPopulatedMemberEntityCollections();
		}
		
		/// <summary>Creates the member entity collections queue.</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		/// <param name="requiredQueue">The required queue.</param>
		protected override void CreateMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue, Queue<bool> requiredQueue) 
		{
			base.CreateMemberEntityCollectionsQueue(collectionsQueue, requiredQueue);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallRoundCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ClickConversionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickConversionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CurrentMedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CurrentMedicationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerAccountGlocomNumberEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerAccountGlocomNumberEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerBillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerBillingAccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerCallQueueCallAttemptEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseCampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerChaseChannelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseChannelEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseProductEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerEligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEligibilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthInfoEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthInfoArchiveEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoArchiveEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerIcdCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerIcdCodeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerPredictedZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPredictedZipEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerPrimaryCarePhysicianEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPrimaryCarePhysicianEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerSurveyEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerTagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTagEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerTargetedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTargetedEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerUnsubscribedSmsNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerUnsubscribedSmsNotificationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerWarmTransferEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerWarmTransferEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DirectMailEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPaymentDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPaymentDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<FillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FillEventCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<GuardianDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GuardianDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LanguageBarrierCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageBarrierCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MailRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MailRoundCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MedicationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MemberUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MemberUploadLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<NoShowCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NoShowCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreAssessmentCustomerCallQueueCallAttemptEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RapsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ReferralEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ReferralEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RequiredTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RequiredTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ResultArchiveUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<SuspectConditionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestimonialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestimonialEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<UncontactedCustomerCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(UncontactedCustomerCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignMarketingMaterialEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<BillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(BillingAccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChargeCardEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChargeCardEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseCampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseChannelLevelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseChannelLevelEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseGroupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseGroupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseProductEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ClickLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerSurveyQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyQuestionAnswerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DirectMailTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailTypeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EligibilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<IcdCodesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(IcdCodesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<NdcEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NdcEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianMasterEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianMasterEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RapsUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<SmsReceivedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SmsReceivedEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<SuspectConditionUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
		}
#endif
		/// <summary>
		/// Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element. 
		/// </summary>
		/// <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
		public override Dictionary<string, object> GetRelatedData()
		{
			Dictionary<string, object> toReturn = new Dictionary<string, object>();
			toReturn.Add("ActivityType", _activityType);
			toReturn.Add("Address", _address);
			toReturn.Add("Lab", _lab);
			toReturn.Add("Language", _language);
			toReturn.Add("Lookup______", _lookup______);
			toReturn.Add("Lookup_____", _lookup_____);
			toReturn.Add("Lookup_______", _lookup_______);
			toReturn.Add("Lookup________", _lookup________);
			toReturn.Add("Lookup____", _lookup____);
			toReturn.Add("Lookup_", _lookup_);
			toReturn.Add("Lookup", _lookup);
			toReturn.Add("Lookup___", _lookup___);
			toReturn.Add("Lookup__", _lookup__);
			toReturn.Add("NotesDetails", _notesDetails);
			toReturn.Add("Role", _role);
			toReturn.Add("CallQueueCustomer", _callQueueCustomer);
			toReturn.Add("CallRoundCallQueue", _callRoundCallQueue);
			toReturn.Add("ChaseOutbound", _chaseOutbound);
			toReturn.Add("ClickConversion", _clickConversion);
			toReturn.Add("CurrentMedication", _currentMedication);
			toReturn.Add("CustomerAccountGlocomNumber", _customerAccountGlocomNumber);
			toReturn.Add("CustomerBillingAccount", _customerBillingAccount);
			toReturn.Add("CustomerCallQueueCallAttempt", _customerCallQueueCallAttempt);
			toReturn.Add("CustomerChaseCampaign", _customerChaseCampaign);
			toReturn.Add("CustomerChaseChannel", _customerChaseChannel);
			toReturn.Add("CustomerChaseProduct", _customerChaseProduct);
			toReturn.Add("CustomerClinicalQuestionAnswer", _customerClinicalQuestionAnswer);
			toReturn.Add("CustomerEligibility", _customerEligibility);
			toReturn.Add("CustomerEventTestFinding", _customerEventTestFinding);
			toReturn.Add("CustomerHealthInfo", _customerHealthInfo);
			toReturn.Add("CustomerHealthInfoArchive", _customerHealthInfoArchive);
			toReturn.Add("CustomerIcdCode", _customerIcdCode);
			toReturn.Add("CustomerOrderHistory", _customerOrderHistory);
			toReturn.Add("CustomerPredictedZip", _customerPredictedZip);
			toReturn.Add("CustomerPrimaryCarePhysician", _customerPrimaryCarePhysician);
			toReturn.Add("CustomerProfileHistory", _customerProfileHistory);
			toReturn.Add("CustomerSurvey", _customerSurvey);
			toReturn.Add("CustomerTag", _customerTag);
			toReturn.Add("CustomerTargeted", _customerTargeted);
			toReturn.Add("CustomerUnsubscribedSmsNotification", _customerUnsubscribedSmsNotification);
			toReturn.Add("CustomerWarmTransfer", _customerWarmTransfer);
			toReturn.Add("DependentDisqualifiedTest", _dependentDisqualifiedTest);
			toReturn.Add("DirectMail", _directMail);
			toReturn.Add("DisqualifiedTest", _disqualifiedTest);
			toReturn.Add("EventCustomerQuestionAnswer", _eventCustomerQuestionAnswer);
			toReturn.Add("EventCustomerResult", _eventCustomerResult);
			toReturn.Add("EventCustomers", _eventCustomers);
			toReturn.Add("EventPaymentDetails", _eventPaymentDetails);
			toReturn.Add("FillEventCallQueue", _fillEventCallQueue);
			toReturn.Add("GuardianDetails", _guardianDetails);
			toReturn.Add("HospitalPartnerCustomer", _hospitalPartnerCustomer);
			toReturn.Add("LanguageBarrierCallQueue", _languageBarrierCallQueue);
			toReturn.Add("MailRoundCallQueue", _mailRoundCallQueue);
			toReturn.Add("Medication", _medication);
			toReturn.Add("MemberUploadLog", _memberUploadLog);
			toReturn.Add("NoShowCallQueue", _noShowCallQueue);
			toReturn.Add("PhysicianInvoiceItem", _physicianInvoiceItem);
			toReturn.Add("PreAssessmentCustomerCallQueueCallAttempt", _preAssessmentCustomerCallQueueCallAttempt);
			toReturn.Add("PreQualificationResult", _preQualificationResult);
			toReturn.Add("ProspectCustomer", _prospectCustomer);
			toReturn.Add("Raps", _raps);
			toReturn.Add("Referral", _referral);
			toReturn.Add("RequiredTest", _requiredTest);
			toReturn.Add("ResultArchiveUploadLog", _resultArchiveUploadLog);
			toReturn.Add("SuspectCondition", _suspectCondition);
			toReturn.Add("TempCart", _tempCart);
			toReturn.Add("Testimonial", _testimonial);
			toReturn.Add("UncontactedCustomerCallQueue", _uncontactedCustomerCallQueue);
			toReturn.Add("AccountCollectionViaLanguageBarrierCallQueue", _accountCollectionViaLanguageBarrierCallQueue);
			toReturn.Add("AccountCollectionViaUncontactedCustomerCallQueue", _accountCollectionViaUncontactedCustomerCallQueue);
			toReturn.Add("AccountCollectionViaMailRoundCallQueue", _accountCollectionViaMailRoundCallQueue);
			toReturn.Add("AccountCollectionViaCallRoundCallQueue", _accountCollectionViaCallRoundCallQueue);
			toReturn.Add("AccountCollectionViaNoShowCallQueue", _accountCollectionViaNoShowCallQueue);
			toReturn.Add("AccountCollectionViaCallQueueCustomer", _accountCollectionViaCallQueueCustomer);
			toReturn.Add("AccountCollectionViaFillEventCallQueue", _accountCollectionViaFillEventCallQueue);
			toReturn.Add("ActivityTypeCollectionViaCallQueueCustomer", _activityTypeCollectionViaCallQueueCustomer);
			toReturn.Add("AddressCollectionViaCustomerPrimaryCarePhysician", _addressCollectionViaCustomerPrimaryCarePhysician);
			toReturn.Add("AddressCollectionViaCustomerPrimaryCarePhysician_", _addressCollectionViaCustomerPrimaryCarePhysician_);
			toReturn.Add("AfaffiliateCampaignCollectionViaEventCustomers", _afaffiliateCampaignCollectionViaEventCustomers);
			toReturn.Add("AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer", _afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer);
			toReturn.Add("BillingAccountCollectionViaCustomerBillingAccount", _billingAccountCollectionViaCustomerBillingAccount);
			toReturn.Add("CallQueueCollectionViaCallQueueCustomer", _callQueueCollectionViaCallQueueCustomer);
			toReturn.Add("CallQueueCriteriaCollectionViaCallQueueCustomer", _callQueueCriteriaCollectionViaCallQueueCustomer);
			toReturn.Add("CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt", _callQueueCustomerCollectionViaCustomerCallQueueCallAttempt);
			toReturn.Add("CallsCollectionViaPreQualificationResult", _callsCollectionViaPreQualificationResult);
			toReturn.Add("CallsCollectionViaCustomerAccountGlocomNumber", _callsCollectionViaCustomerAccountGlocomNumber);
			toReturn.Add("CallsCollectionViaCustomerCallQueueCallAttempt", _callsCollectionViaCustomerCallQueueCallAttempt);
			toReturn.Add("CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt", _callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			toReturn.Add("CallUploadCollectionViaDirectMail", _callUploadCollectionViaDirectMail);
			toReturn.Add("CampaignCollectionViaDirectMail", _campaignCollectionViaDirectMail);
			toReturn.Add("CampaignCollectionViaEventCustomers", _campaignCollectionViaEventCustomers);
			toReturn.Add("CampaignCollectionViaCallQueueCustomer", _campaignCollectionViaCallQueueCustomer);
			toReturn.Add("ChargeCardCollectionViaTempCart", _chargeCardCollectionViaTempCart);
			toReturn.Add("ChaseCampaignCollectionViaCustomerChaseCampaign", _chaseCampaignCollectionViaCustomerChaseCampaign);
			toReturn.Add("ChaseChannelLevelCollectionViaCustomerChaseChannel", _chaseChannelLevelCollectionViaCustomerChaseChannel);
			toReturn.Add("ChaseGroupCollectionViaChaseOutbound", _chaseGroupCollectionViaChaseOutbound);
			toReturn.Add("ChaseOutboundCollectionViaCustomerChaseProduct", _chaseOutboundCollectionViaCustomerChaseProduct);
			toReturn.Add("ChaseOutboundCollectionViaCustomerChaseChannel", _chaseOutboundCollectionViaCustomerChaseChannel);
			toReturn.Add("ChaseOutboundCollectionViaCustomerChaseCampaign", _chaseOutboundCollectionViaCustomerChaseCampaign);
			toReturn.Add("ChaseProductCollectionViaCustomerChaseProduct", _chaseProductCollectionViaCustomerChaseProduct);
			toReturn.Add("ClickLogCollectionViaClickConversion", _clickLogCollectionViaClickConversion);
			toReturn.Add("CorporateUploadCollectionViaMemberUploadLog", _corporateUploadCollectionViaMemberUploadLog);
			toReturn.Add("CorporateUploadCollectionViaCustomerOrderHistory", _corporateUploadCollectionViaCustomerOrderHistory);
			toReturn.Add("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("CustomerHealthQuestionsCollectionViaCustomerHealthInfo", _customerHealthQuestionsCollectionViaCustomerHealthInfo);
			toReturn.Add("CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive", _customerHealthQuestionsCollectionViaCustomerHealthInfoArchive);
			toReturn.Add("CustomerProfileHistoryCollectionViaEventCustomers", _customerProfileHistoryCollectionViaEventCustomers);
			toReturn.Add("CustomerRegistrationNotesCollectionViaEventCustomers", _customerRegistrationNotesCollectionViaEventCustomers);
			toReturn.Add("CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey", _customerSurveyQuestionAnswerCollectionViaCustomerSurvey);
			toReturn.Add("DirectMailTypeCollectionViaDirectMail", _directMailTypeCollectionViaDirectMail);
			toReturn.Add("EligibilityCollectionViaTempCart", _eligibilityCollectionViaTempCart);
			toReturn.Add("EventAppointmentCollectionViaEventCustomers", _eventAppointmentCollectionViaEventCustomers);
			toReturn.Add("EventCustomersCollectionViaCustomerHealthInfoArchive", _eventCustomersCollectionViaCustomerHealthInfoArchive);
			toReturn.Add("EventCustomersCollectionViaCallQueueCustomer", _eventCustomersCollectionViaCallQueueCustomer);
			toReturn.Add("EventCustomersCollectionViaDependentDisqualifiedTest", _eventCustomersCollectionViaDependentDisqualifiedTest);
			toReturn.Add("EventCustomersCollectionViaCustomerOrderHistory", _eventCustomersCollectionViaCustomerOrderHistory);
			toReturn.Add("EventCustomersCollectionViaDisqualifiedTest", _eventCustomersCollectionViaDisqualifiedTest);
			toReturn.Add("EventCustomersCollectionViaClickConversion", _eventCustomersCollectionViaClickConversion);
			toReturn.Add("EventCustomersCollectionViaCustomerHealthInfo", _eventCustomersCollectionViaCustomerHealthInfo);
			toReturn.Add("EventCustomersCollectionViaEventCustomerQuestionAnswer", _eventCustomersCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("EventPackageDetailsCollectionViaCustomerOrderHistory", _eventPackageDetailsCollectionViaCustomerOrderHistory);
			toReturn.Add("EventPackageDetailsCollectionViaEventPaymentDetails", _eventPackageDetailsCollectionViaEventPaymentDetails);
			toReturn.Add("EventsCollectionViaEventCustomerQuestionAnswer", _eventsCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("EventsCollectionViaEventCustomerResult", _eventsCollectionViaEventCustomerResult);
			toReturn.Add("EventsCollectionViaEventCustomers", _eventsCollectionViaEventCustomers);
			toReturn.Add("EventsCollectionViaPhysicianInvoiceItem", _eventsCollectionViaPhysicianInvoiceItem);
			toReturn.Add("EventsCollectionViaDisqualifiedTest", _eventsCollectionViaDisqualifiedTest);
			toReturn.Add("EventsCollectionViaPreQualificationResult", _eventsCollectionViaPreQualificationResult);
			toReturn.Add("EventsCollectionViaDependentDisqualifiedTest", _eventsCollectionViaDependentDisqualifiedTest);
			toReturn.Add("EventsCollectionViaHospitalPartnerCustomer", _eventsCollectionViaHospitalPartnerCustomer);
			toReturn.Add("EventsCollectionViaCallQueueCustomer", _eventsCollectionViaCallQueueCustomer);
			toReturn.Add("EventsCollectionViaCustomerEventTestFinding", _eventsCollectionViaCustomerEventTestFinding);
			toReturn.Add("EventsCollectionViaCustomerOrderHistory", _eventsCollectionViaCustomerOrderHistory);
			toReturn.Add("EventsCollectionViaCustomerClinicalQuestionAnswer", _eventsCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("EventTestCollectionViaCustomerOrderHistory", _eventTestCollectionViaCustomerOrderHistory);
			toReturn.Add("FileCollectionViaTestimonial", _fileCollectionViaTestimonial);
			toReturn.Add("GcNotGivenReasonCollectionViaEventCustomers", _gcNotGivenReasonCollectionViaEventCustomers);
			toReturn.Add("HafTemplateCollectionViaCustomerClinicalQuestionAnswer", _hafTemplateCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("HospitalFacilityCollectionViaEventCustomers", _hospitalFacilityCollectionViaEventCustomers);
			toReturn.Add("IcdCodesCollectionViaCustomerIcdCode", _icdCodesCollectionViaCustomerIcdCode);
			toReturn.Add("LanguageCollectionViaCallQueueCustomer", _languageCollectionViaCallQueueCustomer);
			toReturn.Add("LookupCollectionViaCallRoundCallQueue", _lookupCollectionViaCallRoundCallQueue);
			toReturn.Add("LookupCollectionViaPreQualificationResult______", _lookupCollectionViaPreQualificationResult______);
			toReturn.Add("LookupCollectionViaNoShowCallQueue", _lookupCollectionViaNoShowCallQueue);
			toReturn.Add("LookupCollectionViaPreQualificationResult", _lookupCollectionViaPreQualificationResult);
			toReturn.Add("LookupCollectionViaPreQualificationResult_______", _lookupCollectionViaPreQualificationResult_______);
			toReturn.Add("LookupCollectionViaEventCustomerResult", _lookupCollectionViaEventCustomerResult);
			toReturn.Add("LookupCollectionViaMailRoundCallQueue", _lookupCollectionViaMailRoundCallQueue);
			toReturn.Add("LookupCollectionViaPreQualificationResult__", _lookupCollectionViaPreQualificationResult__);
			toReturn.Add("LookupCollectionViaChaseOutbound", _lookupCollectionViaChaseOutbound);
			toReturn.Add("LookupCollectionViaLanguageBarrierCallQueue", _lookupCollectionViaLanguageBarrierCallQueue);
			toReturn.Add("LookupCollectionViaPreQualificationResult_____", _lookupCollectionViaPreQualificationResult_____);
			toReturn.Add("LookupCollectionViaPreQualificationResult____", _lookupCollectionViaPreQualificationResult____);
			toReturn.Add("LookupCollectionViaPreQualificationResult___", _lookupCollectionViaPreQualificationResult___);
			toReturn.Add("LookupCollectionViaCustomerProfileHistory__", _lookupCollectionViaCustomerProfileHistory__);
			toReturn.Add("LookupCollectionViaCustomerProfileHistory___", _lookupCollectionViaCustomerProfileHistory___);
			toReturn.Add("LookupCollectionViaCustomerOrderHistory", _lookupCollectionViaCustomerOrderHistory);
			toReturn.Add("LookupCollectionViaCustomerProfileHistory_", _lookupCollectionViaCustomerProfileHistory_);
			toReturn.Add("LookupCollectionViaUncontactedCustomerCallQueue", _lookupCollectionViaUncontactedCustomerCallQueue);
			toReturn.Add("LookupCollectionViaCustomerPrimaryCarePhysician", _lookupCollectionViaCustomerPrimaryCarePhysician);
			toReturn.Add("LookupCollectionViaCustomerProfileHistory", _lookupCollectionViaCustomerProfileHistory);
			toReturn.Add("LookupCollectionViaCallQueueCustomer", _lookupCollectionViaCallQueueCustomer);
			toReturn.Add("LookupCollectionViaEventCustomers", _lookupCollectionViaEventCustomers);
			toReturn.Add("LookupCollectionViaPreQualificationResult_", _lookupCollectionViaPreQualificationResult_);
			toReturn.Add("LookupCollectionViaPreQualificationResult________", _lookupCollectionViaPreQualificationResult________);
			toReturn.Add("LookupCollectionViaCustomerUnsubscribedSmsNotification", _lookupCollectionViaCustomerUnsubscribedSmsNotification);
			toReturn.Add("LookupCollectionViaFillEventCallQueue", _lookupCollectionViaFillEventCallQueue);
			toReturn.Add("LookupCollectionViaEventCustomers_", _lookupCollectionViaEventCustomers_);
			toReturn.Add("LookupCollectionViaProspectCustomer", _lookupCollectionViaProspectCustomer);
			toReturn.Add("NdcCollectionViaCurrentMedication", _ndcCollectionViaCurrentMedication);
			toReturn.Add("NotesDetailsCollectionViaCallQueueCustomer", _notesDetailsCollectionViaCallQueueCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaGuardianDetails_", _organizationRoleUserCollectionViaGuardianDetails_);
			toReturn.Add("OrganizationRoleUserCollectionViaGuardianDetails", _organizationRoleUserCollectionViaGuardianDetails);
			toReturn.Add("OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue", _organizationRoleUserCollectionViaUncontactedCustomerCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer_", _organizationRoleUserCollectionViaCallQueueCustomer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer", _organizationRoleUserCollectionViaCallQueueCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaReferral", _organizationRoleUserCollectionViaReferral);
			toReturn.Add("OrganizationRoleUserCollectionViaFillEventCallQueue", _organizationRoleUserCollectionViaFillEventCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaRequiredTest", _organizationRoleUserCollectionViaRequiredTest);
			toReturn.Add("OrganizationRoleUserCollectionViaProspectCustomer", _organizationRoleUserCollectionViaProspectCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaMailRoundCallQueue", _organizationRoleUserCollectionViaMailRoundCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaNoShowCallQueue", _organizationRoleUserCollectionViaNoShowCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaMedication", _organizationRoleUserCollectionViaMedication);
			toReturn.Add("OrganizationRoleUserCollectionViaCallRoundCallQueue", _organizationRoleUserCollectionViaCallRoundCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaMedication_", _organizationRoleUserCollectionViaMedication_);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer__", _organizationRoleUserCollectionViaCallQueueCustomer__);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_", _organizationRoleUserCollectionViaHospitalPartnerCustomer_);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer", _organizationRoleUserCollectionViaHospitalPartnerCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__", _organizationRoleUserCollectionViaHospitalPartnerCustomer__);
			toReturn.Add("OrganizationRoleUserCollectionViaLanguageBarrierCallQueue", _organizationRoleUserCollectionViaLanguageBarrierCallQueue);
			toReturn.Add("OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt", _organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerHealthInfo", _organizationRoleUserCollectionViaCustomerHealthInfo);
			toReturn.Add("OrganizationRoleUserCollectionViaDisqualifiedTest", _organizationRoleUserCollectionViaDisqualifiedTest);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerHealthInfoArchive", _organizationRoleUserCollectionViaCustomerHealthInfoArchive);
			toReturn.Add("OrganizationRoleUserCollectionViaDirectMail", _organizationRoleUserCollectionViaDirectMail);
			toReturn.Add("OrganizationRoleUserCollectionViaDisqualifiedTest_", _organizationRoleUserCollectionViaDisqualifiedTest_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer", _organizationRoleUserCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_", _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician", _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerEligibility_", _organizationRoleUserCollectionViaCustomerEligibility_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerIcdCode", _organizationRoleUserCollectionViaCustomerIcdCode);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerProfileHistory", _organizationRoleUserCollectionViaCustomerProfileHistory);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerTag", _organizationRoleUserCollectionViaCustomerTag);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_", _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__", _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerTag_", _organizationRoleUserCollectionViaCustomerTag_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerWarmTransfer", _organizationRoleUserCollectionViaCustomerWarmTransfer);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerWarmTransfer_", _organizationRoleUserCollectionViaCustomerWarmTransfer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerTargeted", _organizationRoleUserCollectionViaCustomerTargeted);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerTargeted_", _organizationRoleUserCollectionViaCustomerTargeted_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerEligibility", _organizationRoleUserCollectionViaCustomerEligibility);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult___", _organizationRoleUserCollectionViaEventCustomerResult___);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomers", _organizationRoleUserCollectionViaEventCustomers);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomers_", _organizationRoleUserCollectionViaEventCustomers_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult__", _organizationRoleUserCollectionViaEventCustomerResult__);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult____", _organizationRoleUserCollectionViaEventCustomerResult____);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult______", _organizationRoleUserCollectionViaEventCustomerResult______);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_____", _organizationRoleUserCollectionViaEventCustomerResult_____);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt", _organizationRoleUserCollectionViaCustomerCallQueueCallAttempt);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCurrentMedication", _organizationRoleUserCollectionViaCurrentMedication);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult", _organizationRoleUserCollectionViaEventCustomerResult);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_______", _organizationRoleUserCollectionViaEventCustomerResult_______);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_", _organizationRoleUserCollectionViaEventCustomerResult_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult________", _organizationRoleUserCollectionViaEventCustomerResult________);
			toReturn.Add("PhysicianEvaluationCollectionViaPhysicianInvoiceItem", _physicianEvaluationCollectionViaPhysicianInvoiceItem);
			toReturn.Add("PhysicianInvoiceCollectionViaPhysicianInvoiceItem", _physicianInvoiceCollectionViaPhysicianInvoiceItem);
			toReturn.Add("PhysicianMasterCollectionViaCustomerPrimaryCarePhysician", _physicianMasterCollectionViaCustomerPrimaryCarePhysician);
			toReturn.Add("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer", _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("PreQualificationQuestionCollectionViaDisqualifiedTest", _preQualificationQuestionCollectionViaDisqualifiedTest);
			toReturn.Add("ProspectCustomerCollectionViaClickConversion", _prospectCustomerCollectionViaClickConversion);
			toReturn.Add("ProspectCustomerCollectionViaTempCart", _prospectCustomerCollectionViaTempCart);
			toReturn.Add("ProspectCustomerCollectionViaCallQueueCustomer", _prospectCustomerCollectionViaCallQueueCustomer);
			toReturn.Add("RapsUploadCollectionViaRaps", _rapsUploadCollectionViaRaps);
			toReturn.Add("RelationshipCollectionViaChaseOutbound", _relationshipCollectionViaChaseOutbound);
			toReturn.Add("RelationshipCollectionViaGuardianDetails", _relationshipCollectionViaGuardianDetails);
			toReturn.Add("ResultArchiveUploadCollectionViaResultArchiveUploadLog", _resultArchiveUploadCollectionViaResultArchiveUploadLog);
			toReturn.Add("SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification", _smsReceivedCollectionViaCustomerUnsubscribedSmsNotification);
			toReturn.Add("SuspectConditionUploadCollectionViaSuspectCondition", _suspectConditionUploadCollectionViaSuspectCondition);
			toReturn.Add("TagCollectionViaCustomerCallQueueCallAttempt", _tagCollectionViaCustomerCallQueueCallAttempt);
			toReturn.Add("TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt", _tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt);
			toReturn.Add("TempCartCollectionViaPreQualificationResult", _tempCartCollectionViaPreQualificationResult);
			toReturn.Add("TestCollectionViaDependentDisqualifiedTest", _testCollectionViaDependentDisqualifiedTest);
			toReturn.Add("TestCollectionViaDisqualifiedTest", _testCollectionViaDisqualifiedTest);
			toReturn.Add("TestCollectionViaRequiredTest", _testCollectionViaRequiredTest);
			toReturn.Add("TestCollectionViaResultArchiveUploadLog", _testCollectionViaResultArchiveUploadLog);
			toReturn.Add("TestCollectionViaCustomerEventTestFinding", _testCollectionViaCustomerEventTestFinding);
			toReturn.Add("CustomerCallAttempts", _customerCallAttempts);
			toReturn.Add("CustomerLockForCall", _customerLockForCall);
			toReturn.Add("CustomerResultPosted", _customerResultPosted);
			toReturn.Add("CustomerTrale", _customerTrale);
			toReturn.Add("OrganizationRoleUser", _organizationRoleUser);
			return toReturn;
		}
		
		/// <summary> Adds the internals to the active context. </summary>
		protected override void AddInternalsToContext()
		{
			if(_callQueueCustomer!=null)
			{
				_callQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_callRoundCallQueue!=null)
			{
				_callRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_chaseOutbound!=null)
			{
				_chaseOutbound.ActiveContext = base.ActiveContext;
			}
			if(_clickConversion!=null)
			{
				_clickConversion.ActiveContext = base.ActiveContext;
			}
			if(_currentMedication!=null)
			{
				_currentMedication.ActiveContext = base.ActiveContext;
			}
			if(_customerAccountGlocomNumber!=null)
			{
				_customerAccountGlocomNumber.ActiveContext = base.ActiveContext;
			}
			if(_customerBillingAccount!=null)
			{
				_customerBillingAccount.ActiveContext = base.ActiveContext;
			}
			if(_customerCallQueueCallAttempt!=null)
			{
				_customerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_customerChaseCampaign!=null)
			{
				_customerChaseCampaign.ActiveContext = base.ActiveContext;
			}
			if(_customerChaseChannel!=null)
			{
				_customerChaseChannel.ActiveContext = base.ActiveContext;
			}
			if(_customerChaseProduct!=null)
			{
				_customerChaseProduct.ActiveContext = base.ActiveContext;
			}
			if(_customerClinicalQuestionAnswer!=null)
			{
				_customerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerEligibility!=null)
			{
				_customerEligibility.ActiveContext = base.ActiveContext;
			}
			if(_customerEventTestFinding!=null)
			{
				_customerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthInfo!=null)
			{
				_customerHealthInfo.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthInfoArchive!=null)
			{
				_customerHealthInfoArchive.ActiveContext = base.ActiveContext;
			}
			if(_customerIcdCode!=null)
			{
				_customerIcdCode.ActiveContext = base.ActiveContext;
			}
			if(_customerOrderHistory!=null)
			{
				_customerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_customerPredictedZip!=null)
			{
				_customerPredictedZip.ActiveContext = base.ActiveContext;
			}
			if(_customerPrimaryCarePhysician!=null)
			{
				_customerPrimaryCarePhysician.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileHistory!=null)
			{
				_customerProfileHistory.ActiveContext = base.ActiveContext;
			}
			if(_customerSurvey!=null)
			{
				_customerSurvey.ActiveContext = base.ActiveContext;
			}
			if(_customerTag!=null)
			{
				_customerTag.ActiveContext = base.ActiveContext;
			}
			if(_customerTargeted!=null)
			{
				_customerTargeted.ActiveContext = base.ActiveContext;
			}
			if(_customerUnsubscribedSmsNotification!=null)
			{
				_customerUnsubscribedSmsNotification.ActiveContext = base.ActiveContext;
			}
			if(_customerWarmTransfer!=null)
			{
				_customerWarmTransfer.ActiveContext = base.ActiveContext;
			}
			if(_dependentDisqualifiedTest!=null)
			{
				_dependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_directMail!=null)
			{
				_directMail.ActiveContext = base.ActiveContext;
			}
			if(_disqualifiedTest!=null)
			{
				_disqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomerQuestionAnswer!=null)
			{
				_eventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomerResult!=null)
			{
				_eventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomers!=null)
			{
				_eventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventPaymentDetails!=null)
			{
				_eventPaymentDetails.ActiveContext = base.ActiveContext;
			}
			if(_fillEventCallQueue!=null)
			{
				_fillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_guardianDetails!=null)
			{
				_guardianDetails.ActiveContext = base.ActiveContext;
			}
			if(_hospitalPartnerCustomer!=null)
			{
				_hospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_languageBarrierCallQueue!=null)
			{
				_languageBarrierCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_mailRoundCallQueue!=null)
			{
				_mailRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_medication!=null)
			{
				_medication.ActiveContext = base.ActiveContext;
			}
			if(_memberUploadLog!=null)
			{
				_memberUploadLog.ActiveContext = base.ActiveContext;
			}
			if(_noShowCallQueue!=null)
			{
				_noShowCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_physicianInvoiceItem!=null)
			{
				_physicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_preAssessmentCustomerCallQueueCallAttempt!=null)
			{
				_preAssessmentCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationResult!=null)
			{
				_preQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_prospectCustomer!=null)
			{
				_prospectCustomer.ActiveContext = base.ActiveContext;
			}
			if(_raps!=null)
			{
				_raps.ActiveContext = base.ActiveContext;
			}
			if(_referral!=null)
			{
				_referral.ActiveContext = base.ActiveContext;
			}
			if(_requiredTest!=null)
			{
				_requiredTest.ActiveContext = base.ActiveContext;
			}
			if(_resultArchiveUploadLog!=null)
			{
				_resultArchiveUploadLog.ActiveContext = base.ActiveContext;
			}
			if(_suspectCondition!=null)
			{
				_suspectCondition.ActiveContext = base.ActiveContext;
			}
			if(_tempCart!=null)
			{
				_tempCart.ActiveContext = base.ActiveContext;
			}
			if(_testimonial!=null)
			{
				_testimonial.ActiveContext = base.ActiveContext;
			}
			if(_uncontactedCustomerCallQueue!=null)
			{
				_uncontactedCustomerCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaLanguageBarrierCallQueue!=null)
			{
				_accountCollectionViaLanguageBarrierCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaUncontactedCustomerCallQueue!=null)
			{
				_accountCollectionViaUncontactedCustomerCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaMailRoundCallQueue!=null)
			{
				_accountCollectionViaMailRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaCallRoundCallQueue!=null)
			{
				_accountCollectionViaCallRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaNoShowCallQueue!=null)
			{
				_accountCollectionViaNoShowCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaCallQueueCustomer!=null)
			{
				_accountCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaFillEventCallQueue!=null)
			{
				_accountCollectionViaFillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_activityTypeCollectionViaCallQueueCustomer!=null)
			{
				_activityTypeCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_addressCollectionViaCustomerPrimaryCarePhysician!=null)
			{
				_addressCollectionViaCustomerPrimaryCarePhysician.ActiveContext = base.ActiveContext;
			}
			if(_addressCollectionViaCustomerPrimaryCarePhysician_!=null)
			{
				_addressCollectionViaCustomerPrimaryCarePhysician_.ActiveContext = base.ActiveContext;
			}
			if(_afaffiliateCampaignCollectionViaEventCustomers!=null)
			{
				_afaffiliateCampaignCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer!=null)
			{
				_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.ActiveContext = base.ActiveContext;
			}
			if(_billingAccountCollectionViaCustomerBillingAccount!=null)
			{
				_billingAccountCollectionViaCustomerBillingAccount.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCollectionViaCallQueueCustomer!=null)
			{
				_callQueueCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCriteriaCollectionViaCallQueueCustomer!=null)
			{
				_callQueueCriteriaCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt!=null)
			{
				_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_callsCollectionViaPreQualificationResult!=null)
			{
				_callsCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_callsCollectionViaCustomerAccountGlocomNumber!=null)
			{
				_callsCollectionViaCustomerAccountGlocomNumber.ActiveContext = base.ActiveContext;
			}
			if(_callsCollectionViaCustomerCallQueueCallAttempt!=null)
			{
				_callsCollectionViaCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null)
			{
				_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_callUploadCollectionViaDirectMail!=null)
			{
				_callUploadCollectionViaDirectMail.ActiveContext = base.ActiveContext;
			}
			if(_campaignCollectionViaDirectMail!=null)
			{
				_campaignCollectionViaDirectMail.ActiveContext = base.ActiveContext;
			}
			if(_campaignCollectionViaEventCustomers!=null)
			{
				_campaignCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_campaignCollectionViaCallQueueCustomer!=null)
			{
				_campaignCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_chargeCardCollectionViaTempCart!=null)
			{
				_chargeCardCollectionViaTempCart.ActiveContext = base.ActiveContext;
			}
			if(_chaseCampaignCollectionViaCustomerChaseCampaign!=null)
			{
				_chaseCampaignCollectionViaCustomerChaseCampaign.ActiveContext = base.ActiveContext;
			}
			if(_chaseChannelLevelCollectionViaCustomerChaseChannel!=null)
			{
				_chaseChannelLevelCollectionViaCustomerChaseChannel.ActiveContext = base.ActiveContext;
			}
			if(_chaseGroupCollectionViaChaseOutbound!=null)
			{
				_chaseGroupCollectionViaChaseOutbound.ActiveContext = base.ActiveContext;
			}
			if(_chaseOutboundCollectionViaCustomerChaseProduct!=null)
			{
				_chaseOutboundCollectionViaCustomerChaseProduct.ActiveContext = base.ActiveContext;
			}
			if(_chaseOutboundCollectionViaCustomerChaseChannel!=null)
			{
				_chaseOutboundCollectionViaCustomerChaseChannel.ActiveContext = base.ActiveContext;
			}
			if(_chaseOutboundCollectionViaCustomerChaseCampaign!=null)
			{
				_chaseOutboundCollectionViaCustomerChaseCampaign.ActiveContext = base.ActiveContext;
			}
			if(_chaseProductCollectionViaCustomerChaseProduct!=null)
			{
				_chaseProductCollectionViaCustomerChaseProduct.ActiveContext = base.ActiveContext;
			}
			if(_clickLogCollectionViaClickConversion!=null)
			{
				_clickLogCollectionViaClickConversion.ActiveContext = base.ActiveContext;
			}
			if(_corporateUploadCollectionViaMemberUploadLog!=null)
			{
				_corporateUploadCollectionViaMemberUploadLog.ActiveContext = base.ActiveContext;
			}
			if(_corporateUploadCollectionViaCustomerOrderHistory!=null)
			{
				_corporateUploadCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthQuestionsCollectionViaCustomerHealthInfo!=null)
			{
				_customerHealthQuestionsCollectionViaCustomerHealthInfo.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive!=null)
			{
				_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileHistoryCollectionViaEventCustomers!=null)
			{
				_customerProfileHistoryCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_customerRegistrationNotesCollectionViaEventCustomers!=null)
			{
				_customerRegistrationNotesCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_customerSurveyQuestionAnswerCollectionViaCustomerSurvey!=null)
			{
				_customerSurveyQuestionAnswerCollectionViaCustomerSurvey.ActiveContext = base.ActiveContext;
			}
			if(_directMailTypeCollectionViaDirectMail!=null)
			{
				_directMailTypeCollectionViaDirectMail.ActiveContext = base.ActiveContext;
			}
			if(_eligibilityCollectionViaTempCart!=null)
			{
				_eligibilityCollectionViaTempCart.ActiveContext = base.ActiveContext;
			}
			if(_eventAppointmentCollectionViaEventCustomers!=null)
			{
				_eventAppointmentCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCustomerHealthInfoArchive!=null)
			{
				_eventCustomersCollectionViaCustomerHealthInfoArchive.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCallQueueCustomer!=null)
			{
				_eventCustomersCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaDependentDisqualifiedTest!=null)
			{
				_eventCustomersCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCustomerOrderHistory!=null)
			{
				_eventCustomersCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaDisqualifiedTest!=null)
			{
				_eventCustomersCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaClickConversion!=null)
			{
				_eventCustomersCollectionViaClickConversion.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCustomerHealthInfo!=null)
			{
				_eventCustomersCollectionViaCustomerHealthInfo.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_eventCustomersCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventPackageDetailsCollectionViaCustomerOrderHistory!=null)
			{
				_eventPackageDetailsCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_eventPackageDetailsCollectionViaEventPaymentDetails!=null)
			{
				_eventPackageDetailsCollectionViaEventPaymentDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_eventsCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaEventCustomerResult!=null)
			{
				_eventsCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaEventCustomers!=null)
			{
				_eventsCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaPhysicianInvoiceItem!=null)
			{
				_eventsCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaDisqualifiedTest!=null)
			{
				_eventsCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaPreQualificationResult!=null)
			{
				_eventsCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaDependentDisqualifiedTest!=null)
			{
				_eventsCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaHospitalPartnerCustomer!=null)
			{
				_eventsCollectionViaHospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaCallQueueCustomer!=null)
			{
				_eventsCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaCustomerEventTestFinding!=null)
			{
				_eventsCollectionViaCustomerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaCustomerOrderHistory!=null)
			{
				_eventsCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_eventsCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_eventsCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventTestCollectionViaCustomerOrderHistory!=null)
			{
				_eventTestCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_fileCollectionViaTestimonial!=null)
			{
				_fileCollectionViaTestimonial.ActiveContext = base.ActiveContext;
			}
			if(_gcNotGivenReasonCollectionViaEventCustomers!=null)
			{
				_gcNotGivenReasonCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_hafTemplateCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_hospitalFacilityCollectionViaEventCustomers!=null)
			{
				_hospitalFacilityCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_icdCodesCollectionViaCustomerIcdCode!=null)
			{
				_icdCodesCollectionViaCustomerIcdCode.ActiveContext = base.ActiveContext;
			}
			if(_languageCollectionViaCallQueueCustomer!=null)
			{
				_languageCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCallRoundCallQueue!=null)
			{
				_lookupCollectionViaCallRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult______!=null)
			{
				_lookupCollectionViaPreQualificationResult______.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaNoShowCallQueue!=null)
			{
				_lookupCollectionViaNoShowCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult!=null)
			{
				_lookupCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_______!=null)
			{
				_lookupCollectionViaPreQualificationResult_______.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomerResult!=null)
			{
				_lookupCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaMailRoundCallQueue!=null)
			{
				_lookupCollectionViaMailRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult__!=null)
			{
				_lookupCollectionViaPreQualificationResult__.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaChaseOutbound!=null)
			{
				_lookupCollectionViaChaseOutbound.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaLanguageBarrierCallQueue!=null)
			{
				_lookupCollectionViaLanguageBarrierCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_____!=null)
			{
				_lookupCollectionViaPreQualificationResult_____.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult____!=null)
			{
				_lookupCollectionViaPreQualificationResult____.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult___!=null)
			{
				_lookupCollectionViaPreQualificationResult___.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerProfileHistory__!=null)
			{
				_lookupCollectionViaCustomerProfileHistory__.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerProfileHistory___!=null)
			{
				_lookupCollectionViaCustomerProfileHistory___.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerOrderHistory!=null)
			{
				_lookupCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerProfileHistory_!=null)
			{
				_lookupCollectionViaCustomerProfileHistory_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaUncontactedCustomerCallQueue!=null)
			{
				_lookupCollectionViaUncontactedCustomerCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerPrimaryCarePhysician!=null)
			{
				_lookupCollectionViaCustomerPrimaryCarePhysician.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerProfileHistory!=null)
			{
				_lookupCollectionViaCustomerProfileHistory.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCallQueueCustomer!=null)
			{
				_lookupCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomers!=null)
			{
				_lookupCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_!=null)
			{
				_lookupCollectionViaPreQualificationResult_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult________!=null)
			{
				_lookupCollectionViaPreQualificationResult________.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerUnsubscribedSmsNotification!=null)
			{
				_lookupCollectionViaCustomerUnsubscribedSmsNotification.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaFillEventCallQueue!=null)
			{
				_lookupCollectionViaFillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomers_!=null)
			{
				_lookupCollectionViaEventCustomers_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaProspectCustomer!=null)
			{
				_lookupCollectionViaProspectCustomer.ActiveContext = base.ActiveContext;
			}
			if(_ndcCollectionViaCurrentMedication!=null)
			{
				_ndcCollectionViaCurrentMedication.ActiveContext = base.ActiveContext;
			}
			if(_notesDetailsCollectionViaCallQueueCustomer!=null)
			{
				_notesDetailsCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaGuardianDetails_!=null)
			{
				_organizationRoleUserCollectionViaGuardianDetails_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaGuardianDetails!=null)
			{
				_organizationRoleUserCollectionViaGuardianDetails.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaUncontactedCustomerCallQueue!=null)
			{
				_organizationRoleUserCollectionViaUncontactedCustomerCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer_!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaReferral!=null)
			{
				_organizationRoleUserCollectionViaReferral.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaFillEventCallQueue!=null)
			{
				_organizationRoleUserCollectionViaFillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaRequiredTest!=null)
			{
				_organizationRoleUserCollectionViaRequiredTest.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaProspectCustomer!=null)
			{
				_organizationRoleUserCollectionViaProspectCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaMailRoundCallQueue!=null)
			{
				_organizationRoleUserCollectionViaMailRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaNoShowCallQueue!=null)
			{
				_organizationRoleUserCollectionViaNoShowCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaMedication!=null)
			{
				_organizationRoleUserCollectionViaMedication.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallRoundCallQueue!=null)
			{
				_organizationRoleUserCollectionViaCallRoundCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaMedication_!=null)
			{
				_organizationRoleUserCollectionViaMedication_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer__!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer_!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer__!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaLanguageBarrierCallQueue!=null)
			{
				_organizationRoleUserCollectionViaLanguageBarrierCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null)
			{
				_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerHealthInfo!=null)
			{
				_organizationRoleUserCollectionViaCustomerHealthInfo.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaDisqualifiedTest!=null)
			{
				_organizationRoleUserCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerHealthInfoArchive!=null)
			{
				_organizationRoleUserCollectionViaCustomerHealthInfoArchive.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaDirectMail!=null)
			{
				_organizationRoleUserCollectionViaDirectMail.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaDisqualifiedTest_!=null)
			{
				_organizationRoleUserCollectionViaDisqualifiedTest_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician!=null)
			{
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerEligibility_!=null)
			{
				_organizationRoleUserCollectionViaCustomerEligibility_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerIcdCode!=null)
			{
				_organizationRoleUserCollectionViaCustomerIcdCode.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerProfileHistory!=null)
			{
				_organizationRoleUserCollectionViaCustomerProfileHistory.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerTag!=null)
			{
				_organizationRoleUserCollectionViaCustomerTag.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_!=null)
			{
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__!=null)
			{
				_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerTag_!=null)
			{
				_organizationRoleUserCollectionViaCustomerTag_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerWarmTransfer!=null)
			{
				_organizationRoleUserCollectionViaCustomerWarmTransfer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerWarmTransfer_!=null)
			{
				_organizationRoleUserCollectionViaCustomerWarmTransfer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerTargeted!=null)
			{
				_organizationRoleUserCollectionViaCustomerTargeted.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerTargeted_!=null)
			{
				_organizationRoleUserCollectionViaCustomerTargeted_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerEligibility!=null)
			{
				_organizationRoleUserCollectionViaCustomerEligibility.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult___!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult___.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomers!=null)
			{
				_organizationRoleUserCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomers_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomers_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult__!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult____!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult____.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult______!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult______.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_____!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_____.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt!=null)
			{
				_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_!=null)
			{
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCurrentMedication!=null)
			{
				_organizationRoleUserCollectionViaCurrentMedication.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_______!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_______.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult________!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult________.ActiveContext = base.ActiveContext;
			}
			if(_physicianEvaluationCollectionViaPhysicianInvoiceItem!=null)
			{
				_physicianEvaluationCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_physicianInvoiceCollectionViaPhysicianInvoiceItem!=null)
			{
				_physicianInvoiceCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_physicianMasterCollectionViaCustomerPrimaryCarePhysician!=null)
			{
				_physicianMasterCollectionViaCustomerPrimaryCarePhysician.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationQuestionCollectionViaDisqualifiedTest!=null)
			{
				_preQualificationQuestionCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_prospectCustomerCollectionViaClickConversion!=null)
			{
				_prospectCustomerCollectionViaClickConversion.ActiveContext = base.ActiveContext;
			}
			if(_prospectCustomerCollectionViaTempCart!=null)
			{
				_prospectCustomerCollectionViaTempCart.ActiveContext = base.ActiveContext;
			}
			if(_prospectCustomerCollectionViaCallQueueCustomer!=null)
			{
				_prospectCustomerCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_rapsUploadCollectionViaRaps!=null)
			{
				_rapsUploadCollectionViaRaps.ActiveContext = base.ActiveContext;
			}
			if(_relationshipCollectionViaChaseOutbound!=null)
			{
				_relationshipCollectionViaChaseOutbound.ActiveContext = base.ActiveContext;
			}
			if(_relationshipCollectionViaGuardianDetails!=null)
			{
				_relationshipCollectionViaGuardianDetails.ActiveContext = base.ActiveContext;
			}
			if(_resultArchiveUploadCollectionViaResultArchiveUploadLog!=null)
			{
				_resultArchiveUploadCollectionViaResultArchiveUploadLog.ActiveContext = base.ActiveContext;
			}
			if(_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification!=null)
			{
				_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification.ActiveContext = base.ActiveContext;
			}
			if(_suspectConditionUploadCollectionViaSuspectCondition!=null)
			{
				_suspectConditionUploadCollectionViaSuspectCondition.ActiveContext = base.ActiveContext;
			}
			if(_tagCollectionViaCustomerCallQueueCallAttempt!=null)
			{
				_tagCollectionViaCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt!=null)
			{
				_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.ActiveContext = base.ActiveContext;
			}
			if(_tempCartCollectionViaPreQualificationResult!=null)
			{
				_tempCartCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaDependentDisqualifiedTest!=null)
			{
				_testCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaDisqualifiedTest!=null)
			{
				_testCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaRequiredTest!=null)
			{
				_testCollectionViaRequiredTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaResultArchiveUploadLog!=null)
			{
				_testCollectionViaResultArchiveUploadLog.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaCustomerEventTestFinding!=null)
			{
				_testCollectionViaCustomerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_activityType!=null)
			{
				_activityType.ActiveContext = base.ActiveContext;
			}
			if(_address!=null)
			{
				_address.ActiveContext = base.ActiveContext;
			}
			if(_lab!=null)
			{
				_lab.ActiveContext = base.ActiveContext;
			}
			if(_language!=null)
			{
				_language.ActiveContext = base.ActiveContext;
			}
			if(_lookup______!=null)
			{
				_lookup______.ActiveContext = base.ActiveContext;
			}
			if(_lookup_____!=null)
			{
				_lookup_____.ActiveContext = base.ActiveContext;
			}
			if(_lookup_______!=null)
			{
				_lookup_______.ActiveContext = base.ActiveContext;
			}
			if(_lookup________!=null)
			{
				_lookup________.ActiveContext = base.ActiveContext;
			}
			if(_lookup____!=null)
			{
				_lookup____.ActiveContext = base.ActiveContext;
			}
			if(_lookup_!=null)
			{
				_lookup_.ActiveContext = base.ActiveContext;
			}
			if(_lookup!=null)
			{
				_lookup.ActiveContext = base.ActiveContext;
			}
			if(_lookup___!=null)
			{
				_lookup___.ActiveContext = base.ActiveContext;
			}
			if(_lookup__!=null)
			{
				_lookup__.ActiveContext = base.ActiveContext;
			}
			if(_notesDetails!=null)
			{
				_notesDetails.ActiveContext = base.ActiveContext;
			}
			if(_role!=null)
			{
				_role.ActiveContext = base.ActiveContext;
			}
			if(_customerCallAttempts!=null)
			{
				_customerCallAttempts.ActiveContext = base.ActiveContext;
			}
			if(_customerLockForCall!=null)
			{
				_customerLockForCall.ActiveContext = base.ActiveContext;
			}
			if(_customerResultPosted!=null)
			{
				_customerResultPosted.ActiveContext = base.ActiveContext;
			}
			if(_customerTrale!=null)
			{
				_customerTrale.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser!=null)
			{
				_organizationRoleUser.ActiveContext = base.ActiveContext;
			}
		}

		/// <summary> Initializes the class members</summary>
		protected virtual void InitClassMembers()
		{

			_callQueueCustomer = null;
			_callRoundCallQueue = null;
			_chaseOutbound = null;
			_clickConversion = null;
			_currentMedication = null;
			_customerAccountGlocomNumber = null;
			_customerBillingAccount = null;
			_customerCallQueueCallAttempt = null;
			_customerChaseCampaign = null;
			_customerChaseChannel = null;
			_customerChaseProduct = null;
			_customerClinicalQuestionAnswer = null;
			_customerEligibility = null;
			_customerEventTestFinding = null;
			_customerHealthInfo = null;
			_customerHealthInfoArchive = null;
			_customerIcdCode = null;
			_customerOrderHistory = null;
			_customerPredictedZip = null;
			_customerPrimaryCarePhysician = null;
			_customerProfileHistory = null;
			_customerSurvey = null;
			_customerTag = null;
			_customerTargeted = null;
			_customerUnsubscribedSmsNotification = null;
			_customerWarmTransfer = null;
			_dependentDisqualifiedTest = null;
			_directMail = null;
			_disqualifiedTest = null;
			_eventCustomerQuestionAnswer = null;
			_eventCustomerResult = null;
			_eventCustomers = null;
			_eventPaymentDetails = null;
			_fillEventCallQueue = null;
			_guardianDetails = null;
			_hospitalPartnerCustomer = null;
			_languageBarrierCallQueue = null;
			_mailRoundCallQueue = null;
			_medication = null;
			_memberUploadLog = null;
			_noShowCallQueue = null;
			_physicianInvoiceItem = null;
			_preAssessmentCustomerCallQueueCallAttempt = null;
			_preQualificationResult = null;
			_prospectCustomer = null;
			_raps = null;
			_referral = null;
			_requiredTest = null;
			_resultArchiveUploadLog = null;
			_suspectCondition = null;
			_tempCart = null;
			_testimonial = null;
			_uncontactedCustomerCallQueue = null;
			_accountCollectionViaLanguageBarrierCallQueue = null;
			_accountCollectionViaUncontactedCustomerCallQueue = null;
			_accountCollectionViaMailRoundCallQueue = null;
			_accountCollectionViaCallRoundCallQueue = null;
			_accountCollectionViaNoShowCallQueue = null;
			_accountCollectionViaCallQueueCustomer = null;
			_accountCollectionViaFillEventCallQueue = null;
			_activityTypeCollectionViaCallQueueCustomer = null;
			_addressCollectionViaCustomerPrimaryCarePhysician = null;
			_addressCollectionViaCustomerPrimaryCarePhysician_ = null;
			_afaffiliateCampaignCollectionViaEventCustomers = null;
			_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer = null;
			_billingAccountCollectionViaCustomerBillingAccount = null;
			_callQueueCollectionViaCallQueueCustomer = null;
			_callQueueCriteriaCollectionViaCallQueueCustomer = null;
			_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt = null;
			_callsCollectionViaPreQualificationResult = null;
			_callsCollectionViaCustomerAccountGlocomNumber = null;
			_callsCollectionViaCustomerCallQueueCallAttempt = null;
			_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt = null;
			_callUploadCollectionViaDirectMail = null;
			_campaignCollectionViaDirectMail = null;
			_campaignCollectionViaEventCustomers = null;
			_campaignCollectionViaCallQueueCustomer = null;
			_chargeCardCollectionViaTempCart = null;
			_chaseCampaignCollectionViaCustomerChaseCampaign = null;
			_chaseChannelLevelCollectionViaCustomerChaseChannel = null;
			_chaseGroupCollectionViaChaseOutbound = null;
			_chaseOutboundCollectionViaCustomerChaseProduct = null;
			_chaseOutboundCollectionViaCustomerChaseChannel = null;
			_chaseOutboundCollectionViaCustomerChaseCampaign = null;
			_chaseProductCollectionViaCustomerChaseProduct = null;
			_clickLogCollectionViaClickConversion = null;
			_corporateUploadCollectionViaMemberUploadLog = null;
			_corporateUploadCollectionViaCustomerOrderHistory = null;
			_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = null;
			_customerHealthQuestionsCollectionViaCustomerHealthInfo = null;
			_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive = null;
			_customerProfileHistoryCollectionViaEventCustomers = null;
			_customerRegistrationNotesCollectionViaEventCustomers = null;
			_customerSurveyQuestionAnswerCollectionViaCustomerSurvey = null;
			_directMailTypeCollectionViaDirectMail = null;
			_eligibilityCollectionViaTempCart = null;
			_eventAppointmentCollectionViaEventCustomers = null;
			_eventCustomersCollectionViaCustomerHealthInfoArchive = null;
			_eventCustomersCollectionViaCallQueueCustomer = null;
			_eventCustomersCollectionViaDependentDisqualifiedTest = null;
			_eventCustomersCollectionViaCustomerOrderHistory = null;
			_eventCustomersCollectionViaDisqualifiedTest = null;
			_eventCustomersCollectionViaClickConversion = null;
			_eventCustomersCollectionViaCustomerHealthInfo = null;
			_eventCustomersCollectionViaEventCustomerQuestionAnswer = null;
			_eventPackageDetailsCollectionViaCustomerOrderHistory = null;
			_eventPackageDetailsCollectionViaEventPaymentDetails = null;
			_eventsCollectionViaEventCustomerQuestionAnswer = null;
			_eventsCollectionViaEventCustomerResult = null;
			_eventsCollectionViaEventCustomers = null;
			_eventsCollectionViaPhysicianInvoiceItem = null;
			_eventsCollectionViaDisqualifiedTest = null;
			_eventsCollectionViaPreQualificationResult = null;
			_eventsCollectionViaDependentDisqualifiedTest = null;
			_eventsCollectionViaHospitalPartnerCustomer = null;
			_eventsCollectionViaCallQueueCustomer = null;
			_eventsCollectionViaCustomerEventTestFinding = null;
			_eventsCollectionViaCustomerOrderHistory = null;
			_eventsCollectionViaCustomerClinicalQuestionAnswer = null;
			_eventTestCollectionViaCustomerOrderHistory = null;
			_fileCollectionViaTestimonial = null;
			_gcNotGivenReasonCollectionViaEventCustomers = null;
			_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = null;
			_hospitalFacilityCollectionViaEventCustomers = null;
			_icdCodesCollectionViaCustomerIcdCode = null;
			_languageCollectionViaCallQueueCustomer = null;
			_lookupCollectionViaCallRoundCallQueue = null;
			_lookupCollectionViaPreQualificationResult______ = null;
			_lookupCollectionViaNoShowCallQueue = null;
			_lookupCollectionViaPreQualificationResult = null;
			_lookupCollectionViaPreQualificationResult_______ = null;
			_lookupCollectionViaEventCustomerResult = null;
			_lookupCollectionViaMailRoundCallQueue = null;
			_lookupCollectionViaPreQualificationResult__ = null;
			_lookupCollectionViaChaseOutbound = null;
			_lookupCollectionViaLanguageBarrierCallQueue = null;
			_lookupCollectionViaPreQualificationResult_____ = null;
			_lookupCollectionViaPreQualificationResult____ = null;
			_lookupCollectionViaPreQualificationResult___ = null;
			_lookupCollectionViaCustomerProfileHistory__ = null;
			_lookupCollectionViaCustomerProfileHistory___ = null;
			_lookupCollectionViaCustomerOrderHistory = null;
			_lookupCollectionViaCustomerProfileHistory_ = null;
			_lookupCollectionViaUncontactedCustomerCallQueue = null;
			_lookupCollectionViaCustomerPrimaryCarePhysician = null;
			_lookupCollectionViaCustomerProfileHistory = null;
			_lookupCollectionViaCallQueueCustomer = null;
			_lookupCollectionViaEventCustomers = null;
			_lookupCollectionViaPreQualificationResult_ = null;
			_lookupCollectionViaPreQualificationResult________ = null;
			_lookupCollectionViaCustomerUnsubscribedSmsNotification = null;
			_lookupCollectionViaFillEventCallQueue = null;
			_lookupCollectionViaEventCustomers_ = null;
			_lookupCollectionViaProspectCustomer = null;
			_ndcCollectionViaCurrentMedication = null;
			_notesDetailsCollectionViaCallQueueCustomer = null;
			_organizationRoleUserCollectionViaGuardianDetails_ = null;
			_organizationRoleUserCollectionViaGuardianDetails = null;
			_organizationRoleUserCollectionViaUncontactedCustomerCallQueue = null;
			_organizationRoleUserCollectionViaCallQueueCustomer_ = null;
			_organizationRoleUserCollectionViaCallQueueCustomer = null;
			_organizationRoleUserCollectionViaReferral = null;
			_organizationRoleUserCollectionViaFillEventCallQueue = null;
			_organizationRoleUserCollectionViaRequiredTest = null;
			_organizationRoleUserCollectionViaProspectCustomer = null;
			_organizationRoleUserCollectionViaMailRoundCallQueue = null;
			_organizationRoleUserCollectionViaNoShowCallQueue = null;
			_organizationRoleUserCollectionViaMedication = null;
			_organizationRoleUserCollectionViaCallRoundCallQueue = null;
			_organizationRoleUserCollectionViaMedication_ = null;
			_organizationRoleUserCollectionViaCallQueueCustomer__ = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = null;
			_organizationRoleUserCollectionViaLanguageBarrierCallQueue = null;
			_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt = null;
			_organizationRoleUserCollectionViaCustomerHealthInfo = null;
			_organizationRoleUserCollectionViaDisqualifiedTest = null;
			_organizationRoleUserCollectionViaCustomerHealthInfoArchive = null;
			_organizationRoleUserCollectionViaDirectMail = null;
			_organizationRoleUserCollectionViaDisqualifiedTest_ = null;
			_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = null;
			_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = null;
			_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician = null;
			_organizationRoleUserCollectionViaCustomerEligibility_ = null;
			_organizationRoleUserCollectionViaCustomerIcdCode = null;
			_organizationRoleUserCollectionViaCustomerProfileHistory = null;
			_organizationRoleUserCollectionViaCustomerTag = null;
			_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ = null;
			_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ = null;
			_organizationRoleUserCollectionViaCustomerTag_ = null;
			_organizationRoleUserCollectionViaCustomerWarmTransfer = null;
			_organizationRoleUserCollectionViaCustomerWarmTransfer_ = null;
			_organizationRoleUserCollectionViaCustomerTargeted = null;
			_organizationRoleUserCollectionViaCustomerTargeted_ = null;
			_organizationRoleUserCollectionViaCustomerEligibility = null;
			_organizationRoleUserCollectionViaEventCustomerResult___ = null;
			_organizationRoleUserCollectionViaEventCustomers = null;
			_organizationRoleUserCollectionViaEventCustomers_ = null;
			_organizationRoleUserCollectionViaEventCustomerResult__ = null;
			_organizationRoleUserCollectionViaEventCustomerResult____ = null;
			_organizationRoleUserCollectionViaEventCustomerResult______ = null;
			_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = null;
			_organizationRoleUserCollectionViaEventCustomerResult_____ = null;
			_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt = null;
			_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = null;
			_organizationRoleUserCollectionViaCurrentMedication = null;
			_organizationRoleUserCollectionViaEventCustomerResult = null;
			_organizationRoleUserCollectionViaEventCustomerResult_______ = null;
			_organizationRoleUserCollectionViaEventCustomerResult_ = null;
			_organizationRoleUserCollectionViaEventCustomerResult________ = null;
			_physicianEvaluationCollectionViaPhysicianInvoiceItem = null;
			_physicianInvoiceCollectionViaPhysicianInvoiceItem = null;
			_physicianMasterCollectionViaCustomerPrimaryCarePhysician = null;
			_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = null;
			_preQualificationQuestionCollectionViaDisqualifiedTest = null;
			_prospectCustomerCollectionViaClickConversion = null;
			_prospectCustomerCollectionViaTempCart = null;
			_prospectCustomerCollectionViaCallQueueCustomer = null;
			_rapsUploadCollectionViaRaps = null;
			_relationshipCollectionViaChaseOutbound = null;
			_relationshipCollectionViaGuardianDetails = null;
			_resultArchiveUploadCollectionViaResultArchiveUploadLog = null;
			_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification = null;
			_suspectConditionUploadCollectionViaSuspectCondition = null;
			_tagCollectionViaCustomerCallQueueCallAttempt = null;
			_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt = null;
			_tempCartCollectionViaPreQualificationResult = null;
			_testCollectionViaDependentDisqualifiedTest = null;
			_testCollectionViaDisqualifiedTest = null;
			_testCollectionViaRequiredTest = null;
			_testCollectionViaResultArchiveUploadLog = null;
			_testCollectionViaCustomerEventTestFinding = null;
			_activityType = null;
			_address = null;
			_lab = null;
			_language = null;
			_lookup______ = null;
			_lookup_____ = null;
			_lookup_______ = null;
			_lookup________ = null;
			_lookup____ = null;
			_lookup_ = null;
			_lookup = null;
			_lookup___ = null;
			_lookup__ = null;
			_notesDetails = null;
			_role = null;
			_customerCallAttempts = null;
			_customerLockForCall = null;
			_customerResultPosted = null;
			_customerTrale = null;
			_organizationRoleUser = null;
			PerformDependencyInjection();
			
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		#region Custom Property Hashtable Setup
		/// <summary> Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();

			Dictionary<string, string> fieldHashtable = null;
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("CustomerId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DisplayId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BillingAddressId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsActive", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Height", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Weight", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Gender", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Race", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Age", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DateCreated", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DateModified", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("TrackingMarketingId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AddedByRoleId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Employer", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EmergencyContactName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EmergencyContactRelationship", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EmergencyContactPhoneNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DoNotContactReasonId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DoNotContactReasonNotesId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("RequestNewsLetter", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EmployeeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("InsuranceId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PreferredLanguage", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BestTimeToCall", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Waist", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Hicn", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableTexting", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("MedicareAdvantageNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Tag", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("MedicareAdvantagePlanName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("LanguageId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("LabId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Copay", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Lpi", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Market", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Mrn", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GroupName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsIncorrectPhoneNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsLanguageBarrier", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DoNotContactTypeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableVoiceMail", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AdditionalField1", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AdditionalField2", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AdditionalField3", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AdditionalField4", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("ActivityId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DoNotContactUpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DoNotContactUpdateSource", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsSubscribed", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IncorrectPhoneNumberMarkedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("LanguageBarrierMarkedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PreferredContactType", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Mbi", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AcesId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneHomeConsentId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneHomeConsentUpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneCellConsentId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneCellConsentUpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneOfficeConsentId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("PhoneOfficeConsentUpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BillingMemberId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BillingMemberPlan", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BillingMemberPlanYear", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableEmail", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableEmailUpdateDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("MemberUploadSourceId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("ActivityTypeIsManual", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("ProductTypeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AcesClientId", fieldHashtable);
		}
		#endregion

		/// <summary> Removes the sync logic for member _activityType</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncActivityType(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _activityType, new PropertyChangedEventHandler( OnActivityTypePropertyChanged ), "ActivityType", CustomerProfileEntity.Relations.ActivityTypeEntityUsingActivityId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.ActivityId } );		
			_activityType = null;
		}

		/// <summary> setups the sync logic for member _activityType</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncActivityType(IEntity2 relatedEntity)
		{
			if(_activityType!=relatedEntity)
			{
				DesetupSyncActivityType(true, true);
				_activityType = (ActivityTypeEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _activityType, new PropertyChangedEventHandler( OnActivityTypePropertyChanged ), "ActivityType", CustomerProfileEntity.Relations.ActivityTypeEntityUsingActivityId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnActivityTypePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _address</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncAddress(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _address, new PropertyChangedEventHandler( OnAddressPropertyChanged ), "Address", CustomerProfileEntity.Relations.AddressEntityUsingBillingAddressId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.BillingAddressId } );		
			_address = null;
		}

		/// <summary> setups the sync logic for member _address</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncAddress(IEntity2 relatedEntity)
		{
			if(_address!=relatedEntity)
			{
				DesetupSyncAddress(true, true);
				_address = (AddressEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _address, new PropertyChangedEventHandler( OnAddressPropertyChanged ), "Address", CustomerProfileEntity.Relations.AddressEntityUsingBillingAddressId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnAddressPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lab</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLab(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lab, new PropertyChangedEventHandler( OnLabPropertyChanged ), "Lab", CustomerProfileEntity.Relations.LabEntityUsingLabId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.LabId } );		
			_lab = null;
		}

		/// <summary> setups the sync logic for member _lab</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLab(IEntity2 relatedEntity)
		{
			if(_lab!=relatedEntity)
			{
				DesetupSyncLab(true, true);
				_lab = (LabEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lab, new PropertyChangedEventHandler( OnLabPropertyChanged ), "Lab", CustomerProfileEntity.Relations.LabEntityUsingLabId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLabPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _language</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLanguage(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _language, new PropertyChangedEventHandler( OnLanguagePropertyChanged ), "Language", CustomerProfileEntity.Relations.LanguageEntityUsingLanguageId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.LanguageId } );		
			_language = null;
		}

		/// <summary> setups the sync logic for member _language</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLanguage(IEntity2 relatedEntity)
		{
			if(_language!=relatedEntity)
			{
				DesetupSyncLanguage(true, true);
				_language = (LanguageEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _language, new PropertyChangedEventHandler( OnLanguagePropertyChanged ), "Language", CustomerProfileEntity.Relations.LanguageEntityUsingLanguageId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLanguagePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup______</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup______(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup______, new PropertyChangedEventHandler( OnLookup______PropertyChanged ), "Lookup______", CustomerProfileEntity.Relations.LookupEntityUsingPreferredContactType, true, signalRelatedEntity, "CustomerProfile______", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.PreferredContactType } );		
			_lookup______ = null;
		}

		/// <summary> setups the sync logic for member _lookup______</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup______(IEntity2 relatedEntity)
		{
			if(_lookup______!=relatedEntity)
			{
				DesetupSyncLookup______(true, true);
				_lookup______ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup______, new PropertyChangedEventHandler( OnLookup______PropertyChanged ), "Lookup______", CustomerProfileEntity.Relations.LookupEntityUsingPreferredContactType, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup______PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup_____</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup_____(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup_____, new PropertyChangedEventHandler( OnLookup_____PropertyChanged ), "Lookup_____", CustomerProfileEntity.Relations.LookupEntityUsingPhoneOfficeConsentId, true, signalRelatedEntity, "CustomerProfile_____", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.PhoneOfficeConsentId } );		
			_lookup_____ = null;
		}

		/// <summary> setups the sync logic for member _lookup_____</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup_____(IEntity2 relatedEntity)
		{
			if(_lookup_____!=relatedEntity)
			{
				DesetupSyncLookup_____(true, true);
				_lookup_____ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup_____, new PropertyChangedEventHandler( OnLookup_____PropertyChanged ), "Lookup_____", CustomerProfileEntity.Relations.LookupEntityUsingPhoneOfficeConsentId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup_____PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup_______</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup_______(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup_______, new PropertyChangedEventHandler( OnLookup_______PropertyChanged ), "Lookup_______", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactReasonId, true, signalRelatedEntity, "CustomerProfile_______", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.DoNotContactReasonId } );		
			_lookup_______ = null;
		}

		/// <summary> setups the sync logic for member _lookup_______</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup_______(IEntity2 relatedEntity)
		{
			if(_lookup_______!=relatedEntity)
			{
				DesetupSyncLookup_______(true, true);
				_lookup_______ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup_______, new PropertyChangedEventHandler( OnLookup_______PropertyChanged ), "Lookup_______", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactReasonId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup_______PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup________</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup________(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup________, new PropertyChangedEventHandler( OnLookup________PropertyChanged ), "Lookup________", CustomerProfileEntity.Relations.LookupEntityUsingProductTypeId, true, signalRelatedEntity, "CustomerProfile________", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.ProductTypeId } );		
			_lookup________ = null;
		}

		/// <summary> setups the sync logic for member _lookup________</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup________(IEntity2 relatedEntity)
		{
			if(_lookup________!=relatedEntity)
			{
				DesetupSyncLookup________(true, true);
				_lookup________ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup________, new PropertyChangedEventHandler( OnLookup________PropertyChanged ), "Lookup________", CustomerProfileEntity.Relations.LookupEntityUsingProductTypeId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup________PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup____</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup____(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup____, new PropertyChangedEventHandler( OnLookup____PropertyChanged ), "Lookup____", CustomerProfileEntity.Relations.LookupEntityUsingPhoneHomeConsentId, true, signalRelatedEntity, "CustomerProfile____", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.PhoneHomeConsentId } );		
			_lookup____ = null;
		}

		/// <summary> setups the sync logic for member _lookup____</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup____(IEntity2 relatedEntity)
		{
			if(_lookup____!=relatedEntity)
			{
				DesetupSyncLookup____(true, true);
				_lookup____ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup____, new PropertyChangedEventHandler( OnLookup____PropertyChanged ), "Lookup____", CustomerProfileEntity.Relations.LookupEntityUsingPhoneHomeConsentId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup____PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup_</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup_(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup_, new PropertyChangedEventHandler( OnLookup_PropertyChanged ), "Lookup_", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactUpdateSource, true, signalRelatedEntity, "CustomerProfile_", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.DoNotContactUpdateSource } );		
			_lookup_ = null;
		}

		/// <summary> setups the sync logic for member _lookup_</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup_(IEntity2 relatedEntity)
		{
			if(_lookup_!=relatedEntity)
			{
				DesetupSyncLookup_(true, true);
				_lookup_ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup_, new PropertyChangedEventHandler( OnLookup_PropertyChanged ), "Lookup_", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactUpdateSource, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup_PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup, new PropertyChangedEventHandler( OnLookupPropertyChanged ), "Lookup", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactTypeId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.DoNotContactTypeId } );		
			_lookup = null;
		}

		/// <summary> setups the sync logic for member _lookup</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup(IEntity2 relatedEntity)
		{
			if(_lookup!=relatedEntity)
			{
				DesetupSyncLookup(true, true);
				_lookup = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup, new PropertyChangedEventHandler( OnLookupPropertyChanged ), "Lookup", CustomerProfileEntity.Relations.LookupEntityUsingDoNotContactTypeId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookupPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup___</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup___(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup___, new PropertyChangedEventHandler( OnLookup___PropertyChanged ), "Lookup___", CustomerProfileEntity.Relations.LookupEntityUsingPhoneCellConsentId, true, signalRelatedEntity, "CustomerProfile___", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.PhoneCellConsentId } );		
			_lookup___ = null;
		}

		/// <summary> setups the sync logic for member _lookup___</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup___(IEntity2 relatedEntity)
		{
			if(_lookup___!=relatedEntity)
			{
				DesetupSyncLookup___(true, true);
				_lookup___ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup___, new PropertyChangedEventHandler( OnLookup___PropertyChanged ), "Lookup___", CustomerProfileEntity.Relations.LookupEntityUsingPhoneCellConsentId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup___PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup__</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup__(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup__, new PropertyChangedEventHandler( OnLookup__PropertyChanged ), "Lookup__", CustomerProfileEntity.Relations.LookupEntityUsingMemberUploadSourceId, true, signalRelatedEntity, "CustomerProfile__", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.MemberUploadSourceId } );		
			_lookup__ = null;
		}

		/// <summary> setups the sync logic for member _lookup__</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup__(IEntity2 relatedEntity)
		{
			if(_lookup__!=relatedEntity)
			{
				DesetupSyncLookup__(true, true);
				_lookup__ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup__, new PropertyChangedEventHandler( OnLookup__PropertyChanged ), "Lookup__", CustomerProfileEntity.Relations.LookupEntityUsingMemberUploadSourceId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup__PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _notesDetails</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncNotesDetails(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _notesDetails, new PropertyChangedEventHandler( OnNotesDetailsPropertyChanged ), "NotesDetails", CustomerProfileEntity.Relations.NotesDetailsEntityUsingDoNotContactReasonNotesId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.DoNotContactReasonNotesId } );		
			_notesDetails = null;
		}

		/// <summary> setups the sync logic for member _notesDetails</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncNotesDetails(IEntity2 relatedEntity)
		{
			if(_notesDetails!=relatedEntity)
			{
				DesetupSyncNotesDetails(true, true);
				_notesDetails = (NotesDetailsEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _notesDetails, new PropertyChangedEventHandler( OnNotesDetailsPropertyChanged ), "NotesDetails", CustomerProfileEntity.Relations.NotesDetailsEntityUsingDoNotContactReasonNotesId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnNotesDetailsPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _role</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncRole(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _role, new PropertyChangedEventHandler( OnRolePropertyChanged ), "Role", CustomerProfileEntity.Relations.RoleEntityUsingAddedByRoleId, true, signalRelatedEntity, "CustomerProfile", resetFKFields, new int[] { (int)CustomerProfileFieldIndex.AddedByRoleId } );		
			_role = null;
		}

		/// <summary> setups the sync logic for member _role</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncRole(IEntity2 relatedEntity)
		{
			if(_role!=relatedEntity)
			{
				DesetupSyncRole(true, true);
				_role = (RoleEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _role, new PropertyChangedEventHandler( OnRolePropertyChanged ), "Role", CustomerProfileEntity.Relations.RoleEntityUsingAddedByRoleId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnRolePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _customerCallAttempts</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCustomerCallAttempts(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _customerCallAttempts, new PropertyChangedEventHandler( OnCustomerCallAttemptsPropertyChanged ), "CustomerCallAttempts", CustomerProfileEntity.Relations.CustomerCallAttemptsEntityUsingCustomerId, false, signalRelatedEntity, "CustomerProfile", false, new int[] { (int)CustomerProfileFieldIndex.CustomerId } );
			_customerCallAttempts = null;
		}
		
		/// <summary> setups the sync logic for member _customerCallAttempts</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCustomerCallAttempts(IEntity2 relatedEntity)
		{
			if(_customerCallAttempts!=relatedEntity)
			{
				DesetupSyncCustomerCallAttempts(true, true);
				_customerCallAttempts = (CustomerCallAttemptsEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _customerCallAttempts, new PropertyChangedEventHandler( OnCustomerCallAttemptsPropertyChanged ), "CustomerCallAttempts", CustomerProfileEntity.Relations.CustomerCallAttemptsEntityUsingCustomerId, false, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCustomerCallAttemptsPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _customerLockForCall</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCustomerLockForCall(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _customerLockForCall, new PropertyChangedEventHandler( OnCustomerLockForCallPropertyChanged ), "CustomerLockForCall", CustomerProfileEntity.Relations.CustomerLockForCallEntityUsingCustomerId, false, signalRelatedEntity, "CustomerProfile", false, new int[] { (int)CustomerProfileFieldIndex.CustomerId } );
			_customerLockForCall = null;
		}
		
		/// <summary> setups the sync logic for member _customerLockForCall</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCustomerLockForCall(IEntity2 relatedEntity)
		{
			if(_customerLockForCall!=relatedEntity)
			{
				DesetupSyncCustomerLockForCall(true, true);
				_customerLockForCall = (CustomerLockForCallEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _customerLockForCall, new PropertyChangedEventHandler( OnCustomerLockForCallPropertyChanged ), "CustomerLockForCall", CustomerProfileEntity.Relations.CustomerLockForCallEntityUsingCustomerId, false, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCustomerLockForCallPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _customerResultPosted</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCustomerResultPosted(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _customerResultPosted, new PropertyChangedEventHandler( OnCustomerResultPostedPropertyChanged ), "CustomerResultPosted", CustomerProfileEntity.Relations.CustomerResultPostedEntityUsingCustomerId, false, signalRelatedEntity, "CustomerProfile", false, new int[] { (int)CustomerProfileFieldIndex.CustomerId } );
			_customerResultPosted = null;
		}
		
		/// <summary> setups the sync logic for member _customerResultPosted</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCustomerResultPosted(IEntity2 relatedEntity)
		{
			if(_customerResultPosted!=relatedEntity)
			{
				DesetupSyncCustomerResultPosted(true, true);
				_customerResultPosted = (CustomerResultPostedEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _customerResultPosted, new PropertyChangedEventHandler( OnCustomerResultPostedPropertyChanged ), "CustomerResultPosted", CustomerProfileEntity.Relations.CustomerResultPostedEntityUsingCustomerId, false, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCustomerResultPostedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _customerTrale</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCustomerTrale(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _customerTrale, new PropertyChangedEventHandler( OnCustomerTralePropertyChanged ), "CustomerTrale", CustomerProfileEntity.Relations.CustomerTraleEntityUsingCustomerId, false, signalRelatedEntity, "CustomerProfile", false, new int[] { (int)CustomerProfileFieldIndex.CustomerId } );
			_customerTrale = null;
		}
		
		/// <summary> setups the sync logic for member _customerTrale</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCustomerTrale(IEntity2 relatedEntity)
		{
			if(_customerTrale!=relatedEntity)
			{
				DesetupSyncCustomerTrale(true, true);
				_customerTrale = (CustomerTraleEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _customerTrale, new PropertyChangedEventHandler( OnCustomerTralePropertyChanged ), "CustomerTrale", CustomerProfileEntity.Relations.CustomerTraleEntityUsingCustomerId, false, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCustomerTralePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser, new PropertyChangedEventHandler( OnOrganizationRoleUserPropertyChanged ), "OrganizationRoleUser", CustomerProfileEntity.Relations.OrganizationRoleUserEntityUsingCustomerId, true, signalRelatedEntity, "CustomerProfile", false, new int[] { (int)CustomerProfileFieldIndex.CustomerId } );
			_organizationRoleUser = null;
		}
		
		/// <summary> setups the sync logic for member _organizationRoleUser</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser(true, true);
				_organizationRoleUser = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser, new PropertyChangedEventHandler( OnOrganizationRoleUserPropertyChanged ), "OrganizationRoleUser", CustomerProfileEntity.Relations.OrganizationRoleUserEntityUsingCustomerId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUserPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CustomerProfileEntity</param>
		/// <param name="fields">Fields of this entity</param>
		protected virtual void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			base.Fields = fields;
			base.IsNew=true;
			base.Validator = validator;
			InitClassMembers();

			
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		#region Class Property Declarations
		/// <summary> The relations object holding all relations of this entity with other entity classes.</summary>
		public  static CustomerProfileRelations Relations
		{
			get	{ return new CustomerProfileRelations(); }
		}
		
		/// <summary> The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties
		{
			get { return _customProperties;}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueueCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCustomer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))),
					(IEntityRelation)GetRelationsForField("CallQueueCustomer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallQueueCustomerEntity, 0, null, null, null, null, "CallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallRoundCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallRoundCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CallRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallRoundCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("CallRoundCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallRoundCallQueueEntity, 0, null, null, null, null, "CallRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseOutbound' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseOutbound
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))),
					(IEntityRelation)GetRelationsForField("ChaseOutbound")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseOutboundEntity, 0, null, null, null, null, "ChaseOutbound", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ClickConversion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathClickConversion
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ClickConversionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickConversionEntityFactory))),
					(IEntityRelation)GetRelationsForField("ClickConversion")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ClickConversionEntity, 0, null, null, null, null, "ClickConversion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CurrentMedication' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCurrentMedication
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CurrentMedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CurrentMedicationEntityFactory))),
					(IEntityRelation)GetRelationsForField("CurrentMedication")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CurrentMedicationEntity, 0, null, null, null, null, "CurrentMedication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerAccountGlocomNumber' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerAccountGlocomNumber
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerAccountGlocomNumberEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerAccountGlocomNumberEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerAccountGlocomNumber")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerAccountGlocomNumberEntity, 0, null, null, null, null, "CustomerAccountGlocomNumber", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerBillingAccount' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerBillingAccount
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerBillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerBillingAccountEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerBillingAccount")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerBillingAccountEntity, 0, null, null, null, null, "CustomerBillingAccount", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerCallQueueCallAttempt' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerCallQueueCallAttempt
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerCallQueueCallAttemptEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerCallQueueCallAttempt")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerCallQueueCallAttemptEntity, 0, null, null, null, null, "CustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerChaseCampaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerChaseCampaign
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseCampaignEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerChaseCampaign")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerChaseCampaignEntity, 0, null, null, null, null, "CustomerChaseCampaign", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerChaseChannel' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerChaseChannel
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerChaseChannelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseChannelEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerChaseChannel")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerChaseChannelEntity, 0, null, null, null, null, "CustomerChaseChannel", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerChaseProduct' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerChaseProduct
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseProductEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerChaseProduct")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerChaseProductEntity, 0, null, null, null, null, "CustomerChaseProduct", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerClinicalQuestionAnswer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerClinicalQuestionAnswer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerClinicalQuestionAnswer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerClinicalQuestionAnswerEntity, 0, null, null, null, null, "CustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerEligibility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerEligibility
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerEligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEligibilityEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerEligibility")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerEligibilityEntity, 0, null, null, null, null, "CustomerEligibility", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerEventTestFinding' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerEventTestFinding
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerEventTestFinding")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerEventTestFindingEntity, 0, null, null, null, null, "CustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthInfo' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthInfo
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerHealthInfoEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerHealthInfo")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerHealthInfoEntity, 0, null, null, null, null, "CustomerHealthInfo", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthInfoArchive' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthInfoArchive
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerHealthInfoArchiveEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoArchiveEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerHealthInfoArchive")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerHealthInfoArchiveEntity, 0, null, null, null, null, "CustomerHealthInfoArchive", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerIcdCode' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerIcdCode
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerIcdCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerIcdCodeEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerIcdCode")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerIcdCodeEntity, 0, null, null, null, null, "CustomerIcdCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerOrderHistory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerOrderHistory
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerOrderHistory")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerOrderHistoryEntity, 0, null, null, null, null, "CustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerPredictedZip' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerPredictedZip
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerPredictedZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPredictedZipEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerPredictedZip")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerPredictedZipEntity, 0, null, null, null, null, "CustomerPredictedZip", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerPrimaryCarePhysician' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerPrimaryCarePhysician
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerPrimaryCarePhysicianEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPrimaryCarePhysicianEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerPrimaryCarePhysician")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerPrimaryCarePhysicianEntity, 0, null, null, null, null, "CustomerPrimaryCarePhysician", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfileHistory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileHistory
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerProfileHistory")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerProfileHistoryEntity, 0, null, null, null, null, "CustomerProfileHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerSurvey' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerSurvey
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerSurveyEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerSurvey")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerSurveyEntity, 0, null, null, null, null, "CustomerSurvey", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerTag' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerTag
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerTagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTagEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerTag")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerTagEntity, 0, null, null, null, null, "CustomerTag", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerTargeted' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerTargeted
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerTargetedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTargetedEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerTargeted")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerTargetedEntity, 0, null, null, null, null, "CustomerTargeted", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerUnsubscribedSmsNotification' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerUnsubscribedSmsNotification
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerUnsubscribedSmsNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerUnsubscribedSmsNotificationEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerUnsubscribedSmsNotification")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerUnsubscribedSmsNotificationEntity, 0, null, null, null, null, "CustomerUnsubscribedSmsNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerWarmTransfer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerWarmTransfer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerWarmTransferEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerWarmTransferEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerWarmTransfer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerWarmTransferEntity, 0, null, null, null, null, "CustomerWarmTransfer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DependentDisqualifiedTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDependentDisqualifiedTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("DependentDisqualifiedTest")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.DependentDisqualifiedTestEntity, 0, null, null, null, null, "DependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DirectMail' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDirectMail
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<DirectMailEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailEntityFactory))),
					(IEntityRelation)GetRelationsForField("DirectMail")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.DirectMailEntity, 0, null, null, null, null, "DirectMail", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DisqualifiedTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDisqualifiedTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("DisqualifiedTest")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.DisqualifiedTestEntity, 0, null, null, null, null, "DisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomerQuestionAnswer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomerQuestionAnswer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomerQuestionAnswer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomerQuestionAnswerEntity, 0, null, null, null, null, "EventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomerResult' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomerResult
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomerResult")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomerResultEntity, 0, null, null, null, null, "EventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomers
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomers")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, null, null, "EventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPaymentDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPaymentDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventPaymentDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPaymentDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventPaymentDetails")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventPaymentDetailsEntity, 0, null, null, null, null, "EventPaymentDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'FillEventCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFillEventCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<FillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FillEventCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("FillEventCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.FillEventCallQueueEntity, 0, null, null, null, null, "FillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'GuardianDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGuardianDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<GuardianDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GuardianDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("GuardianDetails")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.GuardianDetailsEntity, 0, null, null, null, null, "GuardianDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalPartnerCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalPartnerCustomer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory))),
					(IEntityRelation)GetRelationsForField("HospitalPartnerCustomer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.HospitalPartnerCustomerEntity, 0, null, null, null, null, "HospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LanguageBarrierCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLanguageBarrierCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<LanguageBarrierCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageBarrierCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("LanguageBarrierCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LanguageBarrierCallQueueEntity, 0, null, null, null, null, "LanguageBarrierCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MailRoundCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMailRoundCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<MailRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MailRoundCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("MailRoundCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.MailRoundCallQueueEntity, 0, null, null, null, null, "MailRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Medication' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMedication
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<MedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MedicationEntityFactory))),
					(IEntityRelation)GetRelationsForField("Medication")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.MedicationEntity, 0, null, null, null, null, "Medication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MemberUploadLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMemberUploadLog
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<MemberUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MemberUploadLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("MemberUploadLog")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.MemberUploadLogEntity, 0, null, null, null, null, "MemberUploadLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'NoShowCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNoShowCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<NoShowCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NoShowCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("NoShowCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.NoShowCallQueueEntity, 0, null, null, null, null, "NoShowCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianInvoiceItem' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianInvoiceItem
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory))),
					(IEntityRelation)GetRelationsForField("PhysicianInvoiceItem")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PhysicianInvoiceItemEntity, 0, null, null, null, null, "PhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreAssessmentCustomerCallQueueCallAttempt' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreAssessmentCustomerCallQueueCallAttemptEntityFactory))),
					(IEntityRelation)GetRelationsForField("PreAssessmentCustomerCallQueueCallAttempt")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PreAssessmentCustomerCallQueueCallAttemptEntity, 0, null, null, null, null, "PreAssessmentCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationResult' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationResult
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory))),
					(IEntityRelation)GetRelationsForField("PreQualificationResult")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PreQualificationResultEntity, 0, null, null, null, null, "PreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProspectCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectCustomer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))),
					(IEntityRelation)GetRelationsForField("ProspectCustomer")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ProspectCustomerEntity, 0, null, null, null, null, "ProspectCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Raps' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRaps
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<RapsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsEntityFactory))),
					(IEntityRelation)GetRelationsForField("Raps")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RapsEntity, 0, null, null, null, null, "Raps", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Referral' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathReferral
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ReferralEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ReferralEntityFactory))),
					(IEntityRelation)GetRelationsForField("Referral")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ReferralEntity, 0, null, null, null, null, "Referral", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RequiredTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRequiredTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<RequiredTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RequiredTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("RequiredTest")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RequiredTestEntity, 0, null, null, null, null, "RequiredTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ResultArchiveUploadLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathResultArchiveUploadLog
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ResultArchiveUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("ResultArchiveUploadLog")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ResultArchiveUploadLogEntity, 0, null, null, null, null, "ResultArchiveUploadLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SuspectCondition' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSuspectCondition
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<SuspectConditionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionEntityFactory))),
					(IEntityRelation)GetRelationsForField("SuspectCondition")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.SuspectConditionEntity, 0, null, null, null, null, "SuspectCondition", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TempCart' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTempCart
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))),
					(IEntityRelation)GetRelationsForField("TempCart")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TempCartEntity, 0, null, null, null, null, "TempCart", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Testimonial' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestimonial
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<TestimonialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestimonialEntityFactory))),
					(IEntityRelation)GetRelationsForField("Testimonial")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestimonialEntity, 0, null, null, null, null, "Testimonial", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UncontactedCustomerCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUncontactedCustomerCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<UncontactedCustomerCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(UncontactedCustomerCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("UncontactedCustomerCallQueue")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.UncontactedCustomerCallQueueEntity, 0, null, null, null, null, "UncontactedCustomerCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "LanguageBarrierCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaLanguageBarrierCallQueue"), null, "AccountCollectionViaLanguageBarrierCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "UncontactedCustomerCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaUncontactedCustomerCallQueue"), null, "AccountCollectionViaUncontactedCustomerCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaMailRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "MailRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaMailRoundCallQueue"), null, "AccountCollectionViaMailRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaCallRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaCallRoundCallQueue"), null, "AccountCollectionViaCallRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaNoShowCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "NoShowCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaNoShowCallQueue"), null, "AccountCollectionViaNoShowCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaCallQueueCustomer"), null, "AccountCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaFillEventCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "FillEventCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaFillEventCallQueue"), null, "AccountCollectionViaFillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ActivityType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathActivityTypeCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ActivityTypeEntity, 0, null, null, GetRelationsForField("ActivityTypeCollectionViaCallQueueCustomer"), null, "ActivityTypeCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddressCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AddressEntity, 0, null, null, GetRelationsForField("AddressCollectionViaCustomerPrimaryCarePhysician"), null, "AddressCollectionViaCustomerPrimaryCarePhysician", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddressCollectionViaCustomerPrimaryCarePhysician_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AddressEntity, 0, null, null, GetRelationsForField("AddressCollectionViaCustomerPrimaryCarePhysician_"), null, "AddressCollectionViaCustomerPrimaryCarePhysician_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AfaffiliateCampaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfaffiliateCampaignCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AfaffiliateCampaignEntity, 0, null, null, GetRelationsForField("AfaffiliateCampaignCollectionViaEventCustomers"), null, "AfaffiliateCampaignCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AfaffiliateCampaignMarketingMaterial' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ProspectCustomer_");
				return new PrefetchPathElement2(new EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignMarketingMaterialEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AfaffiliateCampaignMarketingMaterialEntity, 0, null, null, GetRelationsForField("AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer"), null, "AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'BillingAccount' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBillingAccountCollectionViaCustomerBillingAccount
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerBillingAccountEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerBillingAccount_");
				return new PrefetchPathElement2(new EntityCollection<BillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(BillingAccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.BillingAccountEntity, 0, null, null, GetRelationsForField("BillingAccountCollectionViaCustomerBillingAccount"), null, "BillingAccountCollectionViaCustomerBillingAccount", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallQueueEntity, 0, null, null, GetRelationsForField("CallQueueCollectionViaCallQueueCustomer"), null, "CallQueueCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueueCriteria' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCriteriaCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallQueueCriteriaEntity, 0, null, null, GetRelationsForField("CallQueueCriteriaCollectionViaCallQueueCustomer"), null, "CallQueueCriteriaCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueueCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCustomerCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallQueueCustomerEntity, 0, null, null, GetRelationsForField("CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt"), null, "CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Calls' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallsCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallsEntity, 0, null, null, GetRelationsForField("CallsCollectionViaPreQualificationResult"), null, "CallsCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Calls' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallsCollectionViaCustomerAccountGlocomNumber
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerAccountGlocomNumberEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerAccountGlocomNumber_");
				return new PrefetchPathElement2(new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallsEntity, 0, null, null, GetRelationsForField("CallsCollectionViaCustomerAccountGlocomNumber"), null, "CallsCollectionViaCustomerAccountGlocomNumber", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Calls' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallsCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallsEntity, 0, null, null, GetRelationsForField("CallsCollectionViaCustomerCallQueueCallAttempt"), null, "CallsCollectionViaCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Calls' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreAssessmentCustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallsEntity, 0, null, null, GetRelationsForField("CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt"), null, "CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallUploadCollectionViaDirectMail
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DirectMail_");
				return new PrefetchPathElement2(new EntityCollection<CallUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CallUploadEntity, 0, null, null, GetRelationsForField("CallUploadCollectionViaDirectMail"), null, "CallUploadCollectionViaDirectMail", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Campaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCampaignCollectionViaDirectMail
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DirectMail_");
				return new PrefetchPathElement2(new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CampaignEntity, 0, null, null, GetRelationsForField("CampaignCollectionViaDirectMail"), null, "CampaignCollectionViaDirectMail", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Campaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCampaignCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CampaignEntity, 0, null, null, GetRelationsForField("CampaignCollectionViaEventCustomers"), null, "CampaignCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Campaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCampaignCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CampaignEntity, 0, null, null, GetRelationsForField("CampaignCollectionViaCallQueueCustomer"), null, "CampaignCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChargeCard' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChargeCardCollectionViaTempCart
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "TempCart_");
				return new PrefetchPathElement2(new EntityCollection<ChargeCardEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChargeCardEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChargeCardEntity, 0, null, null, GetRelationsForField("ChargeCardCollectionViaTempCart"), null, "ChargeCardCollectionViaTempCart", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseCampaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseCampaignCollectionViaCustomerChaseCampaign
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseCampaignEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseCampaign_");
				return new PrefetchPathElement2(new EntityCollection<ChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseCampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseCampaignEntity, 0, null, null, GetRelationsForField("ChaseCampaignCollectionViaCustomerChaseCampaign"), null, "ChaseCampaignCollectionViaCustomerChaseCampaign", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseChannelLevel' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseChannelLevelCollectionViaCustomerChaseChannel
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseChannelEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseChannel_");
				return new PrefetchPathElement2(new EntityCollection<ChaseChannelLevelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseChannelLevelEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseChannelLevelEntity, 0, null, null, GetRelationsForField("ChaseChannelLevelCollectionViaCustomerChaseChannel"), null, "ChaseChannelLevelCollectionViaCustomerChaseChannel", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseGroup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseGroupCollectionViaChaseOutbound
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ChaseOutbound_");
				return new PrefetchPathElement2(new EntityCollection<ChaseGroupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseGroupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseGroupEntity, 0, null, null, GetRelationsForField("ChaseGroupCollectionViaChaseOutbound"), null, "ChaseGroupCollectionViaChaseOutbound", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseOutbound' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseOutboundCollectionViaCustomerChaseProduct
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseProductEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseProduct_");
				return new PrefetchPathElement2(new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseOutboundEntity, 0, null, null, GetRelationsForField("ChaseOutboundCollectionViaCustomerChaseProduct"), null, "ChaseOutboundCollectionViaCustomerChaseProduct", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseOutbound' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseOutboundCollectionViaCustomerChaseChannel
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseChannelEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseChannel_");
				return new PrefetchPathElement2(new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseOutboundEntity, 0, null, null, GetRelationsForField("ChaseOutboundCollectionViaCustomerChaseChannel"), null, "ChaseOutboundCollectionViaCustomerChaseChannel", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseOutbound' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseOutboundCollectionViaCustomerChaseCampaign
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseCampaignEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseCampaign_");
				return new PrefetchPathElement2(new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseOutboundEntity, 0, null, null, GetRelationsForField("ChaseOutboundCollectionViaCustomerChaseCampaign"), null, "ChaseOutboundCollectionViaCustomerChaseCampaign", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ChaseProduct' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathChaseProductCollectionViaCustomerChaseProduct
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerChaseProductEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerChaseProduct_");
				return new PrefetchPathElement2(new EntityCollection<ChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseProductEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ChaseProductEntity, 0, null, null, GetRelationsForField("ChaseProductCollectionViaCustomerChaseProduct"), null, "ChaseProductCollectionViaCustomerChaseProduct", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ClickLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathClickLogCollectionViaClickConversion
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ClickConversion_");
				return new PrefetchPathElement2(new EntityCollection<ClickLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickLogEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ClickLogEntity, 0, null, null, GetRelationsForField("ClickLogCollectionViaClickConversion"), null, "ClickLogCollectionViaClickConversion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CorporateUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCorporateUploadCollectionViaMemberUploadLog
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MemberUploadLogEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "MemberUploadLog_");
				return new PrefetchPathElement2(new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CorporateUploadEntity, 0, null, null, GetRelationsForField("CorporateUploadCollectionViaMemberUploadLog"), null, "CorporateUploadCollectionViaMemberUploadLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CorporateUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCorporateUploadCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CorporateUploadEntity, 0, null, null, GetRelationsForField("CorporateUploadCollectionViaCustomerOrderHistory"), null, "CorporateUploadCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthQuestions' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerHealthQuestionsEntity, 0, null, null, GetRelationsForField("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer"), null, "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthQuestions' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthQuestionsCollectionViaCustomerHealthInfo
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfo_");
				return new PrefetchPathElement2(new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerHealthQuestionsEntity, 0, null, null, GetRelationsForField("CustomerHealthQuestionsCollectionViaCustomerHealthInfo"), null, "CustomerHealthQuestionsCollectionViaCustomerHealthInfo", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthQuestions' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfoArchive_");
				return new PrefetchPathElement2(new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerHealthQuestionsEntity, 0, null, null, GetRelationsForField("CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive"), null, "CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfileHistory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileHistoryCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerProfileHistoryEntity, 0, null, null, GetRelationsForField("CustomerProfileHistoryCollectionViaEventCustomers"), null, "CustomerProfileHistoryCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerRegistrationNotes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerRegistrationNotesCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerRegistrationNotesEntity, 0, null, null, GetRelationsForField("CustomerRegistrationNotesCollectionViaEventCustomers"), null, "CustomerRegistrationNotesCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerSurveyQuestionAnswer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerSurveyQuestionAnswerCollectionViaCustomerSurvey
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerSurveyEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerSurvey_");
				return new PrefetchPathElement2(new EntityCollection<CustomerSurveyQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyQuestionAnswerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerSurveyQuestionAnswerEntity, 0, null, null, GetRelationsForField("CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey"), null, "CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DirectMailType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDirectMailTypeCollectionViaDirectMail
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DirectMail_");
				return new PrefetchPathElement2(new EntityCollection<DirectMailTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailTypeEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.DirectMailTypeEntity, 0, null, null, GetRelationsForField("DirectMailTypeCollectionViaDirectMail"), null, "DirectMailTypeCollectionViaDirectMail", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Eligibility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEligibilityCollectionViaTempCart
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "TempCart_");
				return new PrefetchPathElement2(new EntityCollection<EligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EligibilityEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EligibilityEntity, 0, null, null, GetRelationsForField("EligibilityCollectionViaTempCart"), null, "EligibilityCollectionViaTempCart", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAppointment' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAppointmentCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventAppointmentEntity, 0, null, null, GetRelationsForField("EventAppointmentCollectionViaEventCustomers"), null, "EventAppointmentCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfoArchive_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCustomerHealthInfoArchive"), null, "EventCustomersCollectionViaCustomerHealthInfoArchive", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCallQueueCustomer"), null, "EventCustomersCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaDependentDisqualifiedTest"), null, "EventCustomersCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCustomerOrderHistory"), null, "EventCustomersCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaDisqualifiedTest"), null, "EventCustomersCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaClickConversion
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ClickConversion_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaClickConversion"), null, "EventCustomersCollectionViaClickConversion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCustomerHealthInfo
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfo_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCustomerHealthInfo"), null, "EventCustomersCollectionViaCustomerHealthInfo", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaEventCustomerQuestionAnswer"), null, "EventCustomersCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPackageDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPackageDetailsCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventPackageDetailsEntity, 0, null, null, GetRelationsForField("EventPackageDetailsCollectionViaCustomerOrderHistory"), null, "EventPackageDetailsCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPackageDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPackageDetailsCollectionViaEventPaymentDetails
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventPaymentDetailsEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventPaymentDetails_");
				return new PrefetchPathElement2(new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventPackageDetailsEntity, 0, null, null, GetRelationsForField("EventPackageDetailsCollectionViaEventPaymentDetails"), null, "EventPackageDetailsCollectionViaEventPaymentDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaEventCustomerQuestionAnswer"), null, "EventsCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaEventCustomerResult"), null, "EventsCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaEventCustomers"), null, "EventsCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaPhysicianInvoiceItem"), null, "EventsCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaDisqualifiedTest"), null, "EventsCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaPreQualificationResult"), null, "EventsCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaDependentDisqualifiedTest"), null, "EventsCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaHospitalPartnerCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaHospitalPartnerCustomer"), null, "EventsCollectionViaHospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaCallQueueCustomer"), null, "EventsCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaCustomerEventTestFinding
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerEventTestFindingEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEventTestFinding_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaCustomerEventTestFinding"), null, "EventsCollectionViaCustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaCustomerOrderHistory"), null, "EventsCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Events' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventsEntity, 0, null, null, GetRelationsForField("EventsCollectionViaCustomerClinicalQuestionAnswer"), null, "EventsCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventTestCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.EventTestEntity, 0, null, null, GetRelationsForField("EventTestCollectionViaCustomerOrderHistory"), null, "EventTestCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'File' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFileCollectionViaTestimonial
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.TestimonialEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "Testimonial_");
				return new PrefetchPathElement2(new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.FileEntity, 0, null, null, GetRelationsForField("FileCollectionViaTestimonial"), null, "FileCollectionViaTestimonial", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'GcNotGivenReason' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGcNotGivenReasonCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.GcNotGivenReasonEntity, 0, null, null, GetRelationsForField("GcNotGivenReasonCollectionViaEventCustomers"), null, "GcNotGivenReasonCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HafTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHafTemplateCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.HafTemplateEntity, 0, null, null, GetRelationsForField("HafTemplateCollectionViaCustomerClinicalQuestionAnswer"), null, "HafTemplateCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalFacility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalFacilityCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.HospitalFacilityEntity, 0, null, null, GetRelationsForField("HospitalFacilityCollectionViaEventCustomers"), null, "HospitalFacilityCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IcdCodes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIcdCodesCollectionViaCustomerIcdCode
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerIcdCodeEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerIcdCode_");
				return new PrefetchPathElement2(new EntityCollection<IcdCodesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(IcdCodesEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.IcdCodesEntity, 0, null, null, GetRelationsForField("IcdCodesCollectionViaCustomerIcdCode"), null, "IcdCodesCollectionViaCustomerIcdCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Language' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLanguageCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LanguageEntity, 0, null, null, GetRelationsForField("LanguageCollectionViaCallQueueCustomer"), null, "LanguageCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCallRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCallRoundCallQueue"), null, "LookupCollectionViaCallRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult______
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult______"), null, "LookupCollectionViaPreQualificationResult______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaNoShowCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "NoShowCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaNoShowCallQueue"), null, "LookupCollectionViaNoShowCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult"), null, "LookupCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_______
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_______"), null, "LookupCollectionViaPreQualificationResult_______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomerResult"), null, "LookupCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaMailRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "MailRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaMailRoundCallQueue"), null, "LookupCollectionViaMailRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult__"), null, "LookupCollectionViaPreQualificationResult__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaChaseOutbound
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ChaseOutbound_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaChaseOutbound"), null, "LookupCollectionViaChaseOutbound", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "LanguageBarrierCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaLanguageBarrierCallQueue"), null, "LookupCollectionViaLanguageBarrierCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_____
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_____"), null, "LookupCollectionViaPreQualificationResult_____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult____
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult____"), null, "LookupCollectionViaPreQualificationResult____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult___
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult___"), null, "LookupCollectionViaPreQualificationResult___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerProfileHistory__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerProfileHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerProfileHistory__"), null, "LookupCollectionViaCustomerProfileHistory__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerProfileHistory___
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerProfileHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerProfileHistory___"), null, "LookupCollectionViaCustomerProfileHistory___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerOrderHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerOrderHistory"), null, "LookupCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerProfileHistory_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerProfileHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerProfileHistory_"), null, "LookupCollectionViaCustomerProfileHistory_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "UncontactedCustomerCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaUncontactedCustomerCallQueue"), null, "LookupCollectionViaUncontactedCustomerCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerPrimaryCarePhysician"), null, "LookupCollectionViaCustomerPrimaryCarePhysician", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerProfileHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerProfileHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerProfileHistory"), null, "LookupCollectionViaCustomerProfileHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCallQueueCustomer"), null, "LookupCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomers"), null, "LookupCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_"), null, "LookupCollectionViaPreQualificationResult_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult________
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult________"), null, "LookupCollectionViaPreQualificationResult________", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerUnsubscribedSmsNotification
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerUnsubscribedSmsNotificationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerUnsubscribedSmsNotification_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerUnsubscribedSmsNotification"), null, "LookupCollectionViaCustomerUnsubscribedSmsNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaFillEventCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "FillEventCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaFillEventCallQueue"), null, "LookupCollectionViaFillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomers_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomers_"), null, "LookupCollectionViaEventCustomers_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaProspectCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ProspectCustomer_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaProspectCustomer"), null, "LookupCollectionViaProspectCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Ndc' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNdcCollectionViaCurrentMedication
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CurrentMedicationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CurrentMedication_");
				return new PrefetchPathElement2(new EntityCollection<NdcEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NdcEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.NdcEntity, 0, null, null, GetRelationsForField("NdcCollectionViaCurrentMedication"), null, "NdcCollectionViaCurrentMedication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'NotesDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNotesDetailsCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.NotesDetailsEntity, 0, null, null, GetRelationsForField("NotesDetailsCollectionViaCallQueueCustomer"), null, "NotesDetailsCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaGuardianDetails_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "GuardianDetails_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaGuardianDetails_"), null, "OrganizationRoleUserCollectionViaGuardianDetails_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaGuardianDetails
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "GuardianDetails_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaGuardianDetails"), null, "OrganizationRoleUserCollectionViaGuardianDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.UncontactedCustomerCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "UncontactedCustomerCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue"), null, "OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer_"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaReferral
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ReferralEntityUsingReferedCustomerId;
				intermediateRelation.SetAliases(string.Empty, "Referral_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaReferral"), null, "OrganizationRoleUserCollectionViaReferral", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaFillEventCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.FillEventCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "FillEventCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaFillEventCallQueue"), null, "OrganizationRoleUserCollectionViaFillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaRequiredTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.RequiredTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "RequiredTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaRequiredTest"), null, "OrganizationRoleUserCollectionViaRequiredTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaProspectCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ProspectCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ProspectCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaProspectCustomer"), null, "OrganizationRoleUserCollectionViaProspectCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaMailRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MailRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "MailRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaMailRoundCallQueue"), null, "OrganizationRoleUserCollectionViaMailRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaNoShowCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.NoShowCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "NoShowCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaNoShowCallQueue"), null, "OrganizationRoleUserCollectionViaNoShowCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaMedication
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MedicationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "Medication_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaMedication"), null, "OrganizationRoleUserCollectionViaMedication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallRoundCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallRoundCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallRoundCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallRoundCallQueue"), null, "OrganizationRoleUserCollectionViaCallRoundCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaMedication_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.MedicationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "Medication_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaMedication_"), null, "OrganizationRoleUserCollectionViaMedication_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer__"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.HospitalPartnerCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.LanguageBarrierCallQueueEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "LanguageBarrierCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaLanguageBarrierCallQueue"), null, "OrganizationRoleUserCollectionViaLanguageBarrierCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreAssessmentCustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt"), null, "OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerHealthInfo
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfo_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerHealthInfo"), null, "OrganizationRoleUserCollectionViaCustomerHealthInfo", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaDisqualifiedTest"), null, "OrganizationRoleUserCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerHealthInfoArchiveEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerHealthInfoArchive_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerHealthInfoArchive"), null, "OrganizationRoleUserCollectionViaCustomerHealthInfoArchive", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaDirectMail
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DirectMailEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DirectMail_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaDirectMail"), null, "OrganizationRoleUserCollectionViaDirectMail", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaDisqualifiedTest_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaDisqualifiedTest_"), null, "OrganizationRoleUserCollectionViaDisqualifiedTest_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer"), null, "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_"), null, "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician"), null, "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerEligibility_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerEligibilityEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEligibility_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerEligibility_"), null, "OrganizationRoleUserCollectionViaCustomerEligibility_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerIcdCode
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerIcdCodeEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerIcdCode_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerIcdCode"), null, "OrganizationRoleUserCollectionViaCustomerIcdCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerProfileHistory
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerProfileHistoryEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerProfileHistory_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerProfileHistory"), null, "OrganizationRoleUserCollectionViaCustomerProfileHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerTag
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerTagEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerTag_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerTag"), null, "OrganizationRoleUserCollectionViaCustomerTag", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_"), null, "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__"), null, "OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerTag_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerTagEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerTag_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerTag_"), null, "OrganizationRoleUserCollectionViaCustomerTag_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerWarmTransfer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerWarmTransferEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerWarmTransfer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerWarmTransfer"), null, "OrganizationRoleUserCollectionViaCustomerWarmTransfer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerWarmTransfer_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerWarmTransferEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerWarmTransfer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerWarmTransfer_"), null, "OrganizationRoleUserCollectionViaCustomerWarmTransfer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerTargeted
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerTargetedEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerTargeted_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerTargeted"), null, "OrganizationRoleUserCollectionViaCustomerTargeted", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerTargeted_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerTargetedEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerTargeted_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerTargeted_"), null, "OrganizationRoleUserCollectionViaCustomerTargeted_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerEligibility
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerEligibilityEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEligibility_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerEligibility"), null, "OrganizationRoleUserCollectionViaCustomerEligibility", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult___
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult___"), null, "OrganizationRoleUserCollectionViaEventCustomerResult___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomers"), null, "OrganizationRoleUserCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomers_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomersEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomers_"), null, "OrganizationRoleUserCollectionViaEventCustomers_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult__
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult__"), null, "OrganizationRoleUserCollectionViaEventCustomerResult__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult____
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult____"), null, "OrganizationRoleUserCollectionViaEventCustomerResult____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult______
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult______"), null, "OrganizationRoleUserCollectionViaEventCustomerResult______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer"), null, "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_____
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_____"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt"), null, "OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_"), null, "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCurrentMedication
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CurrentMedicationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CurrentMedication_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCurrentMedication"), null, "OrganizationRoleUserCollectionViaCurrentMedication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult"), null, "OrganizationRoleUserCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_______
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_______"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult________
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult________"), null, "OrganizationRoleUserCollectionViaEventCustomerResult________", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianEvaluation' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianEvaluationCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PhysicianEvaluationEntity, 0, null, null, GetRelationsForField("PhysicianEvaluationCollectionViaPhysicianInvoiceItem"), null, "PhysicianEvaluationCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianInvoice' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianInvoiceCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PhysicianInvoiceItemEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PhysicianInvoiceEntity, 0, null, null, GetRelationsForField("PhysicianInvoiceCollectionViaPhysicianInvoiceItem"), null, "PhysicianInvoiceCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianMaster' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianMasterCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerPrimaryCarePhysicianEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerPrimaryCarePhysician_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianMasterEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianMasterEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PhysicianMasterEntity, 0, null, null, GetRelationsForField("PhysicianMasterCollectionViaCustomerPrimaryCarePhysician"), null, "PhysicianMasterCollectionViaCustomerPrimaryCarePhysician", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationQuestion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationQuestionCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.EventCustomerQuestionAnswerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PreQualificationQuestionEntity, 0, null, null, GetRelationsForField("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer"), null, "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationQuestion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationQuestionCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.PreQualificationQuestionEntity, 0, null, null, GetRelationsForField("PreQualificationQuestionCollectionViaDisqualifiedTest"), null, "PreQualificationQuestionCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProspectCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectCustomerCollectionViaClickConversion
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ClickConversionEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ClickConversion_");
				return new PrefetchPathElement2(new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ProspectCustomerEntity, 0, null, null, GetRelationsForField("ProspectCustomerCollectionViaClickConversion"), null, "ProspectCustomerCollectionViaClickConversion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProspectCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectCustomerCollectionViaTempCart
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.TempCartEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "TempCart_");
				return new PrefetchPathElement2(new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ProspectCustomerEntity, 0, null, null, GetRelationsForField("ProspectCustomerCollectionViaTempCart"), null, "ProspectCustomerCollectionViaTempCart", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProspectCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectCustomerCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CallQueueCustomerEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ProspectCustomerEntity, 0, null, null, GetRelationsForField("ProspectCustomerCollectionViaCallQueueCustomer"), null, "ProspectCustomerCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RapsUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRapsUploadCollectionViaRaps
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.RapsEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "Raps_");
				return new PrefetchPathElement2(new EntityCollection<RapsUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RapsUploadEntity, 0, null, null, GetRelationsForField("RapsUploadCollectionViaRaps"), null, "RapsUploadCollectionViaRaps", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Relationship' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRelationshipCollectionViaChaseOutbound
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ChaseOutboundEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ChaseOutbound_");
				return new PrefetchPathElement2(new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RelationshipEntity, 0, null, null, GetRelationsForField("RelationshipCollectionViaChaseOutbound"), null, "RelationshipCollectionViaChaseOutbound", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Relationship' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRelationshipCollectionViaGuardianDetails
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.GuardianDetailsEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "GuardianDetails_");
				return new PrefetchPathElement2(new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RelationshipEntity, 0, null, null, GetRelationsForField("RelationshipCollectionViaGuardianDetails"), null, "RelationshipCollectionViaGuardianDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ResultArchiveUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathResultArchiveUploadCollectionViaResultArchiveUploadLog
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ResultArchiveUploadLogEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ResultArchiveUploadLog_");
				return new PrefetchPathElement2(new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ResultArchiveUploadEntity, 0, null, null, GetRelationsForField("ResultArchiveUploadCollectionViaResultArchiveUploadLog"), null, "ResultArchiveUploadCollectionViaResultArchiveUploadLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SmsReceived' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSmsReceivedCollectionViaCustomerUnsubscribedSmsNotification
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerUnsubscribedSmsNotificationEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerUnsubscribedSmsNotification_");
				return new PrefetchPathElement2(new EntityCollection<SmsReceivedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SmsReceivedEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.SmsReceivedEntity, 0, null, null, GetRelationsForField("SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification"), null, "SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SuspectConditionUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSuspectConditionUploadCollectionViaSuspectCondition
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.SuspectConditionEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "SuspectCondition_");
				return new PrefetchPathElement2(new EntityCollection<SuspectConditionUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.SuspectConditionUploadEntity, 0, null, null, GetRelationsForField("SuspectConditionUploadCollectionViaSuspectCondition"), null, "SuspectConditionUploadCollectionViaSuspectCondition", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Tag' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTagCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TagEntity, 0, null, null, GetRelationsForField("TagCollectionViaCustomerCallQueueCallAttempt"), null, "TagCollectionViaCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Tag' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTagCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreAssessmentCustomerCallQueueCallAttemptEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreAssessmentCustomerCallQueueCallAttempt_");
				return new PrefetchPathElement2(new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TagEntity, 0, null, null, GetRelationsForField("TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt"), null, "TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TempCart' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTempCartCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.PreQualificationResultEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TempCartEntity, 0, null, null, GetRelationsForField("TempCartCollectionViaPreQualificationResult"), null, "TempCartCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DependentDisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaDependentDisqualifiedTest"), null, "TestCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.DisqualifiedTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaDisqualifiedTest"), null, "TestCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaRequiredTest
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.RequiredTestEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "RequiredTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaRequiredTest"), null, "TestCollectionViaRequiredTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaResultArchiveUploadLog
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.ResultArchiveUploadLogEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "ResultArchiveUploadLog_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaResultArchiveUploadLog"), null, "TestCollectionViaResultArchiveUploadLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaCustomerEventTestFinding
		{
			get
			{
				IEntityRelation intermediateRelation = CustomerProfileEntity.Relations.CustomerEventTestFindingEntityUsingCustomerId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEventTestFinding_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaCustomerEventTestFinding"), null, "TestCollectionViaCustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ActivityType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathActivityType
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory))),
					(IEntityRelation)GetRelationsForField("ActivityType")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.ActivityTypeEntity, 0, null, null, null, null, "ActivityType", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddress
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))),
					(IEntityRelation)GetRelationsForField("Address")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.AddressEntity, 0, null, null, null, null, "Address", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lab' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLab
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LabEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lab")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LabEntity, 0, null, null, null, null, "Lab", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Language' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLanguage
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory))),
					(IEntityRelation)GetRelationsForField("Language")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LanguageEntity, 0, null, null, null, null, "Language", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup______
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup______")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup_____
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup_____")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup_____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup_______
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup_______")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup_______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup________
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup________")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup________", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup____
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup____")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup_
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup_")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup___
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup___")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup__
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup__")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'NotesDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNotesDetails
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("NotesDetails")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.NotesDetailsEntity, 0, null, null, null, null, "NotesDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Role' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRole
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(RoleEntityFactory))),
					(IEntityRelation)GetRelationsForField("Role")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.RoleEntity, 0, null, null, null, null, "Role", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerCallAttempts' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerCallAttempts
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(CustomerCallAttemptsEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerCallAttempts")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerCallAttemptsEntity, 0, null, null, null, null, "CustomerCallAttempts", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerLockForCall' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerLockForCall
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(CustomerLockForCallEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerLockForCall")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerLockForCallEntity, 0, null, null, null, null, "CustomerLockForCall", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerResultPosted' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerResultPosted
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(CustomerResultPostedEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerResultPosted")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerResultPostedEntity, 0, null, null, null, null, "CustomerResultPosted", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerTrale' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerTrale
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTraleEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerTrale")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.CustomerTraleEntity, 0, null, null, null, null, "CustomerTrale", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser")[0], (int)Falcon.Data.EntityType.CustomerProfileEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> The custom properties for the type of this entity instance.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		public override Dictionary<string, string> CustomPropertiesOfType
		{
			get { return CustomerProfileEntity.CustomProperties;}
		}

		/// <summary> The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value
		/// pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties
		{
			get { return _fieldsCustomProperties;}
		}

		/// <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		public override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType
		{
			get { return CustomerProfileEntity.FieldsCustomProperties;}
		}

		/// <summary> The CustomerId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."CustomerID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int64 CustomerId
		{
			get { return (System.Int64)GetValue((int)CustomerProfileFieldIndex.CustomerId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.CustomerId, value); }
		}

		/// <summary> The DisplayId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DisplayID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> DisplayId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.DisplayId, false); }

		}

		/// <summary> The BillingAddressId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."BillingAddressID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> BillingAddressId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.BillingAddressId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.BillingAddressId, value); }
		}

		/// <summary> The IsActive property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."IsActive"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> IsActive
		{
			get { return (Nullable<System.Boolean>)GetValue((int)CustomerProfileFieldIndex.IsActive, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.IsActive, value); }
		}

		/// <summary> The Height property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Height"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Height
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Height, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Height, value); }
		}

		/// <summary> The Weight property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Weight"<br/>
		/// Table field type characteristics (type, precision, scale, length): Float, 38, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Double> Weight
		{
			get { return (Nullable<System.Double>)GetValue((int)CustomerProfileFieldIndex.Weight, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Weight, value); }
		}

		/// <summary> The Gender property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Gender"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Gender
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Gender, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Gender, value); }
		}

		/// <summary> The Race property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Race"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Race
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Race, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Race, value); }
		}

		/// <summary> The Age property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Age"<br/>
		/// Table field type characteristics (type, precision, scale, length): TinyInt, 3, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Byte> Age
		{
			get { return (Nullable<System.Byte>)GetValue((int)CustomerProfileFieldIndex.Age, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Age, value); }
		}

		/// <summary> The DateCreated property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DateCreated"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreated
		{
			get { return (System.DateTime)GetValue((int)CustomerProfileFieldIndex.DateCreated, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DateCreated, value); }
		}

		/// <summary> The DateModified property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DateModified"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateModified
		{
			get { return (System.DateTime)GetValue((int)CustomerProfileFieldIndex.DateModified, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DateModified, value); }
		}

		/// <summary> The TrackingMarketingId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."TrackingMarketingID"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String TrackingMarketingId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.TrackingMarketingId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.TrackingMarketingId, value); }
		}

		/// <summary> The AddedByRoleId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AddedByRoleID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> AddedByRoleId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.AddedByRoleId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AddedByRoleId, value); }
		}

		/// <summary> The Employer property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Employer"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Employer
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Employer, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Employer, value); }
		}

		/// <summary> The EmergencyContactName property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EmergencyContactName"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 200<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String EmergencyContactName
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.EmergencyContactName, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EmergencyContactName, value); }
		}

		/// <summary> The EmergencyContactRelationship property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EmergencyContactRelationship"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 200<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String EmergencyContactRelationship
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.EmergencyContactRelationship, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EmergencyContactRelationship, value); }
		}

		/// <summary> The EmergencyContactPhoneNumber property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EmergencyContactPhoneNumber"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 20<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String EmergencyContactPhoneNumber
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.EmergencyContactPhoneNumber, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EmergencyContactPhoneNumber, value); }
		}

		/// <summary> The DoNotContactReasonId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DoNotContactReasonId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> DoNotContactReasonId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.DoNotContactReasonId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DoNotContactReasonId, value); }
		}

		/// <summary> The DoNotContactReasonNotesId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DoNotContactReasonNotesId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> DoNotContactReasonNotesId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.DoNotContactReasonNotesId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DoNotContactReasonNotesId, value); }
		}

		/// <summary> The RequestNewsLetter property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."RequestNewsLetter"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean RequestNewsLetter
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.RequestNewsLetter, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.RequestNewsLetter, value); }
		}

		/// <summary> The EmployeeId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EmployeeId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 100<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String EmployeeId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.EmployeeId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EmployeeId, value); }
		}

		/// <summary> The InsuranceId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."InsuranceId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 100<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String InsuranceId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.InsuranceId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.InsuranceId, value); }
		}

		/// <summary> The PreferredLanguage property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PreferredLanguage"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 250<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PreferredLanguage
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.PreferredLanguage, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PreferredLanguage, value); }
		}

		/// <summary> The BestTimeToCall property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."BestTimeToCall"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> BestTimeToCall
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.BestTimeToCall, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.BestTimeToCall, value); }
		}

		/// <summary> The Waist property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Waist"<br/>
		/// Table field type characteristics (type, precision, scale, length): Decimal, 18, 2, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Waist
		{
			get { return (Nullable<System.Decimal>)GetValue((int)CustomerProfileFieldIndex.Waist, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Waist, value); }
		}

		/// <summary> The Hicn property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."HICN"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 100<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Hicn
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Hicn, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Hicn, value); }
		}

		/// <summary> The EnableTexting property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EnableTexting"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableTexting
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.EnableTexting, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EnableTexting, value); }
		}

		/// <summary> The MedicareAdvantageNumber property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."MedicareAdvantageNumber"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String MedicareAdvantageNumber
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.MedicareAdvantageNumber, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.MedicareAdvantageNumber, value); }
		}

		/// <summary> The Tag property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Tag"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Tag
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Tag, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Tag, value); }
		}

		/// <summary> The MedicareAdvantagePlanName property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."MedicareAdvantagePlanName"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String MedicareAdvantagePlanName
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.MedicareAdvantagePlanName, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.MedicareAdvantagePlanName, value); }
		}

		/// <summary> The LanguageId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."LanguageId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> LanguageId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.LanguageId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.LanguageId, value); }
		}

		/// <summary> The LabId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."LabId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> LabId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.LabId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.LabId, value); }
		}

		/// <summary> The Copay property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Copay"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 50<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Copay
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Copay, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Copay, value); }
		}

		/// <summary> The Lpi property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Lpi"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 50<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Lpi
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Lpi, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Lpi, value); }
		}

		/// <summary> The Market property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Market"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Market
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Market, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Market, value); }
		}

		/// <summary> The Mrn property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Mrn"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Mrn
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Mrn, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Mrn, value); }
		}

		/// <summary> The GroupName property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."GroupName"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String GroupName
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.GroupName, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.GroupName, value); }
		}

		/// <summary> The IsIncorrectPhoneNumber property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."IsIncorrectPhoneNumber"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsIncorrectPhoneNumber
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.IsIncorrectPhoneNumber, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.IsIncorrectPhoneNumber, value); }
		}

		/// <summary> The IsLanguageBarrier property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."IsLanguageBarrier"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsLanguageBarrier
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.IsLanguageBarrier, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.IsLanguageBarrier, value); }
		}

		/// <summary> The DoNotContactTypeId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DoNotContactTypeId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> DoNotContactTypeId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.DoNotContactTypeId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DoNotContactTypeId, value); }
		}

		/// <summary> The EnableVoiceMail property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EnableVoiceMail"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableVoiceMail
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.EnableVoiceMail, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EnableVoiceMail, value); }
		}

		/// <summary> The AdditionalField1 property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AdditionalField1"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 512<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalField1
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AdditionalField1, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AdditionalField1, value); }
		}

		/// <summary> The AdditionalField2 property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AdditionalField2"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 512<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalField2
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AdditionalField2, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AdditionalField2, value); }
		}

		/// <summary> The AdditionalField3 property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AdditionalField3"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 512<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalField3
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AdditionalField3, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AdditionalField3, value); }
		}

		/// <summary> The AdditionalField4 property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AdditionalField4"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 512<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalField4
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AdditionalField4, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AdditionalField4, value); }
		}

		/// <summary> The ActivityId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."ActivityId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> ActivityId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.ActivityId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.ActivityId, value); }
		}

		/// <summary> The DoNotContactUpdateDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DoNotContactUpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> DoNotContactUpdateDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.DoNotContactUpdateDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DoNotContactUpdateDate, value); }
		}

		/// <summary> The DoNotContactUpdateSource property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."DoNotContactUpdateSource"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> DoNotContactUpdateSource
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.DoNotContactUpdateSource, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.DoNotContactUpdateSource, value); }
		}

		/// <summary> The IsSubscribed property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."IsSubscribed"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> IsSubscribed
		{
			get { return (Nullable<System.Boolean>)GetValue((int)CustomerProfileFieldIndex.IsSubscribed, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.IsSubscribed, value); }
		}

		/// <summary> The IncorrectPhoneNumberMarkedDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."IncorrectPhoneNumberMarkedDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> IncorrectPhoneNumberMarkedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.IncorrectPhoneNumberMarkedDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.IncorrectPhoneNumberMarkedDate, value); }
		}

		/// <summary> The LanguageBarrierMarkedDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."LanguageBarrierMarkedDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LanguageBarrierMarkedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.LanguageBarrierMarkedDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.LanguageBarrierMarkedDate, value); }
		}

		/// <summary> The PreferredContactType property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PreferredContactType"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> PreferredContactType
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.PreferredContactType, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PreferredContactType, value); }
		}

		/// <summary> The Mbi property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."Mbi"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 100<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Mbi
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.Mbi, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.Mbi, value); }
		}

		/// <summary> The AcesId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AcesId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 128<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AcesId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AcesId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AcesId, value); }
		}

		/// <summary> The PhoneHomeConsentId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneHomeConsentId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 PhoneHomeConsentId
		{
			get { return (System.Int64)GetValue((int)CustomerProfileFieldIndex.PhoneHomeConsentId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneHomeConsentId, value); }
		}

		/// <summary> The PhoneHomeConsentUpdateDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneHomeConsentUpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PhoneHomeConsentUpdateDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.PhoneHomeConsentUpdateDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneHomeConsentUpdateDate, value); }
		}

		/// <summary> The PhoneCellConsentId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneCellConsentId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 PhoneCellConsentId
		{
			get { return (System.Int64)GetValue((int)CustomerProfileFieldIndex.PhoneCellConsentId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneCellConsentId, value); }
		}

		/// <summary> The PhoneCellConsentUpdateDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneCellConsentUpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PhoneCellConsentUpdateDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.PhoneCellConsentUpdateDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneCellConsentUpdateDate, value); }
		}

		/// <summary> The PhoneOfficeConsentId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneOfficeConsentId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 PhoneOfficeConsentId
		{
			get { return (System.Int64)GetValue((int)CustomerProfileFieldIndex.PhoneOfficeConsentId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneOfficeConsentId, value); }
		}

		/// <summary> The PhoneOfficeConsentUpdateDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."PhoneOfficeConsentUpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PhoneOfficeConsentUpdateDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.PhoneOfficeConsentUpdateDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.PhoneOfficeConsentUpdateDate, value); }
		}

		/// <summary> The BillingMemberId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."BillingMemberId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 128<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String BillingMemberId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.BillingMemberId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.BillingMemberId, value); }
		}

		/// <summary> The BillingMemberPlan property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."BillingMemberPlan"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 512<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String BillingMemberPlan
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.BillingMemberPlan, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.BillingMemberPlan, value); }
		}

		/// <summary> The BillingMemberPlanYear property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."BillingMemberPlanYear"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> BillingMemberPlanYear
		{
			get { return (Nullable<System.Int32>)GetValue((int)CustomerProfileFieldIndex.BillingMemberPlanYear, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.BillingMemberPlanYear, value); }
		}

		/// <summary> The EnableEmail property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EnableEmail"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableEmail
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.EnableEmail, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EnableEmail, value); }
		}

		/// <summary> The EnableEmailUpdateDate property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."EnableEmailUpdateDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> EnableEmailUpdateDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CustomerProfileFieldIndex.EnableEmailUpdateDate, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.EnableEmailUpdateDate, value); }
		}

		/// <summary> The MemberUploadSourceId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."MemberUploadSourceId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> MemberUploadSourceId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.MemberUploadSourceId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.MemberUploadSourceId, value); }
		}

		/// <summary> The ActivityTypeIsManual property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."ActivityTypeIsManual"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean ActivityTypeIsManual
		{
			get { return (System.Boolean)GetValue((int)CustomerProfileFieldIndex.ActivityTypeIsManual, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.ActivityTypeIsManual, value); }
		}

		/// <summary> The ProductTypeId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."ProductTypeId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> ProductTypeId
		{
			get { return (Nullable<System.Int64>)GetValue((int)CustomerProfileFieldIndex.ProductTypeId, false); }
			set	{ SetValue((int)CustomerProfileFieldIndex.ProductTypeId, value); }
		}

		/// <summary> The AcesClientId property of the Entity CustomerProfile<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblCustomerProfile"."AcesClientId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 250<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AcesClientId
		{
			get { return (System.String)GetValue((int)CustomerProfileFieldIndex.AcesClientId, true); }
			set	{ SetValue((int)CustomerProfileFieldIndex.AcesClientId, value); }
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueCustomerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueCustomerEntity))]
		public virtual EntityCollection<CallQueueCustomerEntity> CallQueueCustomer
		{
			get
			{
				if(_callQueueCustomer==null)
				{
					_callQueueCustomer = new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory)));
					_callQueueCustomer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _callQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallRoundCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallRoundCallQueueEntity))]
		public virtual EntityCollection<CallRoundCallQueueEntity> CallRoundCallQueue
		{
			get
			{
				if(_callRoundCallQueue==null)
				{
					_callRoundCallQueue = new EntityCollection<CallRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallRoundCallQueueEntityFactory)));
					_callRoundCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _callRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseOutboundEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseOutboundEntity))]
		public virtual EntityCollection<ChaseOutboundEntity> ChaseOutbound
		{
			get
			{
				if(_chaseOutbound==null)
				{
					_chaseOutbound = new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory)));
					_chaseOutbound.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _chaseOutbound;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ClickConversionEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ClickConversionEntity))]
		public virtual EntityCollection<ClickConversionEntity> ClickConversion
		{
			get
			{
				if(_clickConversion==null)
				{
					_clickConversion = new EntityCollection<ClickConversionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickConversionEntityFactory)));
					_clickConversion.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _clickConversion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CurrentMedicationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CurrentMedicationEntity))]
		public virtual EntityCollection<CurrentMedicationEntity> CurrentMedication
		{
			get
			{
				if(_currentMedication==null)
				{
					_currentMedication = new EntityCollection<CurrentMedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CurrentMedicationEntityFactory)));
					_currentMedication.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _currentMedication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerAccountGlocomNumberEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerAccountGlocomNumberEntity))]
		public virtual EntityCollection<CustomerAccountGlocomNumberEntity> CustomerAccountGlocomNumber
		{
			get
			{
				if(_customerAccountGlocomNumber==null)
				{
					_customerAccountGlocomNumber = new EntityCollection<CustomerAccountGlocomNumberEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerAccountGlocomNumberEntityFactory)));
					_customerAccountGlocomNumber.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerAccountGlocomNumber;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerBillingAccountEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerBillingAccountEntity))]
		public virtual EntityCollection<CustomerBillingAccountEntity> CustomerBillingAccount
		{
			get
			{
				if(_customerBillingAccount==null)
				{
					_customerBillingAccount = new EntityCollection<CustomerBillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerBillingAccountEntityFactory)));
					_customerBillingAccount.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerBillingAccount;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerCallQueueCallAttemptEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerCallQueueCallAttemptEntity))]
		public virtual EntityCollection<CustomerCallQueueCallAttemptEntity> CustomerCallQueueCallAttempt
		{
			get
			{
				if(_customerCallQueueCallAttempt==null)
				{
					_customerCallQueueCallAttempt = new EntityCollection<CustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerCallQueueCallAttemptEntityFactory)));
					_customerCallQueueCallAttempt.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerChaseCampaignEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerChaseCampaignEntity))]
		public virtual EntityCollection<CustomerChaseCampaignEntity> CustomerChaseCampaign
		{
			get
			{
				if(_customerChaseCampaign==null)
				{
					_customerChaseCampaign = new EntityCollection<CustomerChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseCampaignEntityFactory)));
					_customerChaseCampaign.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerChaseCampaign;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerChaseChannelEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerChaseChannelEntity))]
		public virtual EntityCollection<CustomerChaseChannelEntity> CustomerChaseChannel
		{
			get
			{
				if(_customerChaseChannel==null)
				{
					_customerChaseChannel = new EntityCollection<CustomerChaseChannelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseChannelEntityFactory)));
					_customerChaseChannel.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerChaseChannel;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerChaseProductEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerChaseProductEntity))]
		public virtual EntityCollection<CustomerChaseProductEntity> CustomerChaseProduct
		{
			get
			{
				if(_customerChaseProduct==null)
				{
					_customerChaseProduct = new EntityCollection<CustomerChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerChaseProductEntityFactory)));
					_customerChaseProduct.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerChaseProduct;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerClinicalQuestionAnswerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerClinicalQuestionAnswerEntity))]
		public virtual EntityCollection<CustomerClinicalQuestionAnswerEntity> CustomerClinicalQuestionAnswer
		{
			get
			{
				if(_customerClinicalQuestionAnswer==null)
				{
					_customerClinicalQuestionAnswer = new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory)));
					_customerClinicalQuestionAnswer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerEligibilityEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerEligibilityEntity))]
		public virtual EntityCollection<CustomerEligibilityEntity> CustomerEligibility
		{
			get
			{
				if(_customerEligibility==null)
				{
					_customerEligibility = new EntityCollection<CustomerEligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEligibilityEntityFactory)));
					_customerEligibility.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerEligibility;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerEventTestFindingEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerEventTestFindingEntity))]
		public virtual EntityCollection<CustomerEventTestFindingEntity> CustomerEventTestFinding
		{
			get
			{
				if(_customerEventTestFinding==null)
				{
					_customerEventTestFinding = new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory)));
					_customerEventTestFinding.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerEventTestFinding;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthInfoEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthInfoEntity))]
		public virtual EntityCollection<CustomerHealthInfoEntity> CustomerHealthInfo
		{
			get
			{
				if(_customerHealthInfo==null)
				{
					_customerHealthInfo = new EntityCollection<CustomerHealthInfoEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoEntityFactory)));
					_customerHealthInfo.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerHealthInfo;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthInfoArchiveEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthInfoArchiveEntity))]
		public virtual EntityCollection<CustomerHealthInfoArchiveEntity> CustomerHealthInfoArchive
		{
			get
			{
				if(_customerHealthInfoArchive==null)
				{
					_customerHealthInfoArchive = new EntityCollection<CustomerHealthInfoArchiveEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthInfoArchiveEntityFactory)));
					_customerHealthInfoArchive.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerHealthInfoArchive;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerIcdCodeEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerIcdCodeEntity))]
		public virtual EntityCollection<CustomerIcdCodeEntity> CustomerIcdCode
		{
			get
			{
				if(_customerIcdCode==null)
				{
					_customerIcdCode = new EntityCollection<CustomerIcdCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerIcdCodeEntityFactory)));
					_customerIcdCode.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerIcdCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerOrderHistoryEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerOrderHistoryEntity))]
		public virtual EntityCollection<CustomerOrderHistoryEntity> CustomerOrderHistory
		{
			get
			{
				if(_customerOrderHistory==null)
				{
					_customerOrderHistory = new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory)));
					_customerOrderHistory.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerPredictedZipEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerPredictedZipEntity))]
		public virtual EntityCollection<CustomerPredictedZipEntity> CustomerPredictedZip
		{
			get
			{
				if(_customerPredictedZip==null)
				{
					_customerPredictedZip = new EntityCollection<CustomerPredictedZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPredictedZipEntityFactory)));
					_customerPredictedZip.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerPredictedZip;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerPrimaryCarePhysicianEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerPrimaryCarePhysicianEntity))]
		public virtual EntityCollection<CustomerPrimaryCarePhysicianEntity> CustomerPrimaryCarePhysician
		{
			get
			{
				if(_customerPrimaryCarePhysician==null)
				{
					_customerPrimaryCarePhysician = new EntityCollection<CustomerPrimaryCarePhysicianEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerPrimaryCarePhysicianEntityFactory)));
					_customerPrimaryCarePhysician.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerPrimaryCarePhysician;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileHistoryEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileHistoryEntity))]
		public virtual EntityCollection<CustomerProfileHistoryEntity> CustomerProfileHistory
		{
			get
			{
				if(_customerProfileHistory==null)
				{
					_customerProfileHistory = new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory)));
					_customerProfileHistory.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerProfileHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerSurveyEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerSurveyEntity))]
		public virtual EntityCollection<CustomerSurveyEntity> CustomerSurvey
		{
			get
			{
				if(_customerSurvey==null)
				{
					_customerSurvey = new EntityCollection<CustomerSurveyEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyEntityFactory)));
					_customerSurvey.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerSurvey;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerTagEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerTagEntity))]
		public virtual EntityCollection<CustomerTagEntity> CustomerTag
		{
			get
			{
				if(_customerTag==null)
				{
					_customerTag = new EntityCollection<CustomerTagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTagEntityFactory)));
					_customerTag.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerTag;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerTargetedEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerTargetedEntity))]
		public virtual EntityCollection<CustomerTargetedEntity> CustomerTargeted
		{
			get
			{
				if(_customerTargeted==null)
				{
					_customerTargeted = new EntityCollection<CustomerTargetedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerTargetedEntityFactory)));
					_customerTargeted.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerTargeted;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerUnsubscribedSmsNotificationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerUnsubscribedSmsNotificationEntity))]
		public virtual EntityCollection<CustomerUnsubscribedSmsNotificationEntity> CustomerUnsubscribedSmsNotification
		{
			get
			{
				if(_customerUnsubscribedSmsNotification==null)
				{
					_customerUnsubscribedSmsNotification = new EntityCollection<CustomerUnsubscribedSmsNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerUnsubscribedSmsNotificationEntityFactory)));
					_customerUnsubscribedSmsNotification.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerUnsubscribedSmsNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerWarmTransferEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerWarmTransferEntity))]
		public virtual EntityCollection<CustomerWarmTransferEntity> CustomerWarmTransfer
		{
			get
			{
				if(_customerWarmTransfer==null)
				{
					_customerWarmTransfer = new EntityCollection<CustomerWarmTransferEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerWarmTransferEntityFactory)));
					_customerWarmTransfer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _customerWarmTransfer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DependentDisqualifiedTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DependentDisqualifiedTestEntity))]
		public virtual EntityCollection<DependentDisqualifiedTestEntity> DependentDisqualifiedTest
		{
			get
			{
				if(_dependentDisqualifiedTest==null)
				{
					_dependentDisqualifiedTest = new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory)));
					_dependentDisqualifiedTest.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _dependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DirectMailEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DirectMailEntity))]
		public virtual EntityCollection<DirectMailEntity> DirectMail
		{
			get
			{
				if(_directMail==null)
				{
					_directMail = new EntityCollection<DirectMailEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailEntityFactory)));
					_directMail.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _directMail;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DisqualifiedTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DisqualifiedTestEntity))]
		public virtual EntityCollection<DisqualifiedTestEntity> DisqualifiedTest
		{
			get
			{
				if(_disqualifiedTest==null)
				{
					_disqualifiedTest = new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory)));
					_disqualifiedTest.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _disqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomerQuestionAnswerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomerQuestionAnswerEntity))]
		public virtual EntityCollection<EventCustomerQuestionAnswerEntity> EventCustomerQuestionAnswer
		{
			get
			{
				if(_eventCustomerQuestionAnswer==null)
				{
					_eventCustomerQuestionAnswer = new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory)));
					_eventCustomerQuestionAnswer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _eventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomerResultEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomerResultEntity))]
		public virtual EntityCollection<EventCustomerResultEntity> EventCustomerResult
		{
			get
			{
				if(_eventCustomerResult==null)
				{
					_eventCustomerResult = new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory)));
					_eventCustomerResult.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _eventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomers
		{
			get
			{
				if(_eventCustomers==null)
				{
					_eventCustomers = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomers.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _eventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPaymentDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPaymentDetailsEntity))]
		public virtual EntityCollection<EventPaymentDetailsEntity> EventPaymentDetails
		{
			get
			{
				if(_eventPaymentDetails==null)
				{
					_eventPaymentDetails = new EntityCollection<EventPaymentDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPaymentDetailsEntityFactory)));
					_eventPaymentDetails.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _eventPaymentDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'FillEventCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(FillEventCallQueueEntity))]
		public virtual EntityCollection<FillEventCallQueueEntity> FillEventCallQueue
		{
			get
			{
				if(_fillEventCallQueue==null)
				{
					_fillEventCallQueue = new EntityCollection<FillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FillEventCallQueueEntityFactory)));
					_fillEventCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _fillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'GuardianDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(GuardianDetailsEntity))]
		public virtual EntityCollection<GuardianDetailsEntity> GuardianDetails
		{
			get
			{
				if(_guardianDetails==null)
				{
					_guardianDetails = new EntityCollection<GuardianDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GuardianDetailsEntityFactory)));
					_guardianDetails.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _guardianDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalPartnerCustomerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalPartnerCustomerEntity))]
		public virtual EntityCollection<HospitalPartnerCustomerEntity> HospitalPartnerCustomer
		{
			get
			{
				if(_hospitalPartnerCustomer==null)
				{
					_hospitalPartnerCustomer = new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory)));
					_hospitalPartnerCustomer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _hospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LanguageBarrierCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LanguageBarrierCallQueueEntity))]
		public virtual EntityCollection<LanguageBarrierCallQueueEntity> LanguageBarrierCallQueue
		{
			get
			{
				if(_languageBarrierCallQueue==null)
				{
					_languageBarrierCallQueue = new EntityCollection<LanguageBarrierCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageBarrierCallQueueEntityFactory)));
					_languageBarrierCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _languageBarrierCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MailRoundCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MailRoundCallQueueEntity))]
		public virtual EntityCollection<MailRoundCallQueueEntity> MailRoundCallQueue
		{
			get
			{
				if(_mailRoundCallQueue==null)
				{
					_mailRoundCallQueue = new EntityCollection<MailRoundCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MailRoundCallQueueEntityFactory)));
					_mailRoundCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _mailRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MedicationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MedicationEntity))]
		public virtual EntityCollection<MedicationEntity> Medication
		{
			get
			{
				if(_medication==null)
				{
					_medication = new EntityCollection<MedicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MedicationEntityFactory)));
					_medication.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _medication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MemberUploadLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MemberUploadLogEntity))]
		public virtual EntityCollection<MemberUploadLogEntity> MemberUploadLog
		{
			get
			{
				if(_memberUploadLog==null)
				{
					_memberUploadLog = new EntityCollection<MemberUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MemberUploadLogEntityFactory)));
					_memberUploadLog.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _memberUploadLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'NoShowCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(NoShowCallQueueEntity))]
		public virtual EntityCollection<NoShowCallQueueEntity> NoShowCallQueue
		{
			get
			{
				if(_noShowCallQueue==null)
				{
					_noShowCallQueue = new EntityCollection<NoShowCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NoShowCallQueueEntityFactory)));
					_noShowCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _noShowCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianInvoiceItemEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianInvoiceItemEntity))]
		public virtual EntityCollection<PhysicianInvoiceItemEntity> PhysicianInvoiceItem
		{
			get
			{
				if(_physicianInvoiceItem==null)
				{
					_physicianInvoiceItem = new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory)));
					_physicianInvoiceItem.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _physicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreAssessmentCustomerCallQueueCallAttemptEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreAssessmentCustomerCallQueueCallAttemptEntity))]
		public virtual EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity> PreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				if(_preAssessmentCustomerCallQueueCallAttempt==null)
				{
					_preAssessmentCustomerCallQueueCallAttempt = new EntityCollection<PreAssessmentCustomerCallQueueCallAttemptEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreAssessmentCustomerCallQueueCallAttemptEntityFactory)));
					_preAssessmentCustomerCallQueueCallAttempt.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _preAssessmentCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationResultEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationResultEntity))]
		public virtual EntityCollection<PreQualificationResultEntity> PreQualificationResult
		{
			get
			{
				if(_preQualificationResult==null)
				{
					_preQualificationResult = new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory)));
					_preQualificationResult.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _preQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectCustomerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectCustomerEntity))]
		public virtual EntityCollection<ProspectCustomerEntity> ProspectCustomer
		{
			get
			{
				if(_prospectCustomer==null)
				{
					_prospectCustomer = new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory)));
					_prospectCustomer.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _prospectCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RapsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RapsEntity))]
		public virtual EntityCollection<RapsEntity> Raps
		{
			get
			{
				if(_raps==null)
				{
					_raps = new EntityCollection<RapsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsEntityFactory)));
					_raps.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _raps;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ReferralEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ReferralEntity))]
		public virtual EntityCollection<ReferralEntity> Referral
		{
			get
			{
				if(_referral==null)
				{
					_referral = new EntityCollection<ReferralEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ReferralEntityFactory)));
					_referral.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _referral;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RequiredTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RequiredTestEntity))]
		public virtual EntityCollection<RequiredTestEntity> RequiredTest
		{
			get
			{
				if(_requiredTest==null)
				{
					_requiredTest = new EntityCollection<RequiredTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RequiredTestEntityFactory)));
					_requiredTest.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _requiredTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ResultArchiveUploadLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ResultArchiveUploadLogEntity))]
		public virtual EntityCollection<ResultArchiveUploadLogEntity> ResultArchiveUploadLog
		{
			get
			{
				if(_resultArchiveUploadLog==null)
				{
					_resultArchiveUploadLog = new EntityCollection<ResultArchiveUploadLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadLogEntityFactory)));
					_resultArchiveUploadLog.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _resultArchiveUploadLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'SuspectConditionEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(SuspectConditionEntity))]
		public virtual EntityCollection<SuspectConditionEntity> SuspectCondition
		{
			get
			{
				if(_suspectCondition==null)
				{
					_suspectCondition = new EntityCollection<SuspectConditionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionEntityFactory)));
					_suspectCondition.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _suspectCondition;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TempCartEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TempCartEntity))]
		public virtual EntityCollection<TempCartEntity> TempCart
		{
			get
			{
				if(_tempCart==null)
				{
					_tempCart = new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory)));
					_tempCart.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _tempCart;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestimonialEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestimonialEntity))]
		public virtual EntityCollection<TestimonialEntity> Testimonial
		{
			get
			{
				if(_testimonial==null)
				{
					_testimonial = new EntityCollection<TestimonialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestimonialEntityFactory)));
					_testimonial.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _testimonial;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'UncontactedCustomerCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(UncontactedCustomerCallQueueEntity))]
		public virtual EntityCollection<UncontactedCustomerCallQueueEntity> UncontactedCustomerCallQueue
		{
			get
			{
				if(_uncontactedCustomerCallQueue==null)
				{
					_uncontactedCustomerCallQueue = new EntityCollection<UncontactedCustomerCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(UncontactedCustomerCallQueueEntityFactory)));
					_uncontactedCustomerCallQueue.SetContainingEntityInfo(this, "CustomerProfile");
				}
				return _uncontactedCustomerCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				if(_accountCollectionViaLanguageBarrierCallQueue==null)
				{
					_accountCollectionViaLanguageBarrierCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaLanguageBarrierCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaLanguageBarrierCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				if(_accountCollectionViaUncontactedCustomerCallQueue==null)
				{
					_accountCollectionViaUncontactedCustomerCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaUncontactedCustomerCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaUncontactedCustomerCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaMailRoundCallQueue
		{
			get
			{
				if(_accountCollectionViaMailRoundCallQueue==null)
				{
					_accountCollectionViaMailRoundCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaMailRoundCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaMailRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaCallRoundCallQueue
		{
			get
			{
				if(_accountCollectionViaCallRoundCallQueue==null)
				{
					_accountCollectionViaCallRoundCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaCallRoundCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaCallRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaNoShowCallQueue
		{
			get
			{
				if(_accountCollectionViaNoShowCallQueue==null)
				{
					_accountCollectionViaNoShowCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaNoShowCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaNoShowCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaCallQueueCustomer
		{
			get
			{
				if(_accountCollectionViaCallQueueCustomer==null)
				{
					_accountCollectionViaCallQueueCustomer = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _accountCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaFillEventCallQueue
		{
			get
			{
				if(_accountCollectionViaFillEventCallQueue==null)
				{
					_accountCollectionViaFillEventCallQueue = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaFillEventCallQueue.IsReadOnly=true;
				}
				return _accountCollectionViaFillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ActivityTypeEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ActivityTypeEntity))]
		public virtual EntityCollection<ActivityTypeEntity> ActivityTypeCollectionViaCallQueueCustomer
		{
			get
			{
				if(_activityTypeCollectionViaCallQueueCustomer==null)
				{
					_activityTypeCollectionViaCallQueueCustomer = new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory)));
					_activityTypeCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _activityTypeCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AddressEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AddressEntity))]
		public virtual EntityCollection<AddressEntity> AddressCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				if(_addressCollectionViaCustomerPrimaryCarePhysician==null)
				{
					_addressCollectionViaCustomerPrimaryCarePhysician = new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory)));
					_addressCollectionViaCustomerPrimaryCarePhysician.IsReadOnly=true;
				}
				return _addressCollectionViaCustomerPrimaryCarePhysician;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AddressEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AddressEntity))]
		public virtual EntityCollection<AddressEntity> AddressCollectionViaCustomerPrimaryCarePhysician_
		{
			get
			{
				if(_addressCollectionViaCustomerPrimaryCarePhysician_==null)
				{
					_addressCollectionViaCustomerPrimaryCarePhysician_ = new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory)));
					_addressCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly=true;
				}
				return _addressCollectionViaCustomerPrimaryCarePhysician_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AfaffiliateCampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AfaffiliateCampaignEntity))]
		public virtual EntityCollection<AfaffiliateCampaignEntity> AfaffiliateCampaignCollectionViaEventCustomers
		{
			get
			{
				if(_afaffiliateCampaignCollectionViaEventCustomers==null)
				{
					_afaffiliateCampaignCollectionViaEventCustomers = new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory)));
					_afaffiliateCampaignCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _afaffiliateCampaignCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AfaffiliateCampaignMarketingMaterialEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AfaffiliateCampaignMarketingMaterialEntity))]
		public virtual EntityCollection<AfaffiliateCampaignMarketingMaterialEntity> AfaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer
		{
			get
			{
				if(_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer==null)
				{
					_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer = new EntityCollection<AfaffiliateCampaignMarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignMarketingMaterialEntityFactory)));
					_afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer.IsReadOnly=true;
				}
				return _afaffiliateCampaignMarketingMaterialCollectionViaProspectCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'BillingAccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(BillingAccountEntity))]
		public virtual EntityCollection<BillingAccountEntity> BillingAccountCollectionViaCustomerBillingAccount
		{
			get
			{
				if(_billingAccountCollectionViaCustomerBillingAccount==null)
				{
					_billingAccountCollectionViaCustomerBillingAccount = new EntityCollection<BillingAccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(BillingAccountEntityFactory)));
					_billingAccountCollectionViaCustomerBillingAccount.IsReadOnly=true;
				}
				return _billingAccountCollectionViaCustomerBillingAccount;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueEntity))]
		public virtual EntityCollection<CallQueueEntity> CallQueueCollectionViaCallQueueCustomer
		{
			get
			{
				if(_callQueueCollectionViaCallQueueCustomer==null)
				{
					_callQueueCollectionViaCallQueueCustomer = new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory)));
					_callQueueCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _callQueueCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueCriteriaEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueCriteriaEntity))]
		public virtual EntityCollection<CallQueueCriteriaEntity> CallQueueCriteriaCollectionViaCallQueueCustomer
		{
			get
			{
				if(_callQueueCriteriaCollectionViaCallQueueCustomer==null)
				{
					_callQueueCriteriaCollectionViaCallQueueCustomer = new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory)));
					_callQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _callQueueCriteriaCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueCustomerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueCustomerEntity))]
		public virtual EntityCollection<CallQueueCustomerEntity> CallQueueCustomerCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				if(_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt==null)
				{
					_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt = new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory)));
					_callQueueCustomerCollectionViaCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _callQueueCustomerCollectionViaCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallsEntity))]
		public virtual EntityCollection<CallsEntity> CallsCollectionViaPreQualificationResult
		{
			get
			{
				if(_callsCollectionViaPreQualificationResult==null)
				{
					_callsCollectionViaPreQualificationResult = new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory)));
					_callsCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _callsCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallsEntity))]
		public virtual EntityCollection<CallsEntity> CallsCollectionViaCustomerAccountGlocomNumber
		{
			get
			{
				if(_callsCollectionViaCustomerAccountGlocomNumber==null)
				{
					_callsCollectionViaCustomerAccountGlocomNumber = new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory)));
					_callsCollectionViaCustomerAccountGlocomNumber.IsReadOnly=true;
				}
				return _callsCollectionViaCustomerAccountGlocomNumber;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallsEntity))]
		public virtual EntityCollection<CallsEntity> CallsCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				if(_callsCollectionViaCustomerCallQueueCallAttempt==null)
				{
					_callsCollectionViaCustomerCallQueueCallAttempt = new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory)));
					_callsCollectionViaCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _callsCollectionViaCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallsEntity))]
		public virtual EntityCollection<CallsEntity> CallsCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				if(_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt==null)
				{
					_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt = new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory)));
					_callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _callsCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallUploadEntity))]
		public virtual EntityCollection<CallUploadEntity> CallUploadCollectionViaDirectMail
		{
			get
			{
				if(_callUploadCollectionViaDirectMail==null)
				{
					_callUploadCollectionViaDirectMail = new EntityCollection<CallUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallUploadEntityFactory)));
					_callUploadCollectionViaDirectMail.IsReadOnly=true;
				}
				return _callUploadCollectionViaDirectMail;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CampaignEntity))]
		public virtual EntityCollection<CampaignEntity> CampaignCollectionViaDirectMail
		{
			get
			{
				if(_campaignCollectionViaDirectMail==null)
				{
					_campaignCollectionViaDirectMail = new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory)));
					_campaignCollectionViaDirectMail.IsReadOnly=true;
				}
				return _campaignCollectionViaDirectMail;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CampaignEntity))]
		public virtual EntityCollection<CampaignEntity> CampaignCollectionViaEventCustomers
		{
			get
			{
				if(_campaignCollectionViaEventCustomers==null)
				{
					_campaignCollectionViaEventCustomers = new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory)));
					_campaignCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _campaignCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CampaignEntity))]
		public virtual EntityCollection<CampaignEntity> CampaignCollectionViaCallQueueCustomer
		{
			get
			{
				if(_campaignCollectionViaCallQueueCustomer==null)
				{
					_campaignCollectionViaCallQueueCustomer = new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory)));
					_campaignCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _campaignCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChargeCardEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChargeCardEntity))]
		public virtual EntityCollection<ChargeCardEntity> ChargeCardCollectionViaTempCart
		{
			get
			{
				if(_chargeCardCollectionViaTempCart==null)
				{
					_chargeCardCollectionViaTempCart = new EntityCollection<ChargeCardEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChargeCardEntityFactory)));
					_chargeCardCollectionViaTempCart.IsReadOnly=true;
				}
				return _chargeCardCollectionViaTempCart;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseCampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseCampaignEntity))]
		public virtual EntityCollection<ChaseCampaignEntity> ChaseCampaignCollectionViaCustomerChaseCampaign
		{
			get
			{
				if(_chaseCampaignCollectionViaCustomerChaseCampaign==null)
				{
					_chaseCampaignCollectionViaCustomerChaseCampaign = new EntityCollection<ChaseCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseCampaignEntityFactory)));
					_chaseCampaignCollectionViaCustomerChaseCampaign.IsReadOnly=true;
				}
				return _chaseCampaignCollectionViaCustomerChaseCampaign;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseChannelLevelEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseChannelLevelEntity))]
		public virtual EntityCollection<ChaseChannelLevelEntity> ChaseChannelLevelCollectionViaCustomerChaseChannel
		{
			get
			{
				if(_chaseChannelLevelCollectionViaCustomerChaseChannel==null)
				{
					_chaseChannelLevelCollectionViaCustomerChaseChannel = new EntityCollection<ChaseChannelLevelEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseChannelLevelEntityFactory)));
					_chaseChannelLevelCollectionViaCustomerChaseChannel.IsReadOnly=true;
				}
				return _chaseChannelLevelCollectionViaCustomerChaseChannel;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseGroupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseGroupEntity))]
		public virtual EntityCollection<ChaseGroupEntity> ChaseGroupCollectionViaChaseOutbound
		{
			get
			{
				if(_chaseGroupCollectionViaChaseOutbound==null)
				{
					_chaseGroupCollectionViaChaseOutbound = new EntityCollection<ChaseGroupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseGroupEntityFactory)));
					_chaseGroupCollectionViaChaseOutbound.IsReadOnly=true;
				}
				return _chaseGroupCollectionViaChaseOutbound;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseOutboundEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseOutboundEntity))]
		public virtual EntityCollection<ChaseOutboundEntity> ChaseOutboundCollectionViaCustomerChaseProduct
		{
			get
			{
				if(_chaseOutboundCollectionViaCustomerChaseProduct==null)
				{
					_chaseOutboundCollectionViaCustomerChaseProduct = new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory)));
					_chaseOutboundCollectionViaCustomerChaseProduct.IsReadOnly=true;
				}
				return _chaseOutboundCollectionViaCustomerChaseProduct;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseOutboundEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseOutboundEntity))]
		public virtual EntityCollection<ChaseOutboundEntity> ChaseOutboundCollectionViaCustomerChaseChannel
		{
			get
			{
				if(_chaseOutboundCollectionViaCustomerChaseChannel==null)
				{
					_chaseOutboundCollectionViaCustomerChaseChannel = new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory)));
					_chaseOutboundCollectionViaCustomerChaseChannel.IsReadOnly=true;
				}
				return _chaseOutboundCollectionViaCustomerChaseChannel;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseOutboundEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseOutboundEntity))]
		public virtual EntityCollection<ChaseOutboundEntity> ChaseOutboundCollectionViaCustomerChaseCampaign
		{
			get
			{
				if(_chaseOutboundCollectionViaCustomerChaseCampaign==null)
				{
					_chaseOutboundCollectionViaCustomerChaseCampaign = new EntityCollection<ChaseOutboundEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseOutboundEntityFactory)));
					_chaseOutboundCollectionViaCustomerChaseCampaign.IsReadOnly=true;
				}
				return _chaseOutboundCollectionViaCustomerChaseCampaign;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ChaseProductEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ChaseProductEntity))]
		public virtual EntityCollection<ChaseProductEntity> ChaseProductCollectionViaCustomerChaseProduct
		{
			get
			{
				if(_chaseProductCollectionViaCustomerChaseProduct==null)
				{
					_chaseProductCollectionViaCustomerChaseProduct = new EntityCollection<ChaseProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ChaseProductEntityFactory)));
					_chaseProductCollectionViaCustomerChaseProduct.IsReadOnly=true;
				}
				return _chaseProductCollectionViaCustomerChaseProduct;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ClickLogEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ClickLogEntity))]
		public virtual EntityCollection<ClickLogEntity> ClickLogCollectionViaClickConversion
		{
			get
			{
				if(_clickLogCollectionViaClickConversion==null)
				{
					_clickLogCollectionViaClickConversion = new EntityCollection<ClickLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ClickLogEntityFactory)));
					_clickLogCollectionViaClickConversion.IsReadOnly=true;
				}
				return _clickLogCollectionViaClickConversion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CorporateUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CorporateUploadEntity))]
		public virtual EntityCollection<CorporateUploadEntity> CorporateUploadCollectionViaMemberUploadLog
		{
			get
			{
				if(_corporateUploadCollectionViaMemberUploadLog==null)
				{
					_corporateUploadCollectionViaMemberUploadLog = new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory)));
					_corporateUploadCollectionViaMemberUploadLog.IsReadOnly=true;
				}
				return _corporateUploadCollectionViaMemberUploadLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CorporateUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CorporateUploadEntity))]
		public virtual EntityCollection<CorporateUploadEntity> CorporateUploadCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_corporateUploadCollectionViaCustomerOrderHistory==null)
				{
					_corporateUploadCollectionViaCustomerOrderHistory = new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory)));
					_corporateUploadCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _corporateUploadCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthQuestionsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthQuestionsEntity))]
		public virtual EntityCollection<CustomerHealthQuestionsEntity> CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory)));
					_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthQuestionsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthQuestionsEntity))]
		public virtual EntityCollection<CustomerHealthQuestionsEntity> CustomerHealthQuestionsCollectionViaCustomerHealthInfo
		{
			get
			{
				if(_customerHealthQuestionsCollectionViaCustomerHealthInfo==null)
				{
					_customerHealthQuestionsCollectionViaCustomerHealthInfo = new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory)));
					_customerHealthQuestionsCollectionViaCustomerHealthInfo.IsReadOnly=true;
				}
				return _customerHealthQuestionsCollectionViaCustomerHealthInfo;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthQuestionsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthQuestionsEntity))]
		public virtual EntityCollection<CustomerHealthQuestionsEntity> CustomerHealthQuestionsCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				if(_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive==null)
				{
					_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive = new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory)));
					_customerHealthQuestionsCollectionViaCustomerHealthInfoArchive.IsReadOnly=true;
				}
				return _customerHealthQuestionsCollectionViaCustomerHealthInfoArchive;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileHistoryEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileHistoryEntity))]
		public virtual EntityCollection<CustomerProfileHistoryEntity> CustomerProfileHistoryCollectionViaEventCustomers
		{
			get
			{
				if(_customerProfileHistoryCollectionViaEventCustomers==null)
				{
					_customerProfileHistoryCollectionViaEventCustomers = new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory)));
					_customerProfileHistoryCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _customerProfileHistoryCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerRegistrationNotesEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerRegistrationNotesEntity))]
		public virtual EntityCollection<CustomerRegistrationNotesEntity> CustomerRegistrationNotesCollectionViaEventCustomers
		{
			get
			{
				if(_customerRegistrationNotesCollectionViaEventCustomers==null)
				{
					_customerRegistrationNotesCollectionViaEventCustomers = new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory)));
					_customerRegistrationNotesCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _customerRegistrationNotesCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerSurveyQuestionAnswerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerSurveyQuestionAnswerEntity))]
		public virtual EntityCollection<CustomerSurveyQuestionAnswerEntity> CustomerSurveyQuestionAnswerCollectionViaCustomerSurvey
		{
			get
			{
				if(_customerSurveyQuestionAnswerCollectionViaCustomerSurvey==null)
				{
					_customerSurveyQuestionAnswerCollectionViaCustomerSurvey = new EntityCollection<CustomerSurveyQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerSurveyQuestionAnswerEntityFactory)));
					_customerSurveyQuestionAnswerCollectionViaCustomerSurvey.IsReadOnly=true;
				}
				return _customerSurveyQuestionAnswerCollectionViaCustomerSurvey;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DirectMailTypeEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DirectMailTypeEntity))]
		public virtual EntityCollection<DirectMailTypeEntity> DirectMailTypeCollectionViaDirectMail
		{
			get
			{
				if(_directMailTypeCollectionViaDirectMail==null)
				{
					_directMailTypeCollectionViaDirectMail = new EntityCollection<DirectMailTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DirectMailTypeEntityFactory)));
					_directMailTypeCollectionViaDirectMail.IsReadOnly=true;
				}
				return _directMailTypeCollectionViaDirectMail;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EligibilityEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EligibilityEntity))]
		public virtual EntityCollection<EligibilityEntity> EligibilityCollectionViaTempCart
		{
			get
			{
				if(_eligibilityCollectionViaTempCart==null)
				{
					_eligibilityCollectionViaTempCart = new EntityCollection<EligibilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EligibilityEntityFactory)));
					_eligibilityCollectionViaTempCart.IsReadOnly=true;
				}
				return _eligibilityCollectionViaTempCart;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAppointmentEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAppointmentEntity))]
		public virtual EntityCollection<EventAppointmentEntity> EventAppointmentCollectionViaEventCustomers
		{
			get
			{
				if(_eventAppointmentCollectionViaEventCustomers==null)
				{
					_eventAppointmentCollectionViaEventCustomers = new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory)));
					_eventAppointmentCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _eventAppointmentCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				if(_eventCustomersCollectionViaCustomerHealthInfoArchive==null)
				{
					_eventCustomersCollectionViaCustomerHealthInfoArchive = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCustomerHealthInfoArchive.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCustomerHealthInfoArchive;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCallQueueCustomer
		{
			get
			{
				if(_eventCustomersCollectionViaCallQueueCustomer==null)
				{
					_eventCustomersCollectionViaCallQueueCustomer = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_eventCustomersCollectionViaDependentDisqualifiedTest==null)
				{
					_eventCustomersCollectionViaDependentDisqualifiedTest = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventCustomersCollectionViaCustomerOrderHistory==null)
				{
					_eventCustomersCollectionViaCustomerOrderHistory = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaDisqualifiedTest
		{
			get
			{
				if(_eventCustomersCollectionViaDisqualifiedTest==null)
				{
					_eventCustomersCollectionViaDisqualifiedTest = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaClickConversion
		{
			get
			{
				if(_eventCustomersCollectionViaClickConversion==null)
				{
					_eventCustomersCollectionViaClickConversion = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaClickConversion.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaClickConversion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCustomerHealthInfo
		{
			get
			{
				if(_eventCustomersCollectionViaCustomerHealthInfo==null)
				{
					_eventCustomersCollectionViaCustomerHealthInfo = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCustomerHealthInfo.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCustomerHealthInfo;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_eventCustomersCollectionViaEventCustomerQuestionAnswer==null)
				{
					_eventCustomersCollectionViaEventCustomerQuestionAnswer = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPackageDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPackageDetailsEntity))]
		public virtual EntityCollection<EventPackageDetailsEntity> EventPackageDetailsCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventPackageDetailsCollectionViaCustomerOrderHistory==null)
				{
					_eventPackageDetailsCollectionViaCustomerOrderHistory = new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory)));
					_eventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventPackageDetailsCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPackageDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPackageDetailsEntity))]
		public virtual EntityCollection<EventPackageDetailsEntity> EventPackageDetailsCollectionViaEventPaymentDetails
		{
			get
			{
				if(_eventPackageDetailsCollectionViaEventPaymentDetails==null)
				{
					_eventPackageDetailsCollectionViaEventPaymentDetails = new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory)));
					_eventPackageDetailsCollectionViaEventPaymentDetails.IsReadOnly=true;
				}
				return _eventPackageDetailsCollectionViaEventPaymentDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_eventsCollectionViaEventCustomerQuestionAnswer==null)
				{
					_eventsCollectionViaEventCustomerQuestionAnswer = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _eventsCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaEventCustomerResult
		{
			get
			{
				if(_eventsCollectionViaEventCustomerResult==null)
				{
					_eventsCollectionViaEventCustomerResult = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _eventsCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaEventCustomers
		{
			get
			{
				if(_eventsCollectionViaEventCustomers==null)
				{
					_eventsCollectionViaEventCustomers = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _eventsCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_eventsCollectionViaPhysicianInvoiceItem==null)
				{
					_eventsCollectionViaPhysicianInvoiceItem = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _eventsCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaDisqualifiedTest
		{
			get
			{
				if(_eventsCollectionViaDisqualifiedTest==null)
				{
					_eventsCollectionViaDisqualifiedTest = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _eventsCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaPreQualificationResult
		{
			get
			{
				if(_eventsCollectionViaPreQualificationResult==null)
				{
					_eventsCollectionViaPreQualificationResult = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _eventsCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_eventsCollectionViaDependentDisqualifiedTest==null)
				{
					_eventsCollectionViaDependentDisqualifiedTest = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _eventsCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaHospitalPartnerCustomer
		{
			get
			{
				if(_eventsCollectionViaHospitalPartnerCustomer==null)
				{
					_eventsCollectionViaHospitalPartnerCustomer = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaHospitalPartnerCustomer.IsReadOnly=true;
				}
				return _eventsCollectionViaHospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaCallQueueCustomer
		{
			get
			{
				if(_eventsCollectionViaCallQueueCustomer==null)
				{
					_eventsCollectionViaCallQueueCustomer = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _eventsCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaCustomerEventTestFinding
		{
			get
			{
				if(_eventsCollectionViaCustomerEventTestFinding==null)
				{
					_eventsCollectionViaCustomerEventTestFinding = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaCustomerEventTestFinding.IsReadOnly=true;
				}
				return _eventsCollectionViaCustomerEventTestFinding;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventsCollectionViaCustomerOrderHistory==null)
				{
					_eventsCollectionViaCustomerOrderHistory = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventsCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventsEntity))]
		public virtual EntityCollection<EventsEntity> EventsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_eventsCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_eventsCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<EventsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory)));
					_eventsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _eventsCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventTestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventTestEntity))]
		public virtual EntityCollection<EventTestEntity> EventTestCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventTestCollectionViaCustomerOrderHistory==null)
				{
					_eventTestCollectionViaCustomerOrderHistory = new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory)));
					_eventTestCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventTestCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'FileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(FileEntity))]
		public virtual EntityCollection<FileEntity> FileCollectionViaTestimonial
		{
			get
			{
				if(_fileCollectionViaTestimonial==null)
				{
					_fileCollectionViaTestimonial = new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory)));
					_fileCollectionViaTestimonial.IsReadOnly=true;
				}
				return _fileCollectionViaTestimonial;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'GcNotGivenReasonEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(GcNotGivenReasonEntity))]
		public virtual EntityCollection<GcNotGivenReasonEntity> GcNotGivenReasonCollectionViaEventCustomers
		{
			get
			{
				if(_gcNotGivenReasonCollectionViaEventCustomers==null)
				{
					_gcNotGivenReasonCollectionViaEventCustomers = new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory)));
					_gcNotGivenReasonCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _gcNotGivenReasonCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HafTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HafTemplateEntity))]
		public virtual EntityCollection<HafTemplateEntity> HafTemplateCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_hafTemplateCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory)));
					_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _hafTemplateCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalFacilityEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalFacilityEntity))]
		public virtual EntityCollection<HospitalFacilityEntity> HospitalFacilityCollectionViaEventCustomers
		{
			get
			{
				if(_hospitalFacilityCollectionViaEventCustomers==null)
				{
					_hospitalFacilityCollectionViaEventCustomers = new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory)));
					_hospitalFacilityCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _hospitalFacilityCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'IcdCodesEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(IcdCodesEntity))]
		public virtual EntityCollection<IcdCodesEntity> IcdCodesCollectionViaCustomerIcdCode
		{
			get
			{
				if(_icdCodesCollectionViaCustomerIcdCode==null)
				{
					_icdCodesCollectionViaCustomerIcdCode = new EntityCollection<IcdCodesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(IcdCodesEntityFactory)));
					_icdCodesCollectionViaCustomerIcdCode.IsReadOnly=true;
				}
				return _icdCodesCollectionViaCustomerIcdCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LanguageEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LanguageEntity))]
		public virtual EntityCollection<LanguageEntity> LanguageCollectionViaCallQueueCustomer
		{
			get
			{
				if(_languageCollectionViaCallQueueCustomer==null)
				{
					_languageCollectionViaCallQueueCustomer = new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory)));
					_languageCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _languageCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCallRoundCallQueue
		{
			get
			{
				if(_lookupCollectionViaCallRoundCallQueue==null)
				{
					_lookupCollectionViaCallRoundCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCallRoundCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaCallRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult______
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult______==null)
				{
					_lookupCollectionViaPreQualificationResult______ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult______.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaNoShowCallQueue
		{
			get
			{
				if(_lookupCollectionViaNoShowCallQueue==null)
				{
					_lookupCollectionViaNoShowCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaNoShowCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaNoShowCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult==null)
				{
					_lookupCollectionViaPreQualificationResult = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_______
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_______==null)
				{
					_lookupCollectionViaPreQualificationResult_______ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_______.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomerResult
		{
			get
			{
				if(_lookupCollectionViaEventCustomerResult==null)
				{
					_lookupCollectionViaEventCustomerResult = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaMailRoundCallQueue
		{
			get
			{
				if(_lookupCollectionViaMailRoundCallQueue==null)
				{
					_lookupCollectionViaMailRoundCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaMailRoundCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaMailRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult__
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult__==null)
				{
					_lookupCollectionViaPreQualificationResult__ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult__.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaChaseOutbound
		{
			get
			{
				if(_lookupCollectionViaChaseOutbound==null)
				{
					_lookupCollectionViaChaseOutbound = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaChaseOutbound.IsReadOnly=true;
				}
				return _lookupCollectionViaChaseOutbound;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				if(_lookupCollectionViaLanguageBarrierCallQueue==null)
				{
					_lookupCollectionViaLanguageBarrierCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaLanguageBarrierCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaLanguageBarrierCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_____
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_____==null)
				{
					_lookupCollectionViaPreQualificationResult_____ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_____.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult____
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult____==null)
				{
					_lookupCollectionViaPreQualificationResult____ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult____.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult___
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult___==null)
				{
					_lookupCollectionViaPreQualificationResult___ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult___.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult___;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerProfileHistory__
		{
			get
			{
				if(_lookupCollectionViaCustomerProfileHistory__==null)
				{
					_lookupCollectionViaCustomerProfileHistory__ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerProfileHistory__.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerProfileHistory__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerProfileHistory___
		{
			get
			{
				if(_lookupCollectionViaCustomerProfileHistory___==null)
				{
					_lookupCollectionViaCustomerProfileHistory___ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerProfileHistory___.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerProfileHistory___;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_lookupCollectionViaCustomerOrderHistory==null)
				{
					_lookupCollectionViaCustomerOrderHistory = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerProfileHistory_
		{
			get
			{
				if(_lookupCollectionViaCustomerProfileHistory_==null)
				{
					_lookupCollectionViaCustomerProfileHistory_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerProfileHistory_.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerProfileHistory_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				if(_lookupCollectionViaUncontactedCustomerCallQueue==null)
				{
					_lookupCollectionViaUncontactedCustomerCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaUncontactedCustomerCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaUncontactedCustomerCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				if(_lookupCollectionViaCustomerPrimaryCarePhysician==null)
				{
					_lookupCollectionViaCustomerPrimaryCarePhysician = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerPrimaryCarePhysician.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerPrimaryCarePhysician;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerProfileHistory
		{
			get
			{
				if(_lookupCollectionViaCustomerProfileHistory==null)
				{
					_lookupCollectionViaCustomerProfileHistory = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerProfileHistory.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerProfileHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCallQueueCustomer
		{
			get
			{
				if(_lookupCollectionViaCallQueueCustomer==null)
				{
					_lookupCollectionViaCallQueueCustomer = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _lookupCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomers
		{
			get
			{
				if(_lookupCollectionViaEventCustomers==null)
				{
					_lookupCollectionViaEventCustomers = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_==null)
				{
					_lookupCollectionViaPreQualificationResult_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult________
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult________==null)
				{
					_lookupCollectionViaPreQualificationResult________ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult________.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult________;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerUnsubscribedSmsNotification
		{
			get
			{
				if(_lookupCollectionViaCustomerUnsubscribedSmsNotification==null)
				{
					_lookupCollectionViaCustomerUnsubscribedSmsNotification = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerUnsubscribedSmsNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaFillEventCallQueue
		{
			get
			{
				if(_lookupCollectionViaFillEventCallQueue==null)
				{
					_lookupCollectionViaFillEventCallQueue = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaFillEventCallQueue.IsReadOnly=true;
				}
				return _lookupCollectionViaFillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomers_
		{
			get
			{
				if(_lookupCollectionViaEventCustomers_==null)
				{
					_lookupCollectionViaEventCustomers_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomers_.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomers_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaProspectCustomer
		{
			get
			{
				if(_lookupCollectionViaProspectCustomer==null)
				{
					_lookupCollectionViaProspectCustomer = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaProspectCustomer.IsReadOnly=true;
				}
				return _lookupCollectionViaProspectCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'NdcEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(NdcEntity))]
		public virtual EntityCollection<NdcEntity> NdcCollectionViaCurrentMedication
		{
			get
			{
				if(_ndcCollectionViaCurrentMedication==null)
				{
					_ndcCollectionViaCurrentMedication = new EntityCollection<NdcEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NdcEntityFactory)));
					_ndcCollectionViaCurrentMedication.IsReadOnly=true;
				}
				return _ndcCollectionViaCurrentMedication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'NotesDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(NotesDetailsEntity))]
		public virtual EntityCollection<NotesDetailsEntity> NotesDetailsCollectionViaCallQueueCustomer
		{
			get
			{
				if(_notesDetailsCollectionViaCallQueueCustomer==null)
				{
					_notesDetailsCollectionViaCallQueueCustomer = new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory)));
					_notesDetailsCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _notesDetailsCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaGuardianDetails_
		{
			get
			{
				if(_organizationRoleUserCollectionViaGuardianDetails_==null)
				{
					_organizationRoleUserCollectionViaGuardianDetails_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaGuardianDetails_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaGuardianDetails_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaGuardianDetails
		{
			get
			{
				if(_organizationRoleUserCollectionViaGuardianDetails==null)
				{
					_organizationRoleUserCollectionViaGuardianDetails = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaGuardianDetails.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaGuardianDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaUncontactedCustomerCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaUncontactedCustomerCallQueue==null)
				{
					_organizationRoleUserCollectionViaUncontactedCustomerCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaUncontactedCustomerCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaUncontactedCustomerCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer_==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaReferral
		{
			get
			{
				if(_organizationRoleUserCollectionViaReferral==null)
				{
					_organizationRoleUserCollectionViaReferral = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaReferral.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaReferral;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaFillEventCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaFillEventCallQueue==null)
				{
					_organizationRoleUserCollectionViaFillEventCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaFillEventCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaFillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaRequiredTest
		{
			get
			{
				if(_organizationRoleUserCollectionViaRequiredTest==null)
				{
					_organizationRoleUserCollectionViaRequiredTest = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaRequiredTest.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaRequiredTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaProspectCustomer
		{
			get
			{
				if(_organizationRoleUserCollectionViaProspectCustomer==null)
				{
					_organizationRoleUserCollectionViaProspectCustomer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaProspectCustomer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaProspectCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaMailRoundCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaMailRoundCallQueue==null)
				{
					_organizationRoleUserCollectionViaMailRoundCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaMailRoundCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaMailRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaNoShowCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaNoShowCallQueue==null)
				{
					_organizationRoleUserCollectionViaNoShowCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaNoShowCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaNoShowCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaMedication
		{
			get
			{
				if(_organizationRoleUserCollectionViaMedication==null)
				{
					_organizationRoleUserCollectionViaMedication = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaMedication.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaMedication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallRoundCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallRoundCallQueue==null)
				{
					_organizationRoleUserCollectionViaCallRoundCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallRoundCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallRoundCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaMedication_
		{
			get
			{
				if(_organizationRoleUserCollectionViaMedication_==null)
				{
					_organizationRoleUserCollectionViaMedication_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaMedication_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaMedication_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer__
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer__==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer_==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer__
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer__==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaLanguageBarrierCallQueue
		{
			get
			{
				if(_organizationRoleUserCollectionViaLanguageBarrierCallQueue==null)
				{
					_organizationRoleUserCollectionViaLanguageBarrierCallQueue = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaLanguageBarrierCallQueue.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaLanguageBarrierCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				if(_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt==null)
				{
					_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerHealthInfo
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerHealthInfo==null)
				{
					_organizationRoleUserCollectionViaCustomerHealthInfo = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerHealthInfo.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerHealthInfo;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaDisqualifiedTest
		{
			get
			{
				if(_organizationRoleUserCollectionViaDisqualifiedTest==null)
				{
					_organizationRoleUserCollectionViaDisqualifiedTest = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerHealthInfoArchive
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerHealthInfoArchive==null)
				{
					_organizationRoleUserCollectionViaCustomerHealthInfoArchive = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerHealthInfoArchive.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerHealthInfoArchive;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaDirectMail
		{
			get
			{
				if(_organizationRoleUserCollectionViaDirectMail==null)
				{
					_organizationRoleUserCollectionViaDirectMail = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaDirectMail.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaDirectMail;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaDisqualifiedTest_
		{
			get
			{
				if(_organizationRoleUserCollectionViaDisqualifiedTest_==null)
				{
					_organizationRoleUserCollectionViaDisqualifiedTest_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaDisqualifiedTest_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer==null)
				{
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_==null)
				{
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician==null)
				{
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerEligibility_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerEligibility_==null)
				{
					_organizationRoleUserCollectionViaCustomerEligibility_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerEligibility_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerEligibility_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerIcdCode
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerIcdCode==null)
				{
					_organizationRoleUserCollectionViaCustomerIcdCode = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerIcdCode.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerIcdCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerProfileHistory
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerProfileHistory==null)
				{
					_organizationRoleUserCollectionViaCustomerProfileHistory = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerProfileHistory.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerProfileHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerTag
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerTag==null)
				{
					_organizationRoleUserCollectionViaCustomerTag = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerTag.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerTag;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_==null)
				{
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerPrimaryCarePhysician__
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__==null)
				{
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerPrimaryCarePhysician__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerTag_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerTag_==null)
				{
					_organizationRoleUserCollectionViaCustomerTag_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerTag_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerTag_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerWarmTransfer
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerWarmTransfer==null)
				{
					_organizationRoleUserCollectionViaCustomerWarmTransfer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerWarmTransfer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerWarmTransfer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerWarmTransfer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerWarmTransfer_==null)
				{
					_organizationRoleUserCollectionViaCustomerWarmTransfer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerWarmTransfer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerWarmTransfer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerTargeted
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerTargeted==null)
				{
					_organizationRoleUserCollectionViaCustomerTargeted = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerTargeted.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerTargeted;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerTargeted_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerTargeted_==null)
				{
					_organizationRoleUserCollectionViaCustomerTargeted_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerTargeted_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerTargeted_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerEligibility
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerEligibility==null)
				{
					_organizationRoleUserCollectionViaCustomerEligibility = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerEligibility.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerEligibility;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult___
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult___==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult___ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult___;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomers
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomers==null)
				{
					_organizationRoleUserCollectionViaEventCustomers = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomers_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomers_==null)
				{
					_organizationRoleUserCollectionViaEventCustomers_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomers_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomers_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult__
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult__==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult____
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult____==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult____ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult______
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult______==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult______ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_____
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_____==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_____ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt==null)
				{
					_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_==null)
				{
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCurrentMedication
		{
			get
			{
				if(_organizationRoleUserCollectionViaCurrentMedication==null)
				{
					_organizationRoleUserCollectionViaCurrentMedication = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCurrentMedication.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCurrentMedication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_______
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_______==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_______ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult________
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult________==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult________ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult________;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianEvaluationEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianEvaluationEntity))]
		public virtual EntityCollection<PhysicianEvaluationEntity> PhysicianEvaluationCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_physicianEvaluationCollectionViaPhysicianInvoiceItem==null)
				{
					_physicianEvaluationCollectionViaPhysicianInvoiceItem = new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory)));
					_physicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _physicianEvaluationCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianInvoiceEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianInvoiceEntity))]
		public virtual EntityCollection<PhysicianInvoiceEntity> PhysicianInvoiceCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_physicianInvoiceCollectionViaPhysicianInvoiceItem==null)
				{
					_physicianInvoiceCollectionViaPhysicianInvoiceItem = new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory)));
					_physicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _physicianInvoiceCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianMasterEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianMasterEntity))]
		public virtual EntityCollection<PhysicianMasterEntity> PhysicianMasterCollectionViaCustomerPrimaryCarePhysician
		{
			get
			{
				if(_physicianMasterCollectionViaCustomerPrimaryCarePhysician==null)
				{
					_physicianMasterCollectionViaCustomerPrimaryCarePhysician = new EntityCollection<PhysicianMasterEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianMasterEntityFactory)));
					_physicianMasterCollectionViaCustomerPrimaryCarePhysician.IsReadOnly=true;
				}
				return _physicianMasterCollectionViaCustomerPrimaryCarePhysician;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationQuestionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationQuestionEntity))]
		public virtual EntityCollection<PreQualificationQuestionEntity> PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer==null)
				{
					_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory)));
					_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationQuestionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationQuestionEntity))]
		public virtual EntityCollection<PreQualificationQuestionEntity> PreQualificationQuestionCollectionViaDisqualifiedTest
		{
			get
			{
				if(_preQualificationQuestionCollectionViaDisqualifiedTest==null)
				{
					_preQualificationQuestionCollectionViaDisqualifiedTest = new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory)));
					_preQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _preQualificationQuestionCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectCustomerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectCustomerEntity))]
		public virtual EntityCollection<ProspectCustomerEntity> ProspectCustomerCollectionViaClickConversion
		{
			get
			{
				if(_prospectCustomerCollectionViaClickConversion==null)
				{
					_prospectCustomerCollectionViaClickConversion = new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory)));
					_prospectCustomerCollectionViaClickConversion.IsReadOnly=true;
				}
				return _prospectCustomerCollectionViaClickConversion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectCustomerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectCustomerEntity))]
		public virtual EntityCollection<ProspectCustomerEntity> ProspectCustomerCollectionViaTempCart
		{
			get
			{
				if(_prospectCustomerCollectionViaTempCart==null)
				{
					_prospectCustomerCollectionViaTempCart = new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory)));
					_prospectCustomerCollectionViaTempCart.IsReadOnly=true;
				}
				return _prospectCustomerCollectionViaTempCart;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectCustomerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectCustomerEntity))]
		public virtual EntityCollection<ProspectCustomerEntity> ProspectCustomerCollectionViaCallQueueCustomer
		{
			get
			{
				if(_prospectCustomerCollectionViaCallQueueCustomer==null)
				{
					_prospectCustomerCollectionViaCallQueueCustomer = new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory)));
					_prospectCustomerCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _prospectCustomerCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RapsUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RapsUploadEntity))]
		public virtual EntityCollection<RapsUploadEntity> RapsUploadCollectionViaRaps
		{
			get
			{
				if(_rapsUploadCollectionViaRaps==null)
				{
					_rapsUploadCollectionViaRaps = new EntityCollection<RapsUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RapsUploadEntityFactory)));
					_rapsUploadCollectionViaRaps.IsReadOnly=true;
				}
				return _rapsUploadCollectionViaRaps;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RelationshipEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RelationshipEntity))]
		public virtual EntityCollection<RelationshipEntity> RelationshipCollectionViaChaseOutbound
		{
			get
			{
				if(_relationshipCollectionViaChaseOutbound==null)
				{
					_relationshipCollectionViaChaseOutbound = new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory)));
					_relationshipCollectionViaChaseOutbound.IsReadOnly=true;
				}
				return _relationshipCollectionViaChaseOutbound;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RelationshipEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RelationshipEntity))]
		public virtual EntityCollection<RelationshipEntity> RelationshipCollectionViaGuardianDetails
		{
			get
			{
				if(_relationshipCollectionViaGuardianDetails==null)
				{
					_relationshipCollectionViaGuardianDetails = new EntityCollection<RelationshipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RelationshipEntityFactory)));
					_relationshipCollectionViaGuardianDetails.IsReadOnly=true;
				}
				return _relationshipCollectionViaGuardianDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ResultArchiveUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ResultArchiveUploadEntity))]
		public virtual EntityCollection<ResultArchiveUploadEntity> ResultArchiveUploadCollectionViaResultArchiveUploadLog
		{
			get
			{
				if(_resultArchiveUploadCollectionViaResultArchiveUploadLog==null)
				{
					_resultArchiveUploadCollectionViaResultArchiveUploadLog = new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory)));
					_resultArchiveUploadCollectionViaResultArchiveUploadLog.IsReadOnly=true;
				}
				return _resultArchiveUploadCollectionViaResultArchiveUploadLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'SmsReceivedEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(SmsReceivedEntity))]
		public virtual EntityCollection<SmsReceivedEntity> SmsReceivedCollectionViaCustomerUnsubscribedSmsNotification
		{
			get
			{
				if(_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification==null)
				{
					_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification = new EntityCollection<SmsReceivedEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SmsReceivedEntityFactory)));
					_smsReceivedCollectionViaCustomerUnsubscribedSmsNotification.IsReadOnly=true;
				}
				return _smsReceivedCollectionViaCustomerUnsubscribedSmsNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'SuspectConditionUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(SuspectConditionUploadEntity))]
		public virtual EntityCollection<SuspectConditionUploadEntity> SuspectConditionUploadCollectionViaSuspectCondition
		{
			get
			{
				if(_suspectConditionUploadCollectionViaSuspectCondition==null)
				{
					_suspectConditionUploadCollectionViaSuspectCondition = new EntityCollection<SuspectConditionUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SuspectConditionUploadEntityFactory)));
					_suspectConditionUploadCollectionViaSuspectCondition.IsReadOnly=true;
				}
				return _suspectConditionUploadCollectionViaSuspectCondition;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TagEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TagEntity))]
		public virtual EntityCollection<TagEntity> TagCollectionViaCustomerCallQueueCallAttempt
		{
			get
			{
				if(_tagCollectionViaCustomerCallQueueCallAttempt==null)
				{
					_tagCollectionViaCustomerCallQueueCallAttempt = new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory)));
					_tagCollectionViaCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _tagCollectionViaCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TagEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TagEntity))]
		public virtual EntityCollection<TagEntity> TagCollectionViaPreAssessmentCustomerCallQueueCallAttempt
		{
			get
			{
				if(_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt==null)
				{
					_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt = new EntityCollection<TagEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TagEntityFactory)));
					_tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt.IsReadOnly=true;
				}
				return _tagCollectionViaPreAssessmentCustomerCallQueueCallAttempt;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TempCartEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TempCartEntity))]
		public virtual EntityCollection<TempCartEntity> TempCartCollectionViaPreQualificationResult
		{
			get
			{
				if(_tempCartCollectionViaPreQualificationResult==null)
				{
					_tempCartCollectionViaPreQualificationResult = new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory)));
					_tempCartCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _tempCartCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_testCollectionViaDependentDisqualifiedTest==null)
				{
					_testCollectionViaDependentDisqualifiedTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _testCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaDisqualifiedTest
		{
			get
			{
				if(_testCollectionViaDisqualifiedTest==null)
				{
					_testCollectionViaDisqualifiedTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _testCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaRequiredTest
		{
			get
			{
				if(_testCollectionViaRequiredTest==null)
				{
					_testCollectionViaRequiredTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaRequiredTest.IsReadOnly=true;
				}
				return _testCollectionViaRequiredTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaResultArchiveUploadLog
		{
			get
			{
				if(_testCollectionViaResultArchiveUploadLog==null)
				{
					_testCollectionViaResultArchiveUploadLog = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaResultArchiveUploadLog.IsReadOnly=true;
				}
				return _testCollectionViaResultArchiveUploadLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaCustomerEventTestFinding
		{
			get
			{
				if(_testCollectionViaCustomerEventTestFinding==null)
				{
					_testCollectionViaCustomerEventTestFinding = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaCustomerEventTestFinding.IsReadOnly=true;
				}
				return _testCollectionViaCustomerEventTestFinding;
			}
		}

		/// <summary> Gets / sets related entity of type 'ActivityTypeEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual ActivityTypeEntity ActivityType
		{
			get
			{
				return _activityType;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncActivityType(value);
				}
				else
				{
					if(value==null)
					{
						if(_activityType != null)
						{
							_activityType.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_activityType!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'AddressEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual AddressEntity Address
		{
			get
			{
				return _address;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncAddress(value);
				}
				else
				{
					if(value==null)
					{
						if(_address != null)
						{
							_address.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_address!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LabEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LabEntity Lab
		{
			get
			{
				return _lab;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLab(value);
				}
				else
				{
					if(value==null)
					{
						if(_lab != null)
						{
							_lab.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_lab!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LanguageEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LanguageEntity Language
		{
			get
			{
				return _language;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLanguage(value);
				}
				else
				{
					if(value==null)
					{
						if(_language != null)
						{
							_language.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_language!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup______
		{
			get
			{
				return _lookup______;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup______(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup______ != null)
						{
							_lookup______.UnsetRelatedEntity(this, "CustomerProfile______");
						}
					}
					else
					{
						if(_lookup______!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile______");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup_____
		{
			get
			{
				return _lookup_____;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup_____(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup_____ != null)
						{
							_lookup_____.UnsetRelatedEntity(this, "CustomerProfile_____");
						}
					}
					else
					{
						if(_lookup_____!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile_____");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup_______
		{
			get
			{
				return _lookup_______;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup_______(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup_______ != null)
						{
							_lookup_______.UnsetRelatedEntity(this, "CustomerProfile_______");
						}
					}
					else
					{
						if(_lookup_______!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile_______");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup________
		{
			get
			{
				return _lookup________;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup________(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup________ != null)
						{
							_lookup________.UnsetRelatedEntity(this, "CustomerProfile________");
						}
					}
					else
					{
						if(_lookup________!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile________");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup____
		{
			get
			{
				return _lookup____;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup____(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup____ != null)
						{
							_lookup____.UnsetRelatedEntity(this, "CustomerProfile____");
						}
					}
					else
					{
						if(_lookup____!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile____");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup_
		{
			get
			{
				return _lookup_;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup_(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup_ != null)
						{
							_lookup_.UnsetRelatedEntity(this, "CustomerProfile_");
						}
					}
					else
					{
						if(_lookup_!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile_");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup
		{
			get
			{
				return _lookup;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup != null)
						{
							_lookup.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_lookup!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup___
		{
			get
			{
				return _lookup___;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup___(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup___ != null)
						{
							_lookup___.UnsetRelatedEntity(this, "CustomerProfile___");
						}
					}
					else
					{
						if(_lookup___!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile___");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup__
		{
			get
			{
				return _lookup__;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup__(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup__ != null)
						{
							_lookup__.UnsetRelatedEntity(this, "CustomerProfile__");
						}
					}
					else
					{
						if(_lookup__!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile__");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'NotesDetailsEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual NotesDetailsEntity NotesDetails
		{
			get
			{
				return _notesDetails;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncNotesDetails(value);
				}
				else
				{
					if(value==null)
					{
						if(_notesDetails != null)
						{
							_notesDetails.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_notesDetails!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'RoleEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual RoleEntity Role
		{
			get
			{
				return _role;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncRole(value);
				}
				else
				{
					if(value==null)
					{
						if(_role != null)
						{
							_role.UnsetRelatedEntity(this, "CustomerProfile");
						}
					}
					else
					{
						if(_role!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "CustomerProfile");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'CustomerCallAttemptsEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual CustomerCallAttemptsEntity CustomerCallAttempts
		{
			get
			{
				return _customerCallAttempts;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncCustomerCallAttempts(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "CustomerProfile");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_customerCallAttempts !=null);
						DesetupSyncCustomerCallAttempts(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("CustomerCallAttempts");
						}
					}
					else
					{
						if(_customerCallAttempts!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "CustomerProfile");
							SetupSyncCustomerCallAttempts(relatedEntity);
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'CustomerLockForCallEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual CustomerLockForCallEntity CustomerLockForCall
		{
			get
			{
				return _customerLockForCall;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncCustomerLockForCall(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "CustomerProfile");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_customerLockForCall !=null);
						DesetupSyncCustomerLockForCall(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("CustomerLockForCall");
						}
					}
					else
					{
						if(_customerLockForCall!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "CustomerProfile");
							SetupSyncCustomerLockForCall(relatedEntity);
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'CustomerResultPostedEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual CustomerResultPostedEntity CustomerResultPosted
		{
			get
			{
				return _customerResultPosted;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncCustomerResultPosted(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "CustomerProfile");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_customerResultPosted !=null);
						DesetupSyncCustomerResultPosted(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("CustomerResultPosted");
						}
					}
					else
					{
						if(_customerResultPosted!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "CustomerProfile");
							SetupSyncCustomerResultPosted(relatedEntity);
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'CustomerTraleEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual CustomerTraleEntity CustomerTrale
		{
			get
			{
				return _customerTrale;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncCustomerTrale(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "CustomerProfile");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_customerTrale !=null);
						DesetupSyncCustomerTrale(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("CustomerTrale");
						}
					}
					else
					{
						if(_customerTrale!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "CustomerProfile");
							SetupSyncCustomerTrale(relatedEntity);
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser
		{
			get
			{
				return _organizationRoleUser;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "CustomerProfile");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_organizationRoleUser !=null);
						DesetupSyncOrganizationRoleUser(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("OrganizationRoleUser");
						}
					}
					else
					{
						if(_organizationRoleUser!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "CustomerProfile");
							SetupSyncOrganizationRoleUser(relatedEntity);
						}
					}
				}
			}
		}
	
		
		/// <summary> Gets the type of the hierarchy this entity is in. </summary>
		protected override InheritanceHierarchyType LLBLGenProIsInHierarchyOfType
		{
			get { return InheritanceHierarchyType.None;}
		}
		
		/// <summary> Gets or sets a value indicating whether this entity is a subtype</summary>
		protected override bool LLBLGenProIsSubType
		{
			get { return false;}
		}
		
		/// <summary>Returns the Falcon.Data.EntityType enum value for this entity.</summary>
		[Browsable(false), XmlIgnore]
		public override int LLBLGenProEntityTypeValue 
		{ 
			get { return (int)Falcon.Data.EntityType.CustomerProfileEntity; }
		}
		#endregion


		#region Custom Entity code
		
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		#endregion

		#region Included code

		#endregion
	}
}
