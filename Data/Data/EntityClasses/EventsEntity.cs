///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: 2.6
// Code is generated on: 27 June 2019 17:22:48
// Code is generated using templates: SD.TemplateBindings.SharedTemplates.NET20
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
#if !CF
using System.Runtime.Serialization;
#endif
using System.Xml.Serialization;
using Falcon.Data;
using Falcon.Data.HelperClasses;
using Falcon.Data.FactoryClasses;
using Falcon.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Falcon.Data.EntityClasses
{
	
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>
	/// Entity class which represents the entity 'Events'.<br/><br/>
	/// 
	/// </summary>
	[Serializable]
	public partial class EventsEntity : CommonEntityBase, ISerializable
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		#region Class Member Declarations
		private EntityCollection<AfmarketingMaterialEntity> _afmarketingMaterial;
		private EntityCollection<CallDetailsEntity> _callDetails;
		private EntityCollection<CallQueueCustomerEntity> _callQueueCustomer;
		private EntityCollection<CustomerClinicalQuestionAnswerEntity> _customerClinicalQuestionAnswer;
		private EntityCollection<CustomerEventTestFindingEntity> _customerEventTestFinding;
		private EntityCollection<CustomerOrderHistoryEntity> _customerOrderHistory;
		private EntityCollection<CustomerRegistrationNotesEntity> _customerRegistrationNotes;
		private EntityCollection<CustomEventNotificationEntity> _customEventNotification;
		private EntityCollection<DependentDisqualifiedTestEntity> _dependentDisqualifiedTest;
		private EntityCollection<DisqualifiedTestEntity> _disqualifiedTest;
		private EntityCollection<EventAccountTestHcpcsCodeEntity> _eventAccountTestHcpcsCode;
		private EntityCollection<EventAffiliateDetailsEntity> _eventAffiliateDetails;
		private EntityCollection<EventAppointmentCancellationLogEntity> _eventAppointmentCancellationLog;
		private EntityCollection<EventAppointmentChangeLogEntity> _eventAppointmentChangeLog_;
		private EntityCollection<EventAppointmentChangeLogEntity> _eventAppointmentChangeLog;
		private EntityCollection<EventCallDetailsEntity> _eventCallDetails;
		private EntityCollection<EventChecklistTemplateEntity> _eventChecklistTemplate;
		private EntityCollection<EventCouponsEntity> _eventCoupons;
		private EntityCollection<EventCustomerQuestionAnswerEntity> _eventCustomerQuestionAnswer;
		private EntityCollection<EventCustomerResultEntity> _eventCustomerResult;
		private EntityCollection<EventCustomersEntity> _eventCustomers;
		private EntityCollection<EventFluConsentTemplateEntity> _eventFluConsentTemplate;
		private EntityCollection<EventHospitalFacilityEntity> _eventHospitalFacility;
		private EntityCollection<EventHospitalPartnerEntity> _eventHospitalPartner;
		private EntityCollection<EventHostPromotionsEntity> _eventHostPromotions;
		private EntityCollection<EventMarketingOffersEntity> _eventMarketingOffers;
		private EntityCollection<EventMeetingDetailsEntity> _eventMeetingDetails;
		private EntityCollection<EventNotesLogEntity> _eventNotesLog;
		private EntityCollection<EventNotificationEntity> _eventNotification;
		private EntityCollection<EventPackageDetailsEntity> _eventPackageDetails;
		private EntityCollection<EventPhysicianTestEntity> _eventPhysicianTest;
		private EntityCollection<EventPodEntity> _eventPod;
		private EntityCollection<EventProductExclusionEntity> _eventProductExclusion;
		private EntityCollection<EventProductTypeEntity> _eventProductType;
		private EntityCollection<EventPublicationEntity> _eventPublication;
		private EntityCollection<EventScheduleTemplateEntity> _eventScheduleTemplate;
		private EntityCollection<EventSchedulingSlotEntity> _eventSchedulingSlot;
		private EntityCollection<EventStaffAssignmentEntity> _eventStaffAssignment;
		private EntityCollection<EventSurveyTemplateEntity> _eventSurveyTemplate;
		private EntityCollection<EventTaskDetailsEntity> _eventTaskDetails;
		private EntityCollection<EventTestEntity> _eventTest;
		private EntityCollection<EventZipEntity> _eventZip;
		private EntityCollection<HealthPlanFillEventCallQueueEntity> _healthPlanFillEventCallQueue;
		private EntityCollection<HospitalPartnerCustomerEntity> _hospitalPartnerCustomer;
		private EntityCollection<HospitalPartnerEventNotesEntity> _hospitalPartnerEventNotes;
		private EntityCollection<HostEventDetailsEntity> _hostEventDetails;
		private EntityCollection<HostPaymentEntity> _hostPayment;
		private EntityCollection<MarketingPrintOrderEventMappingEntity> _marketingPrintOrderEventMapping;
		private EntityCollection<PhysicianEventAssignmentEntity> _physicianEventAssignment;
		private EntityCollection<PhysicianInvoiceItemEntity> _physicianInvoiceItem;
		private EntityCollection<PreQualificationResultEntity> _preQualificationResult;
		private EntityCollection<ResultArchiveUploadEntity> _resultArchiveUpload;
		private EntityCollection<SeminarsEntity> _seminars;
		private EntityCollection<AccountEntity> _accountCollectionViaCallQueueCustomer;
		private EntityCollection<AccountEntity> _accountCollectionViaCustomEventNotification;
		private EntityCollection<ActivityTypeEntity> _activityTypeCollectionViaCallQueueCustomer;
		private EntityCollection<AddressEntity> _addressCollectionViaHostPayment;
		private EntityCollection<AfaffiliateCampaignEntity> _afaffiliateCampaignCollectionViaEventCustomers;
		private EntityCollection<AffiliateProfileEntity> _affiliateProfileCollectionViaEventAffiliateDetails;
		private EntityCollection<AfmarketingMaterialTypeEntity> _afmarketingMaterialTypeCollectionViaAfmarketingMaterial;
		private EntityCollection<CallQueueEntity> _callQueueCollectionViaCallQueueCustomer;
		private EntityCollection<CallQueueCriteriaEntity> _callQueueCriteriaCollectionViaCallQueueCustomer;
		private EntityCollection<CallsEntity> _callsCollectionViaPreQualificationResult;
		private EntityCollection<CampaignEntity> _campaignCollectionViaCallQueueCustomer;
		private EntityCollection<CampaignEntity> _campaignCollectionViaEventCustomers;
		private EntityCollection<CheckListTemplateEntity> _checkListTemplateCollectionViaEventChecklistTemplate;
		private EntityCollection<ContactCallEntity> _contactCallCollectionViaEventCallDetails;
		private EntityCollection<ContactMeetingEntity> _contactMeetingCollectionViaEventMeetingDetails;
		private EntityCollection<CorporateUploadEntity> _corporateUploadCollectionViaCustomerOrderHistory;
		private EntityCollection<CouponsEntity> _couponsCollectionViaEventCoupons;
		private EntityCollection<CustomerHealthQuestionsEntity> _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaHospitalPartnerCustomer;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaEventCustomerResult;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaDependentDisqualifiedTest;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaPhysicianInvoiceItem;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaEventCustomers;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaDisqualifiedTest;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaCustomerEventTestFinding;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaCustomerOrderHistory;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaPreQualificationResult;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<CustomerProfileEntity> _customerProfileCollectionViaCallQueueCustomer;
		private EntityCollection<CustomerProfileHistoryEntity> _customerProfileHistoryCollectionViaEventCustomers;
		private EntityCollection<CustomerRegistrationNotesEntity> _customerRegistrationNotesCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<CustomerRegistrationNotesEntity> _customerRegistrationNotesCollectionViaEventCustomers;
		private EntityCollection<EventAppointmentEntity> _eventAppointmentCollectionViaEventCustomers;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCallQueueCustomer;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaDisqualifiedTest;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaEventAppointmentChangeLog_;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaCustomerOrderHistory;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaDependentDisqualifiedTest;
		private EntityCollection<EventCustomersEntity> _eventCustomersCollectionViaEventAppointmentChangeLog;
		private EntityCollection<EventNoteEntity> _eventNoteCollectionViaEventNotesLog;
		private EntityCollection<EventPackageDetailsEntity> _eventPackageDetailsCollectionViaCustomerOrderHistory;
		private EntityCollection<EventPodRoomEntity> _eventPodRoomCollectionViaEventSchedulingSlot;
		private EntityCollection<EventTestEntity> _eventTestCollectionViaCustomerOrderHistory;
		private EntityCollection<FileEntity> _fileCollectionViaResultArchiveUpload;
		private EntityCollection<FluConsentTemplateEntity> _fluConsentTemplateCollectionViaEventFluConsentTemplate;
		private EntityCollection<GcNotGivenReasonEntity> _gcNotGivenReasonCollectionViaEventCustomers;
		private EntityCollection<HafTemplateEntity> _hafTemplateCollectionViaEventPackageDetails;
		private EntityCollection<HafTemplateEntity> _hafTemplateCollectionViaEventTest;
		private EntityCollection<HafTemplateEntity> _hafTemplateCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<HealthPlanCallQueueCriteriaEntity> _healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue;
		private EntityCollection<HospitalFacilityEntity> _hospitalFacilityCollectionViaEventHospitalFacility;
		private EntityCollection<HospitalFacilityEntity> _hospitalFacilityCollectionViaEventCustomers;
		private EntityCollection<HospitalPartnerEntity> _hospitalPartnerCollectionViaEventHospitalPartner;
		private EntityCollection<LanguageEntity> _languageCollectionViaCallQueueCustomer;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventSchedulingSlot;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventPackageDetails;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventTest;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomers;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomerResult;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventCustomers_;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventTest__;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventTest_;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_____;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomEventNotification;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerRegistrationNotes;
		private EntityCollection<LookupEntity> _lookupCollectionViaHostPayment_;
		private EntityCollection<LookupEntity> _lookupCollectionViaCustomerOrderHistory;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult__;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult___;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult____;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventAppointmentChangeLog_;
		private EntityCollection<LookupEntity> _lookupCollectionViaHostPayment;
		private EntityCollection<LookupEntity> _lookupCollectionViaCallQueueCustomer;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventAppointmentChangeLog;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult_______;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult______;
		private EntityCollection<LookupEntity> _lookupCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<LookupEntity> _lookupCollectionViaPreQualificationResult________;
		private EntityCollection<MarketingOffersEntity> _marketingOffersCollectionViaEventMarketingOffers;
		private EntityCollection<MarketingPrintOrderEntity> _marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping;
		private EntityCollection<NotesDetailsEntity> _notesDetailsCollectionViaCallQueueCustomer;
		private EntityCollection<NotificationEntity> _notificationCollectionViaEventNotification;
		private EntityCollection<OrganizationEntity> _organizationCollectionViaEventAccountTestHcpcsCode;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaSeminars;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventStaffAssignment_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHospitalPartnerCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventStaffAssignment__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventPhysicianTest__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventPhysicianTest_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaHostPayment;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventPhysicianTest;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventStaffAssignment;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventAppointmentChangeLog;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventAccountTestHcpcsCode;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventAccountTestHcpcsCode_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventAppointmentChangeLog_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaDisqualifiedTest_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCallQueueCustomer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomEventNotification;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaDisqualifiedTest;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaCustomerRegistrationNotes;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_____;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult________;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult___;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult__;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult______;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult____;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomers;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomers_;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_______;
		private EntityCollection<OrganizationRoleUserEntity> _organizationRoleUserCollectionViaEventCustomerResult_;
		private EntityCollection<PackageEntity> _packageCollectionViaEventPackageDetails;
		private EntityCollection<PhysicianEvaluationEntity> _physicianEvaluationCollectionViaPhysicianInvoiceItem;
		private EntityCollection<PhysicianInvoiceEntity> _physicianInvoiceCollectionViaPhysicianInvoiceItem;
		private EntityCollection<PhysicianProfileEntity> _physicianProfileCollectionViaPhysicianEventAssignment;
		private EntityCollection<PhysicianProfileEntity> _physicianProfileCollectionViaPhysicianEventAssignment_;
		private EntityCollection<PodDetailsEntity> _podDetailsCollectionViaEventStaffAssignment;
		private EntityCollection<PodDetailsEntity> _podDetailsCollectionViaEventPod;
		private EntityCollection<PodRoomEntity> _podRoomCollectionViaEventPackageDetails;
		private EntityCollection<PreQualificationQuestionEntity> _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer;
		private EntityCollection<PreQualificationQuestionEntity> _preQualificationQuestionCollectionViaDisqualifiedTest;
		private EntityCollection<PreQualificationTestTemplateEntity> _preQualificationTestTemplateCollectionViaEventTest;
		private EntityCollection<ProductEntity> _productCollectionViaEventProductExclusion;
		private EntityCollection<ProspectCustomerEntity> _prospectCustomerCollectionViaCallQueueCustomer;
		private EntityCollection<ProspectsEntity> _prospectsCollectionViaHostPayment;
		private EntityCollection<ProspectsEntity> _prospectsCollectionViaHostEventDetails;
		private EntityCollection<RefundRequestEntity> _refundRequestCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<RescheduleCancelDispositionEntity> _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog;
		private EntityCollection<RescheduleCancelDispositionEntity> _rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog;
		private EntityCollection<RescheduleCancelDispositionEntity> _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_;
		private EntityCollection<ScheduleTemplateEntity> _scheduleTemplateCollectionViaEventScheduleTemplate;
		private EntityCollection<StaffEventRoleEntity> _staffEventRoleCollectionViaEventStaffAssignment;
		private EntityCollection<SurveyTemplateEntity> _surveyTemplateCollectionViaEventSurveyTemplate;
		private EntityCollection<TaskDetailsEntity> _taskDetailsCollectionViaEventTaskDetails;
		private EntityCollection<TempCartEntity> _tempCartCollectionViaPreQualificationResult;
		private EntityCollection<TerritoryEntity> _territoryCollectionViaEventPod;
		private EntityCollection<TestEntity> _testCollectionViaEventPhysicianTest;
		private EntityCollection<TestEntity> _testCollectionViaDisqualifiedTest;
		private EntityCollection<TestEntity> _testCollectionViaEventTest;
		private EntityCollection<TestEntity> _testCollectionViaCustomerEventTestFinding;
		private EntityCollection<TestEntity> _testCollectionViaDependentDisqualifiedTest;
		private EntityCollection<TestHcpcsCodeEntity> _testHcpcsCodeCollectionViaEventAccountTestHcpcsCode;
		private EntityCollection<ZipEntity> _zipCollectionViaEventZip;
		private CommunicationModeEntity _communicationMode;
		private EventTypeEntity _eventType;
		private HafTemplateEntity _hafTemplate;
		private LookupEntity _lookup;
		private LookupEntity _lookup____;
		private LookupEntity _lookup___;
		private LookupEntity _lookup__;
		private LookupEntity _lookup_;
		private NotesDetailsEntity _notesDetails;
		private OrganizationRoleUserEntity _organizationRoleUser_;
		private OrganizationRoleUserEntity _organizationRoleUser____;
		private OrganizationRoleUserEntity _organizationRoleUser__;
		private OrganizationRoleUserEntity _organizationRoleUser;
		private OrganizationRoleUserEntity _organizationRoleUser___;
		private ScheduleMethodEntity _scheduleMethod;
		private EventAccountEntity _eventAccount;
		
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		#endregion

		#region Statics
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CommunicationMode</summary>
			public static readonly string CommunicationMode = "CommunicationMode";
			/// <summary>Member name EventType</summary>
			public static readonly string EventType = "EventType";
			/// <summary>Member name HafTemplate</summary>
			public static readonly string HafTemplate = "HafTemplate";
			/// <summary>Member name Lookup</summary>
			public static readonly string Lookup = "Lookup";
			/// <summary>Member name Lookup____</summary>
			public static readonly string Lookup____ = "Lookup____";
			/// <summary>Member name Lookup___</summary>
			public static readonly string Lookup___ = "Lookup___";
			/// <summary>Member name Lookup__</summary>
			public static readonly string Lookup__ = "Lookup__";
			/// <summary>Member name Lookup_</summary>
			public static readonly string Lookup_ = "Lookup_";
			/// <summary>Member name NotesDetails</summary>
			public static readonly string NotesDetails = "NotesDetails";
			/// <summary>Member name OrganizationRoleUser_</summary>
			public static readonly string OrganizationRoleUser_ = "OrganizationRoleUser_";
			/// <summary>Member name OrganizationRoleUser____</summary>
			public static readonly string OrganizationRoleUser____ = "OrganizationRoleUser____";
			/// <summary>Member name OrganizationRoleUser__</summary>
			public static readonly string OrganizationRoleUser__ = "OrganizationRoleUser__";
			/// <summary>Member name OrganizationRoleUser</summary>
			public static readonly string OrganizationRoleUser = "OrganizationRoleUser";
			/// <summary>Member name OrganizationRoleUser___</summary>
			public static readonly string OrganizationRoleUser___ = "OrganizationRoleUser___";
			/// <summary>Member name ScheduleMethod</summary>
			public static readonly string ScheduleMethod = "ScheduleMethod";
			/// <summary>Member name AfmarketingMaterial</summary>
			public static readonly string AfmarketingMaterial = "AfmarketingMaterial";
			/// <summary>Member name CallDetails</summary>
			public static readonly string CallDetails = "CallDetails";
			/// <summary>Member name CallQueueCustomer</summary>
			public static readonly string CallQueueCustomer = "CallQueueCustomer";
			/// <summary>Member name CustomerClinicalQuestionAnswer</summary>
			public static readonly string CustomerClinicalQuestionAnswer = "CustomerClinicalQuestionAnswer";
			/// <summary>Member name CustomerEventTestFinding</summary>
			public static readonly string CustomerEventTestFinding = "CustomerEventTestFinding";
			/// <summary>Member name CustomerOrderHistory</summary>
			public static readonly string CustomerOrderHistory = "CustomerOrderHistory";
			/// <summary>Member name CustomerRegistrationNotes</summary>
			public static readonly string CustomerRegistrationNotes = "CustomerRegistrationNotes";
			/// <summary>Member name CustomEventNotification</summary>
			public static readonly string CustomEventNotification = "CustomEventNotification";
			/// <summary>Member name DependentDisqualifiedTest</summary>
			public static readonly string DependentDisqualifiedTest = "DependentDisqualifiedTest";
			/// <summary>Member name DisqualifiedTest</summary>
			public static readonly string DisqualifiedTest = "DisqualifiedTest";
			/// <summary>Member name EventAccountTestHcpcsCode</summary>
			public static readonly string EventAccountTestHcpcsCode = "EventAccountTestHcpcsCode";
			/// <summary>Member name EventAffiliateDetails</summary>
			public static readonly string EventAffiliateDetails = "EventAffiliateDetails";
			/// <summary>Member name EventAppointmentCancellationLog</summary>
			public static readonly string EventAppointmentCancellationLog = "EventAppointmentCancellationLog";
			/// <summary>Member name EventAppointmentChangeLog_</summary>
			public static readonly string EventAppointmentChangeLog_ = "EventAppointmentChangeLog_";
			/// <summary>Member name EventAppointmentChangeLog</summary>
			public static readonly string EventAppointmentChangeLog = "EventAppointmentChangeLog";
			/// <summary>Member name EventCallDetails</summary>
			public static readonly string EventCallDetails = "EventCallDetails";
			/// <summary>Member name EventChecklistTemplate</summary>
			public static readonly string EventChecklistTemplate = "EventChecklistTemplate";
			/// <summary>Member name EventCoupons</summary>
			public static readonly string EventCoupons = "EventCoupons";
			/// <summary>Member name EventCustomerQuestionAnswer</summary>
			public static readonly string EventCustomerQuestionAnswer = "EventCustomerQuestionAnswer";
			/// <summary>Member name EventCustomerResult</summary>
			public static readonly string EventCustomerResult = "EventCustomerResult";
			/// <summary>Member name EventCustomers</summary>
			public static readonly string EventCustomers = "EventCustomers";
			/// <summary>Member name EventFluConsentTemplate</summary>
			public static readonly string EventFluConsentTemplate = "EventFluConsentTemplate";
			/// <summary>Member name EventHospitalFacility</summary>
			public static readonly string EventHospitalFacility = "EventHospitalFacility";
			/// <summary>Member name EventHospitalPartner</summary>
			public static readonly string EventHospitalPartner = "EventHospitalPartner";
			/// <summary>Member name EventHostPromotions</summary>
			public static readonly string EventHostPromotions = "EventHostPromotions";
			/// <summary>Member name EventMarketingOffers</summary>
			public static readonly string EventMarketingOffers = "EventMarketingOffers";
			/// <summary>Member name EventMeetingDetails</summary>
			public static readonly string EventMeetingDetails = "EventMeetingDetails";
			/// <summary>Member name EventNotesLog</summary>
			public static readonly string EventNotesLog = "EventNotesLog";
			/// <summary>Member name EventNotification</summary>
			public static readonly string EventNotification = "EventNotification";
			/// <summary>Member name EventPackageDetails</summary>
			public static readonly string EventPackageDetails = "EventPackageDetails";
			/// <summary>Member name EventPhysicianTest</summary>
			public static readonly string EventPhysicianTest = "EventPhysicianTest";
			/// <summary>Member name EventPod</summary>
			public static readonly string EventPod = "EventPod";
			/// <summary>Member name EventProductExclusion</summary>
			public static readonly string EventProductExclusion = "EventProductExclusion";
			/// <summary>Member name EventProductType</summary>
			public static readonly string EventProductType = "EventProductType";
			/// <summary>Member name EventPublication</summary>
			public static readonly string EventPublication = "EventPublication";
			/// <summary>Member name EventScheduleTemplate</summary>
			public static readonly string EventScheduleTemplate = "EventScheduleTemplate";
			/// <summary>Member name EventSchedulingSlot</summary>
			public static readonly string EventSchedulingSlot = "EventSchedulingSlot";
			/// <summary>Member name EventStaffAssignment</summary>
			public static readonly string EventStaffAssignment = "EventStaffAssignment";
			/// <summary>Member name EventSurveyTemplate</summary>
			public static readonly string EventSurveyTemplate = "EventSurveyTemplate";
			/// <summary>Member name EventTaskDetails</summary>
			public static readonly string EventTaskDetails = "EventTaskDetails";
			/// <summary>Member name EventTest</summary>
			public static readonly string EventTest = "EventTest";
			/// <summary>Member name EventZip</summary>
			public static readonly string EventZip = "EventZip";
			/// <summary>Member name HealthPlanFillEventCallQueue</summary>
			public static readonly string HealthPlanFillEventCallQueue = "HealthPlanFillEventCallQueue";
			/// <summary>Member name HospitalPartnerCustomer</summary>
			public static readonly string HospitalPartnerCustomer = "HospitalPartnerCustomer";
			/// <summary>Member name HospitalPartnerEventNotes</summary>
			public static readonly string HospitalPartnerEventNotes = "HospitalPartnerEventNotes";
			/// <summary>Member name HostEventDetails</summary>
			public static readonly string HostEventDetails = "HostEventDetails";
			/// <summary>Member name HostPayment</summary>
			public static readonly string HostPayment = "HostPayment";
			/// <summary>Member name MarketingPrintOrderEventMapping</summary>
			public static readonly string MarketingPrintOrderEventMapping = "MarketingPrintOrderEventMapping";
			/// <summary>Member name PhysicianEventAssignment</summary>
			public static readonly string PhysicianEventAssignment = "PhysicianEventAssignment";
			/// <summary>Member name PhysicianInvoiceItem</summary>
			public static readonly string PhysicianInvoiceItem = "PhysicianInvoiceItem";
			/// <summary>Member name PreQualificationResult</summary>
			public static readonly string PreQualificationResult = "PreQualificationResult";
			/// <summary>Member name ResultArchiveUpload</summary>
			public static readonly string ResultArchiveUpload = "ResultArchiveUpload";
			/// <summary>Member name Seminars</summary>
			public static readonly string Seminars = "Seminars";
			/// <summary>Member name AccountCollectionViaCallQueueCustomer</summary>
			public static readonly string AccountCollectionViaCallQueueCustomer = "AccountCollectionViaCallQueueCustomer";
			/// <summary>Member name AccountCollectionViaCustomEventNotification</summary>
			public static readonly string AccountCollectionViaCustomEventNotification = "AccountCollectionViaCustomEventNotification";
			/// <summary>Member name ActivityTypeCollectionViaCallQueueCustomer</summary>
			public static readonly string ActivityTypeCollectionViaCallQueueCustomer = "ActivityTypeCollectionViaCallQueueCustomer";
			/// <summary>Member name AddressCollectionViaHostPayment</summary>
			public static readonly string AddressCollectionViaHostPayment = "AddressCollectionViaHostPayment";
			/// <summary>Member name AfaffiliateCampaignCollectionViaEventCustomers</summary>
			public static readonly string AfaffiliateCampaignCollectionViaEventCustomers = "AfaffiliateCampaignCollectionViaEventCustomers";
			/// <summary>Member name AffiliateProfileCollectionViaEventAffiliateDetails</summary>
			public static readonly string AffiliateProfileCollectionViaEventAffiliateDetails = "AffiliateProfileCollectionViaEventAffiliateDetails";
			/// <summary>Member name AfmarketingMaterialTypeCollectionViaAfmarketingMaterial</summary>
			public static readonly string AfmarketingMaterialTypeCollectionViaAfmarketingMaterial = "AfmarketingMaterialTypeCollectionViaAfmarketingMaterial";
			/// <summary>Member name CallQueueCollectionViaCallQueueCustomer</summary>
			public static readonly string CallQueueCollectionViaCallQueueCustomer = "CallQueueCollectionViaCallQueueCustomer";
			/// <summary>Member name CallQueueCriteriaCollectionViaCallQueueCustomer</summary>
			public static readonly string CallQueueCriteriaCollectionViaCallQueueCustomer = "CallQueueCriteriaCollectionViaCallQueueCustomer";
			/// <summary>Member name CallsCollectionViaPreQualificationResult</summary>
			public static readonly string CallsCollectionViaPreQualificationResult = "CallsCollectionViaPreQualificationResult";
			/// <summary>Member name CampaignCollectionViaCallQueueCustomer</summary>
			public static readonly string CampaignCollectionViaCallQueueCustomer = "CampaignCollectionViaCallQueueCustomer";
			/// <summary>Member name CampaignCollectionViaEventCustomers</summary>
			public static readonly string CampaignCollectionViaEventCustomers = "CampaignCollectionViaEventCustomers";
			/// <summary>Member name CheckListTemplateCollectionViaEventChecklistTemplate</summary>
			public static readonly string CheckListTemplateCollectionViaEventChecklistTemplate = "CheckListTemplateCollectionViaEventChecklistTemplate";
			/// <summary>Member name ContactCallCollectionViaEventCallDetails</summary>
			public static readonly string ContactCallCollectionViaEventCallDetails = "ContactCallCollectionViaEventCallDetails";
			/// <summary>Member name ContactMeetingCollectionViaEventMeetingDetails</summary>
			public static readonly string ContactMeetingCollectionViaEventMeetingDetails = "ContactMeetingCollectionViaEventMeetingDetails";
			/// <summary>Member name CorporateUploadCollectionViaCustomerOrderHistory</summary>
			public static readonly string CorporateUploadCollectionViaCustomerOrderHistory = "CorporateUploadCollectionViaCustomerOrderHistory";
			/// <summary>Member name CouponsCollectionViaEventCoupons</summary>
			public static readonly string CouponsCollectionViaEventCoupons = "CouponsCollectionViaEventCoupons";
			/// <summary>Member name CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name CustomerProfileCollectionViaHospitalPartnerCustomer</summary>
			public static readonly string CustomerProfileCollectionViaHospitalPartnerCustomer = "CustomerProfileCollectionViaHospitalPartnerCustomer";
			/// <summary>Member name CustomerProfileCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string CustomerProfileCollectionViaEventCustomerQuestionAnswer = "CustomerProfileCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name CustomerProfileCollectionViaEventCustomerResult</summary>
			public static readonly string CustomerProfileCollectionViaEventCustomerResult = "CustomerProfileCollectionViaEventCustomerResult";
			/// <summary>Member name CustomerProfileCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string CustomerProfileCollectionViaDependentDisqualifiedTest = "CustomerProfileCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name CustomerProfileCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string CustomerProfileCollectionViaPhysicianInvoiceItem = "CustomerProfileCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name CustomerProfileCollectionViaEventCustomers</summary>
			public static readonly string CustomerProfileCollectionViaEventCustomers = "CustomerProfileCollectionViaEventCustomers";
			/// <summary>Member name CustomerProfileCollectionViaDisqualifiedTest</summary>
			public static readonly string CustomerProfileCollectionViaDisqualifiedTest = "CustomerProfileCollectionViaDisqualifiedTest";
			/// <summary>Member name CustomerProfileCollectionViaCustomerEventTestFinding</summary>
			public static readonly string CustomerProfileCollectionViaCustomerEventTestFinding = "CustomerProfileCollectionViaCustomerEventTestFinding";
			/// <summary>Member name CustomerProfileCollectionViaCustomerOrderHistory</summary>
			public static readonly string CustomerProfileCollectionViaCustomerOrderHistory = "CustomerProfileCollectionViaCustomerOrderHistory";
			/// <summary>Member name CustomerProfileCollectionViaPreQualificationResult</summary>
			public static readonly string CustomerProfileCollectionViaPreQualificationResult = "CustomerProfileCollectionViaPreQualificationResult";
			/// <summary>Member name CustomerProfileCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string CustomerProfileCollectionViaCustomerClinicalQuestionAnswer = "CustomerProfileCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name CustomerProfileCollectionViaCallQueueCustomer</summary>
			public static readonly string CustomerProfileCollectionViaCallQueueCustomer = "CustomerProfileCollectionViaCallQueueCustomer";
			/// <summary>Member name CustomerProfileHistoryCollectionViaEventCustomers</summary>
			public static readonly string CustomerProfileHistoryCollectionViaEventCustomers = "CustomerProfileHistoryCollectionViaEventCustomers";
			/// <summary>Member name CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog = "CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name CustomerRegistrationNotesCollectionViaEventCustomers</summary>
			public static readonly string CustomerRegistrationNotesCollectionViaEventCustomers = "CustomerRegistrationNotesCollectionViaEventCustomers";
			/// <summary>Member name EventAppointmentCollectionViaEventCustomers</summary>
			public static readonly string EventAppointmentCollectionViaEventCustomers = "EventAppointmentCollectionViaEventCustomers";
			/// <summary>Member name EventCustomersCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string EventCustomersCollectionViaEventAppointmentCancellationLog = "EventCustomersCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name EventCustomersCollectionViaCallQueueCustomer</summary>
			public static readonly string EventCustomersCollectionViaCallQueueCustomer = "EventCustomersCollectionViaCallQueueCustomer";
			/// <summary>Member name EventCustomersCollectionViaDisqualifiedTest</summary>
			public static readonly string EventCustomersCollectionViaDisqualifiedTest = "EventCustomersCollectionViaDisqualifiedTest";
			/// <summary>Member name EventCustomersCollectionViaEventAppointmentChangeLog_</summary>
			public static readonly string EventCustomersCollectionViaEventAppointmentChangeLog_ = "EventCustomersCollectionViaEventAppointmentChangeLog_";
			/// <summary>Member name EventCustomersCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string EventCustomersCollectionViaEventCustomerQuestionAnswer = "EventCustomersCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name EventCustomersCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventCustomersCollectionViaCustomerOrderHistory = "EventCustomersCollectionViaCustomerOrderHistory";
			/// <summary>Member name EventCustomersCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string EventCustomersCollectionViaDependentDisqualifiedTest = "EventCustomersCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name EventCustomersCollectionViaEventAppointmentChangeLog</summary>
			public static readonly string EventCustomersCollectionViaEventAppointmentChangeLog = "EventCustomersCollectionViaEventAppointmentChangeLog";
			/// <summary>Member name EventNoteCollectionViaEventNotesLog</summary>
			public static readonly string EventNoteCollectionViaEventNotesLog = "EventNoteCollectionViaEventNotesLog";
			/// <summary>Member name EventPackageDetailsCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventPackageDetailsCollectionViaCustomerOrderHistory = "EventPackageDetailsCollectionViaCustomerOrderHistory";
			/// <summary>Member name EventPodRoomCollectionViaEventSchedulingSlot</summary>
			public static readonly string EventPodRoomCollectionViaEventSchedulingSlot = "EventPodRoomCollectionViaEventSchedulingSlot";
			/// <summary>Member name EventTestCollectionViaCustomerOrderHistory</summary>
			public static readonly string EventTestCollectionViaCustomerOrderHistory = "EventTestCollectionViaCustomerOrderHistory";
			/// <summary>Member name FileCollectionViaResultArchiveUpload</summary>
			public static readonly string FileCollectionViaResultArchiveUpload = "FileCollectionViaResultArchiveUpload";
			/// <summary>Member name FluConsentTemplateCollectionViaEventFluConsentTemplate</summary>
			public static readonly string FluConsentTemplateCollectionViaEventFluConsentTemplate = "FluConsentTemplateCollectionViaEventFluConsentTemplate";
			/// <summary>Member name GcNotGivenReasonCollectionViaEventCustomers</summary>
			public static readonly string GcNotGivenReasonCollectionViaEventCustomers = "GcNotGivenReasonCollectionViaEventCustomers";
			/// <summary>Member name HafTemplateCollectionViaEventPackageDetails</summary>
			public static readonly string HafTemplateCollectionViaEventPackageDetails = "HafTemplateCollectionViaEventPackageDetails";
			/// <summary>Member name HafTemplateCollectionViaEventTest</summary>
			public static readonly string HafTemplateCollectionViaEventTest = "HafTemplateCollectionViaEventTest";
			/// <summary>Member name HafTemplateCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string HafTemplateCollectionViaCustomerClinicalQuestionAnswer = "HafTemplateCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue</summary>
			public static readonly string HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue = "HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue";
			/// <summary>Member name HospitalFacilityCollectionViaEventHospitalFacility</summary>
			public static readonly string HospitalFacilityCollectionViaEventHospitalFacility = "HospitalFacilityCollectionViaEventHospitalFacility";
			/// <summary>Member name HospitalFacilityCollectionViaEventCustomers</summary>
			public static readonly string HospitalFacilityCollectionViaEventCustomers = "HospitalFacilityCollectionViaEventCustomers";
			/// <summary>Member name HospitalPartnerCollectionViaEventHospitalPartner</summary>
			public static readonly string HospitalPartnerCollectionViaEventHospitalPartner = "HospitalPartnerCollectionViaEventHospitalPartner";
			/// <summary>Member name LanguageCollectionViaCallQueueCustomer</summary>
			public static readonly string LanguageCollectionViaCallQueueCustomer = "LanguageCollectionViaCallQueueCustomer";
			/// <summary>Member name LookupCollectionViaEventSchedulingSlot</summary>
			public static readonly string LookupCollectionViaEventSchedulingSlot = "LookupCollectionViaEventSchedulingSlot";
			/// <summary>Member name LookupCollectionViaEventPackageDetails</summary>
			public static readonly string LookupCollectionViaEventPackageDetails = "LookupCollectionViaEventPackageDetails";
			/// <summary>Member name LookupCollectionViaEventTest</summary>
			public static readonly string LookupCollectionViaEventTest = "LookupCollectionViaEventTest";
			/// <summary>Member name LookupCollectionViaEventCustomers</summary>
			public static readonly string LookupCollectionViaEventCustomers = "LookupCollectionViaEventCustomers";
			/// <summary>Member name LookupCollectionViaEventCustomerResult</summary>
			public static readonly string LookupCollectionViaEventCustomerResult = "LookupCollectionViaEventCustomerResult";
			/// <summary>Member name LookupCollectionViaEventCustomers_</summary>
			public static readonly string LookupCollectionViaEventCustomers_ = "LookupCollectionViaEventCustomers_";
			/// <summary>Member name LookupCollectionViaEventTest__</summary>
			public static readonly string LookupCollectionViaEventTest__ = "LookupCollectionViaEventTest__";
			/// <summary>Member name LookupCollectionViaEventTest_</summary>
			public static readonly string LookupCollectionViaEventTest_ = "LookupCollectionViaEventTest_";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_____</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_____ = "LookupCollectionViaPreQualificationResult_____";
			/// <summary>Member name LookupCollectionViaCustomEventNotification</summary>
			public static readonly string LookupCollectionViaCustomEventNotification = "LookupCollectionViaCustomEventNotification";
			/// <summary>Member name LookupCollectionViaCustomerRegistrationNotes</summary>
			public static readonly string LookupCollectionViaCustomerRegistrationNotes = "LookupCollectionViaCustomerRegistrationNotes";
			/// <summary>Member name LookupCollectionViaHostPayment_</summary>
			public static readonly string LookupCollectionViaHostPayment_ = "LookupCollectionViaHostPayment_";
			/// <summary>Member name LookupCollectionViaCustomerOrderHistory</summary>
			public static readonly string LookupCollectionViaCustomerOrderHistory = "LookupCollectionViaCustomerOrderHistory";
			/// <summary>Member name LookupCollectionViaPreQualificationResult__</summary>
			public static readonly string LookupCollectionViaPreQualificationResult__ = "LookupCollectionViaPreQualificationResult__";
			/// <summary>Member name LookupCollectionViaPreQualificationResult___</summary>
			public static readonly string LookupCollectionViaPreQualificationResult___ = "LookupCollectionViaPreQualificationResult___";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_ = "LookupCollectionViaPreQualificationResult_";
			/// <summary>Member name LookupCollectionViaPreQualificationResult____</summary>
			public static readonly string LookupCollectionViaPreQualificationResult____ = "LookupCollectionViaPreQualificationResult____";
			/// <summary>Member name LookupCollectionViaPreQualificationResult</summary>
			public static readonly string LookupCollectionViaPreQualificationResult = "LookupCollectionViaPreQualificationResult";
			/// <summary>Member name LookupCollectionViaEventAppointmentChangeLog_</summary>
			public static readonly string LookupCollectionViaEventAppointmentChangeLog_ = "LookupCollectionViaEventAppointmentChangeLog_";
			/// <summary>Member name LookupCollectionViaHostPayment</summary>
			public static readonly string LookupCollectionViaHostPayment = "LookupCollectionViaHostPayment";
			/// <summary>Member name LookupCollectionViaCallQueueCustomer</summary>
			public static readonly string LookupCollectionViaCallQueueCustomer = "LookupCollectionViaCallQueueCustomer";
			/// <summary>Member name LookupCollectionViaEventAppointmentChangeLog</summary>
			public static readonly string LookupCollectionViaEventAppointmentChangeLog = "LookupCollectionViaEventAppointmentChangeLog";
			/// <summary>Member name LookupCollectionViaPreQualificationResult_______</summary>
			public static readonly string LookupCollectionViaPreQualificationResult_______ = "LookupCollectionViaPreQualificationResult_______";
			/// <summary>Member name LookupCollectionViaPreQualificationResult______</summary>
			public static readonly string LookupCollectionViaPreQualificationResult______ = "LookupCollectionViaPreQualificationResult______";
			/// <summary>Member name LookupCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string LookupCollectionViaEventAppointmentCancellationLog = "LookupCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name LookupCollectionViaPreQualificationResult________</summary>
			public static readonly string LookupCollectionViaPreQualificationResult________ = "LookupCollectionViaPreQualificationResult________";
			/// <summary>Member name MarketingOffersCollectionViaEventMarketingOffers</summary>
			public static readonly string MarketingOffersCollectionViaEventMarketingOffers = "MarketingOffersCollectionViaEventMarketingOffers";
			/// <summary>Member name MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping</summary>
			public static readonly string MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping = "MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping";
			/// <summary>Member name NotesDetailsCollectionViaCallQueueCustomer</summary>
			public static readonly string NotesDetailsCollectionViaCallQueueCustomer = "NotesDetailsCollectionViaCallQueueCustomer";
			/// <summary>Member name NotificationCollectionViaEventNotification</summary>
			public static readonly string NotificationCollectionViaEventNotification = "NotificationCollectionViaEventNotification";
			/// <summary>Member name OrganizationCollectionViaEventAccountTestHcpcsCode</summary>
			public static readonly string OrganizationCollectionViaEventAccountTestHcpcsCode = "OrganizationCollectionViaEventAccountTestHcpcsCode";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer__</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer__ = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__";
			/// <summary>Member name OrganizationRoleUserCollectionViaSeminars</summary>
			public static readonly string OrganizationRoleUserCollectionViaSeminars = "OrganizationRoleUserCollectionViaSeminars";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer_ = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventStaffAssignment_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventStaffAssignment_ = "OrganizationRoleUserCollectionViaEventStaffAssignment_";
			/// <summary>Member name OrganizationRoleUserCollectionViaHospitalPartnerCustomer</summary>
			public static readonly string OrganizationRoleUserCollectionViaHospitalPartnerCustomer = "OrganizationRoleUserCollectionViaHospitalPartnerCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventStaffAssignment__</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventStaffAssignment__ = "OrganizationRoleUserCollectionViaEventStaffAssignment__";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventPhysicianTest__</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventPhysicianTest__ = "OrganizationRoleUserCollectionViaEventPhysicianTest__";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventPhysicianTest_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventPhysicianTest_ = "OrganizationRoleUserCollectionViaEventPhysicianTest_";
			/// <summary>Member name OrganizationRoleUserCollectionViaHostPayment</summary>
			public static readonly string OrganizationRoleUserCollectionViaHostPayment = "OrganizationRoleUserCollectionViaHostPayment";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventPhysicianTest</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventPhysicianTest = "OrganizationRoleUserCollectionViaEventPhysicianTest";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventStaffAssignment</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventStaffAssignment = "OrganizationRoleUserCollectionViaEventStaffAssignment";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventAppointmentCancellationLog = "OrganizationRoleUserCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventAppointmentChangeLog</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventAppointmentChangeLog = "OrganizationRoleUserCollectionViaEventAppointmentChangeLog";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode = "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_ = "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult = "OrganizationRoleUserCollectionViaEventCustomerResult";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventAppointmentChangeLog_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventAppointmentChangeLog_ = "OrganizationRoleUserCollectionViaEventAppointmentChangeLog_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer = "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name OrganizationRoleUserCollectionViaDisqualifiedTest_</summary>
			public static readonly string OrganizationRoleUserCollectionViaDisqualifiedTest_ = "OrganizationRoleUserCollectionViaDisqualifiedTest_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer__</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer__ = "OrganizationRoleUserCollectionViaCallQueueCustomer__";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer = "OrganizationRoleUserCollectionViaCallQueueCustomer";
			/// <summary>Member name OrganizationRoleUserCollectionViaCallQueueCustomer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCallQueueCustomer_ = "OrganizationRoleUserCollectionViaCallQueueCustomer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomEventNotification</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomEventNotification = "OrganizationRoleUserCollectionViaCustomEventNotification";
			/// <summary>Member name OrganizationRoleUserCollectionViaDisqualifiedTest</summary>
			public static readonly string OrganizationRoleUserCollectionViaDisqualifiedTest = "OrganizationRoleUserCollectionViaDisqualifiedTest";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_";
			/// <summary>Member name OrganizationRoleUserCollectionViaCustomerRegistrationNotes</summary>
			public static readonly string OrganizationRoleUserCollectionViaCustomerRegistrationNotes = "OrganizationRoleUserCollectionViaCustomerRegistrationNotes";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_____</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_____ = "OrganizationRoleUserCollectionViaEventCustomerResult_____";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult________</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult________ = "OrganizationRoleUserCollectionViaEventCustomerResult________";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult___</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult___ = "OrganizationRoleUserCollectionViaEventCustomerResult___";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult__</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult__ = "OrganizationRoleUserCollectionViaEventCustomerResult__";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult______</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult______ = "OrganizationRoleUserCollectionViaEventCustomerResult______";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult____</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult____ = "OrganizationRoleUserCollectionViaEventCustomerResult____";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomers</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomers = "OrganizationRoleUserCollectionViaEventCustomers";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomers_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomers_ = "OrganizationRoleUserCollectionViaEventCustomers_";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_______</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_______ = "OrganizationRoleUserCollectionViaEventCustomerResult_______";
			/// <summary>Member name OrganizationRoleUserCollectionViaEventCustomerResult_</summary>
			public static readonly string OrganizationRoleUserCollectionViaEventCustomerResult_ = "OrganizationRoleUserCollectionViaEventCustomerResult_";
			/// <summary>Member name PackageCollectionViaEventPackageDetails</summary>
			public static readonly string PackageCollectionViaEventPackageDetails = "PackageCollectionViaEventPackageDetails";
			/// <summary>Member name PhysicianEvaluationCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string PhysicianEvaluationCollectionViaPhysicianInvoiceItem = "PhysicianEvaluationCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name PhysicianInvoiceCollectionViaPhysicianInvoiceItem</summary>
			public static readonly string PhysicianInvoiceCollectionViaPhysicianInvoiceItem = "PhysicianInvoiceCollectionViaPhysicianInvoiceItem";
			/// <summary>Member name PhysicianProfileCollectionViaPhysicianEventAssignment</summary>
			public static readonly string PhysicianProfileCollectionViaPhysicianEventAssignment = "PhysicianProfileCollectionViaPhysicianEventAssignment";
			/// <summary>Member name PhysicianProfileCollectionViaPhysicianEventAssignment_</summary>
			public static readonly string PhysicianProfileCollectionViaPhysicianEventAssignment_ = "PhysicianProfileCollectionViaPhysicianEventAssignment_";
			/// <summary>Member name PodDetailsCollectionViaEventStaffAssignment</summary>
			public static readonly string PodDetailsCollectionViaEventStaffAssignment = "PodDetailsCollectionViaEventStaffAssignment";
			/// <summary>Member name PodDetailsCollectionViaEventPod</summary>
			public static readonly string PodDetailsCollectionViaEventPod = "PodDetailsCollectionViaEventPod";
			/// <summary>Member name PodRoomCollectionViaEventPackageDetails</summary>
			public static readonly string PodRoomCollectionViaEventPackageDetails = "PodRoomCollectionViaEventPackageDetails";
			/// <summary>Member name PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer</summary>
			public static readonly string PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer = "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer";
			/// <summary>Member name PreQualificationQuestionCollectionViaDisqualifiedTest</summary>
			public static readonly string PreQualificationQuestionCollectionViaDisqualifiedTest = "PreQualificationQuestionCollectionViaDisqualifiedTest";
			/// <summary>Member name PreQualificationTestTemplateCollectionViaEventTest</summary>
			public static readonly string PreQualificationTestTemplateCollectionViaEventTest = "PreQualificationTestTemplateCollectionViaEventTest";
			/// <summary>Member name ProductCollectionViaEventProductExclusion</summary>
			public static readonly string ProductCollectionViaEventProductExclusion = "ProductCollectionViaEventProductExclusion";
			/// <summary>Member name ProspectCustomerCollectionViaCallQueueCustomer</summary>
			public static readonly string ProspectCustomerCollectionViaCallQueueCustomer = "ProspectCustomerCollectionViaCallQueueCustomer";
			/// <summary>Member name ProspectsCollectionViaHostPayment</summary>
			public static readonly string ProspectsCollectionViaHostPayment = "ProspectsCollectionViaHostPayment";
			/// <summary>Member name ProspectsCollectionViaHostEventDetails</summary>
			public static readonly string ProspectsCollectionViaHostEventDetails = "ProspectsCollectionViaHostEventDetails";
			/// <summary>Member name RefundRequestCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string RefundRequestCollectionViaEventAppointmentCancellationLog = "RefundRequestCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog</summary>
			public static readonly string RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog = "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog";
			/// <summary>Member name RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog</summary>
			public static readonly string RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog = "RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog";
			/// <summary>Member name RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_</summary>
			public static readonly string RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ = "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_";
			/// <summary>Member name ScheduleTemplateCollectionViaEventScheduleTemplate</summary>
			public static readonly string ScheduleTemplateCollectionViaEventScheduleTemplate = "ScheduleTemplateCollectionViaEventScheduleTemplate";
			/// <summary>Member name StaffEventRoleCollectionViaEventStaffAssignment</summary>
			public static readonly string StaffEventRoleCollectionViaEventStaffAssignment = "StaffEventRoleCollectionViaEventStaffAssignment";
			/// <summary>Member name SurveyTemplateCollectionViaEventSurveyTemplate</summary>
			public static readonly string SurveyTemplateCollectionViaEventSurveyTemplate = "SurveyTemplateCollectionViaEventSurveyTemplate";
			/// <summary>Member name TaskDetailsCollectionViaEventTaskDetails</summary>
			public static readonly string TaskDetailsCollectionViaEventTaskDetails = "TaskDetailsCollectionViaEventTaskDetails";
			/// <summary>Member name TempCartCollectionViaPreQualificationResult</summary>
			public static readonly string TempCartCollectionViaPreQualificationResult = "TempCartCollectionViaPreQualificationResult";
			/// <summary>Member name TerritoryCollectionViaEventPod</summary>
			public static readonly string TerritoryCollectionViaEventPod = "TerritoryCollectionViaEventPod";
			/// <summary>Member name TestCollectionViaEventPhysicianTest</summary>
			public static readonly string TestCollectionViaEventPhysicianTest = "TestCollectionViaEventPhysicianTest";
			/// <summary>Member name TestCollectionViaDisqualifiedTest</summary>
			public static readonly string TestCollectionViaDisqualifiedTest = "TestCollectionViaDisqualifiedTest";
			/// <summary>Member name TestCollectionViaEventTest</summary>
			public static readonly string TestCollectionViaEventTest = "TestCollectionViaEventTest";
			/// <summary>Member name TestCollectionViaCustomerEventTestFinding</summary>
			public static readonly string TestCollectionViaCustomerEventTestFinding = "TestCollectionViaCustomerEventTestFinding";
			/// <summary>Member name TestCollectionViaDependentDisqualifiedTest</summary>
			public static readonly string TestCollectionViaDependentDisqualifiedTest = "TestCollectionViaDependentDisqualifiedTest";
			/// <summary>Member name TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode</summary>
			public static readonly string TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode = "TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode";
			/// <summary>Member name ZipCollectionViaEventZip</summary>
			public static readonly string ZipCollectionViaEventZip = "ZipCollectionViaEventZip";
			/// <summary>Member name EventAccount</summary>
			public static readonly string EventAccount = "EventAccount";
		}
		#endregion
		
		/// <summary> Static CTor for setting up custom property hashtables. Is executed before the first instance of this entity class or derived classes is constructed. </summary>
		static EventsEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public EventsEntity():base("EventsEntity")
		{
			InitClassEmpty(null, CreateFields());
		}

		/// <summary> CTor</summary>
		/// <remarks>For framework usage.</remarks>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public EventsEntity(IEntityFields2 fields):base("EventsEntity")
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this EventsEntity</param>
		public EventsEntity(IValidator validator):base("EventsEntity")
		{
			InitClassEmpty(validator, CreateFields());
		}
				

		/// <summary> CTor</summary>
		/// <param name="eventId">PK value for Events which data should be fetched into this Events object</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public EventsEntity(System.Int64 eventId):base("EventsEntity")
		{
			InitClassEmpty(null, CreateFields());
			this.EventId = eventId;
		}

		/// <summary> CTor</summary>
		/// <param name="eventId">PK value for Events which data should be fetched into this Events object</param>
		/// <param name="validator">The custom validator object for this EventsEntity</param>
		/// <remarks>The entity is not fetched by this constructor. Use a DataAccessAdapter for that.</remarks>
		public EventsEntity(System.Int64 eventId, IValidator validator):base("EventsEntity")
		{
			InitClassEmpty(validator, CreateFields());
			this.EventId = eventId;
		}

		/// <summary> Protected CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected EventsEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			if(SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				_afmarketingMaterial = (EntityCollection<AfmarketingMaterialEntity>)info.GetValue("_afmarketingMaterial", typeof(EntityCollection<AfmarketingMaterialEntity>));
				_callDetails = (EntityCollection<CallDetailsEntity>)info.GetValue("_callDetails", typeof(EntityCollection<CallDetailsEntity>));
				_callQueueCustomer = (EntityCollection<CallQueueCustomerEntity>)info.GetValue("_callQueueCustomer", typeof(EntityCollection<CallQueueCustomerEntity>));
				_customerClinicalQuestionAnswer = (EntityCollection<CustomerClinicalQuestionAnswerEntity>)info.GetValue("_customerClinicalQuestionAnswer", typeof(EntityCollection<CustomerClinicalQuestionAnswerEntity>));
				_customerEventTestFinding = (EntityCollection<CustomerEventTestFindingEntity>)info.GetValue("_customerEventTestFinding", typeof(EntityCollection<CustomerEventTestFindingEntity>));
				_customerOrderHistory = (EntityCollection<CustomerOrderHistoryEntity>)info.GetValue("_customerOrderHistory", typeof(EntityCollection<CustomerOrderHistoryEntity>));
				_customerRegistrationNotes = (EntityCollection<CustomerRegistrationNotesEntity>)info.GetValue("_customerRegistrationNotes", typeof(EntityCollection<CustomerRegistrationNotesEntity>));
				_customEventNotification = (EntityCollection<CustomEventNotificationEntity>)info.GetValue("_customEventNotification", typeof(EntityCollection<CustomEventNotificationEntity>));
				_dependentDisqualifiedTest = (EntityCollection<DependentDisqualifiedTestEntity>)info.GetValue("_dependentDisqualifiedTest", typeof(EntityCollection<DependentDisqualifiedTestEntity>));
				_disqualifiedTest = (EntityCollection<DisqualifiedTestEntity>)info.GetValue("_disqualifiedTest", typeof(EntityCollection<DisqualifiedTestEntity>));
				_eventAccountTestHcpcsCode = (EntityCollection<EventAccountTestHcpcsCodeEntity>)info.GetValue("_eventAccountTestHcpcsCode", typeof(EntityCollection<EventAccountTestHcpcsCodeEntity>));
				_eventAffiliateDetails = (EntityCollection<EventAffiliateDetailsEntity>)info.GetValue("_eventAffiliateDetails", typeof(EntityCollection<EventAffiliateDetailsEntity>));
				_eventAppointmentCancellationLog = (EntityCollection<EventAppointmentCancellationLogEntity>)info.GetValue("_eventAppointmentCancellationLog", typeof(EntityCollection<EventAppointmentCancellationLogEntity>));
				_eventAppointmentChangeLog_ = (EntityCollection<EventAppointmentChangeLogEntity>)info.GetValue("_eventAppointmentChangeLog_", typeof(EntityCollection<EventAppointmentChangeLogEntity>));
				_eventAppointmentChangeLog = (EntityCollection<EventAppointmentChangeLogEntity>)info.GetValue("_eventAppointmentChangeLog", typeof(EntityCollection<EventAppointmentChangeLogEntity>));
				_eventCallDetails = (EntityCollection<EventCallDetailsEntity>)info.GetValue("_eventCallDetails", typeof(EntityCollection<EventCallDetailsEntity>));
				_eventChecklistTemplate = (EntityCollection<EventChecklistTemplateEntity>)info.GetValue("_eventChecklistTemplate", typeof(EntityCollection<EventChecklistTemplateEntity>));
				_eventCoupons = (EntityCollection<EventCouponsEntity>)info.GetValue("_eventCoupons", typeof(EntityCollection<EventCouponsEntity>));
				_eventCustomerQuestionAnswer = (EntityCollection<EventCustomerQuestionAnswerEntity>)info.GetValue("_eventCustomerQuestionAnswer", typeof(EntityCollection<EventCustomerQuestionAnswerEntity>));
				_eventCustomerResult = (EntityCollection<EventCustomerResultEntity>)info.GetValue("_eventCustomerResult", typeof(EntityCollection<EventCustomerResultEntity>));
				_eventCustomers = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomers", typeof(EntityCollection<EventCustomersEntity>));
				_eventFluConsentTemplate = (EntityCollection<EventFluConsentTemplateEntity>)info.GetValue("_eventFluConsentTemplate", typeof(EntityCollection<EventFluConsentTemplateEntity>));
				_eventHospitalFacility = (EntityCollection<EventHospitalFacilityEntity>)info.GetValue("_eventHospitalFacility", typeof(EntityCollection<EventHospitalFacilityEntity>));
				_eventHospitalPartner = (EntityCollection<EventHospitalPartnerEntity>)info.GetValue("_eventHospitalPartner", typeof(EntityCollection<EventHospitalPartnerEntity>));
				_eventHostPromotions = (EntityCollection<EventHostPromotionsEntity>)info.GetValue("_eventHostPromotions", typeof(EntityCollection<EventHostPromotionsEntity>));
				_eventMarketingOffers = (EntityCollection<EventMarketingOffersEntity>)info.GetValue("_eventMarketingOffers", typeof(EntityCollection<EventMarketingOffersEntity>));
				_eventMeetingDetails = (EntityCollection<EventMeetingDetailsEntity>)info.GetValue("_eventMeetingDetails", typeof(EntityCollection<EventMeetingDetailsEntity>));
				_eventNotesLog = (EntityCollection<EventNotesLogEntity>)info.GetValue("_eventNotesLog", typeof(EntityCollection<EventNotesLogEntity>));
				_eventNotification = (EntityCollection<EventNotificationEntity>)info.GetValue("_eventNotification", typeof(EntityCollection<EventNotificationEntity>));
				_eventPackageDetails = (EntityCollection<EventPackageDetailsEntity>)info.GetValue("_eventPackageDetails", typeof(EntityCollection<EventPackageDetailsEntity>));
				_eventPhysicianTest = (EntityCollection<EventPhysicianTestEntity>)info.GetValue("_eventPhysicianTest", typeof(EntityCollection<EventPhysicianTestEntity>));
				_eventPod = (EntityCollection<EventPodEntity>)info.GetValue("_eventPod", typeof(EntityCollection<EventPodEntity>));
				_eventProductExclusion = (EntityCollection<EventProductExclusionEntity>)info.GetValue("_eventProductExclusion", typeof(EntityCollection<EventProductExclusionEntity>));
				_eventProductType = (EntityCollection<EventProductTypeEntity>)info.GetValue("_eventProductType", typeof(EntityCollection<EventProductTypeEntity>));
				_eventPublication = (EntityCollection<EventPublicationEntity>)info.GetValue("_eventPublication", typeof(EntityCollection<EventPublicationEntity>));
				_eventScheduleTemplate = (EntityCollection<EventScheduleTemplateEntity>)info.GetValue("_eventScheduleTemplate", typeof(EntityCollection<EventScheduleTemplateEntity>));
				_eventSchedulingSlot = (EntityCollection<EventSchedulingSlotEntity>)info.GetValue("_eventSchedulingSlot", typeof(EntityCollection<EventSchedulingSlotEntity>));
				_eventStaffAssignment = (EntityCollection<EventStaffAssignmentEntity>)info.GetValue("_eventStaffAssignment", typeof(EntityCollection<EventStaffAssignmentEntity>));
				_eventSurveyTemplate = (EntityCollection<EventSurveyTemplateEntity>)info.GetValue("_eventSurveyTemplate", typeof(EntityCollection<EventSurveyTemplateEntity>));
				_eventTaskDetails = (EntityCollection<EventTaskDetailsEntity>)info.GetValue("_eventTaskDetails", typeof(EntityCollection<EventTaskDetailsEntity>));
				_eventTest = (EntityCollection<EventTestEntity>)info.GetValue("_eventTest", typeof(EntityCollection<EventTestEntity>));
				_eventZip = (EntityCollection<EventZipEntity>)info.GetValue("_eventZip", typeof(EntityCollection<EventZipEntity>));
				_healthPlanFillEventCallQueue = (EntityCollection<HealthPlanFillEventCallQueueEntity>)info.GetValue("_healthPlanFillEventCallQueue", typeof(EntityCollection<HealthPlanFillEventCallQueueEntity>));
				_hospitalPartnerCustomer = (EntityCollection<HospitalPartnerCustomerEntity>)info.GetValue("_hospitalPartnerCustomer", typeof(EntityCollection<HospitalPartnerCustomerEntity>));
				_hospitalPartnerEventNotes = (EntityCollection<HospitalPartnerEventNotesEntity>)info.GetValue("_hospitalPartnerEventNotes", typeof(EntityCollection<HospitalPartnerEventNotesEntity>));
				_hostEventDetails = (EntityCollection<HostEventDetailsEntity>)info.GetValue("_hostEventDetails", typeof(EntityCollection<HostEventDetailsEntity>));
				_hostPayment = (EntityCollection<HostPaymentEntity>)info.GetValue("_hostPayment", typeof(EntityCollection<HostPaymentEntity>));
				_marketingPrintOrderEventMapping = (EntityCollection<MarketingPrintOrderEventMappingEntity>)info.GetValue("_marketingPrintOrderEventMapping", typeof(EntityCollection<MarketingPrintOrderEventMappingEntity>));
				_physicianEventAssignment = (EntityCollection<PhysicianEventAssignmentEntity>)info.GetValue("_physicianEventAssignment", typeof(EntityCollection<PhysicianEventAssignmentEntity>));
				_physicianInvoiceItem = (EntityCollection<PhysicianInvoiceItemEntity>)info.GetValue("_physicianInvoiceItem", typeof(EntityCollection<PhysicianInvoiceItemEntity>));
				_preQualificationResult = (EntityCollection<PreQualificationResultEntity>)info.GetValue("_preQualificationResult", typeof(EntityCollection<PreQualificationResultEntity>));
				_resultArchiveUpload = (EntityCollection<ResultArchiveUploadEntity>)info.GetValue("_resultArchiveUpload", typeof(EntityCollection<ResultArchiveUploadEntity>));
				_seminars = (EntityCollection<SeminarsEntity>)info.GetValue("_seminars", typeof(EntityCollection<SeminarsEntity>));
				_accountCollectionViaCallQueueCustomer = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaCallQueueCustomer", typeof(EntityCollection<AccountEntity>));
				_accountCollectionViaCustomEventNotification = (EntityCollection<AccountEntity>)info.GetValue("_accountCollectionViaCustomEventNotification", typeof(EntityCollection<AccountEntity>));
				_activityTypeCollectionViaCallQueueCustomer = (EntityCollection<ActivityTypeEntity>)info.GetValue("_activityTypeCollectionViaCallQueueCustomer", typeof(EntityCollection<ActivityTypeEntity>));
				_addressCollectionViaHostPayment = (EntityCollection<AddressEntity>)info.GetValue("_addressCollectionViaHostPayment", typeof(EntityCollection<AddressEntity>));
				_afaffiliateCampaignCollectionViaEventCustomers = (EntityCollection<AfaffiliateCampaignEntity>)info.GetValue("_afaffiliateCampaignCollectionViaEventCustomers", typeof(EntityCollection<AfaffiliateCampaignEntity>));
				_affiliateProfileCollectionViaEventAffiliateDetails = (EntityCollection<AffiliateProfileEntity>)info.GetValue("_affiliateProfileCollectionViaEventAffiliateDetails", typeof(EntityCollection<AffiliateProfileEntity>));
				_afmarketingMaterialTypeCollectionViaAfmarketingMaterial = (EntityCollection<AfmarketingMaterialTypeEntity>)info.GetValue("_afmarketingMaterialTypeCollectionViaAfmarketingMaterial", typeof(EntityCollection<AfmarketingMaterialTypeEntity>));
				_callQueueCollectionViaCallQueueCustomer = (EntityCollection<CallQueueEntity>)info.GetValue("_callQueueCollectionViaCallQueueCustomer", typeof(EntityCollection<CallQueueEntity>));
				_callQueueCriteriaCollectionViaCallQueueCustomer = (EntityCollection<CallQueueCriteriaEntity>)info.GetValue("_callQueueCriteriaCollectionViaCallQueueCustomer", typeof(EntityCollection<CallQueueCriteriaEntity>));
				_callsCollectionViaPreQualificationResult = (EntityCollection<CallsEntity>)info.GetValue("_callsCollectionViaPreQualificationResult", typeof(EntityCollection<CallsEntity>));
				_campaignCollectionViaCallQueueCustomer = (EntityCollection<CampaignEntity>)info.GetValue("_campaignCollectionViaCallQueueCustomer", typeof(EntityCollection<CampaignEntity>));
				_campaignCollectionViaEventCustomers = (EntityCollection<CampaignEntity>)info.GetValue("_campaignCollectionViaEventCustomers", typeof(EntityCollection<CampaignEntity>));
				_checkListTemplateCollectionViaEventChecklistTemplate = (EntityCollection<CheckListTemplateEntity>)info.GetValue("_checkListTemplateCollectionViaEventChecklistTemplate", typeof(EntityCollection<CheckListTemplateEntity>));
				_contactCallCollectionViaEventCallDetails = (EntityCollection<ContactCallEntity>)info.GetValue("_contactCallCollectionViaEventCallDetails", typeof(EntityCollection<ContactCallEntity>));
				_contactMeetingCollectionViaEventMeetingDetails = (EntityCollection<ContactMeetingEntity>)info.GetValue("_contactMeetingCollectionViaEventMeetingDetails", typeof(EntityCollection<ContactMeetingEntity>));
				_corporateUploadCollectionViaCustomerOrderHistory = (EntityCollection<CorporateUploadEntity>)info.GetValue("_corporateUploadCollectionViaCustomerOrderHistory", typeof(EntityCollection<CorporateUploadEntity>));
				_couponsCollectionViaEventCoupons = (EntityCollection<CouponsEntity>)info.GetValue("_couponsCollectionViaEventCoupons", typeof(EntityCollection<CouponsEntity>));
				_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerHealthQuestionsEntity>)info.GetValue("_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<CustomerHealthQuestionsEntity>));
				_customerProfileCollectionViaHospitalPartnerCustomer = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaHospitalPartnerCustomer", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaEventCustomerQuestionAnswer = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaEventCustomerResult = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaEventCustomerResult", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaDependentDisqualifiedTest = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaPhysicianInvoiceItem = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaEventCustomers = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaEventCustomers", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaDisqualifiedTest = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaDisqualifiedTest", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaCustomerEventTestFinding = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaCustomerEventTestFinding", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaCustomerOrderHistory = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaCustomerOrderHistory", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaPreQualificationResult = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaPreQualificationResult", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileCollectionViaCallQueueCustomer = (EntityCollection<CustomerProfileEntity>)info.GetValue("_customerProfileCollectionViaCallQueueCustomer", typeof(EntityCollection<CustomerProfileEntity>));
				_customerProfileHistoryCollectionViaEventCustomers = (EntityCollection<CustomerProfileHistoryEntity>)info.GetValue("_customerProfileHistoryCollectionViaEventCustomers", typeof(EntityCollection<CustomerProfileHistoryEntity>));
				_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog = (EntityCollection<CustomerRegistrationNotesEntity>)info.GetValue("_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<CustomerRegistrationNotesEntity>));
				_customerRegistrationNotesCollectionViaEventCustomers = (EntityCollection<CustomerRegistrationNotesEntity>)info.GetValue("_customerRegistrationNotesCollectionViaEventCustomers", typeof(EntityCollection<CustomerRegistrationNotesEntity>));
				_eventAppointmentCollectionViaEventCustomers = (EntityCollection<EventAppointmentEntity>)info.GetValue("_eventAppointmentCollectionViaEventCustomers", typeof(EntityCollection<EventAppointmentEntity>));
				_eventCustomersCollectionViaEventAppointmentCancellationLog = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaCallQueueCustomer = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCallQueueCustomer", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaDisqualifiedTest = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaDisqualifiedTest", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaEventAppointmentChangeLog_ = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaEventAppointmentChangeLog_", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaCustomerOrderHistory = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaDependentDisqualifiedTest = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<EventCustomersEntity>));
				_eventCustomersCollectionViaEventAppointmentChangeLog = (EntityCollection<EventCustomersEntity>)info.GetValue("_eventCustomersCollectionViaEventAppointmentChangeLog", typeof(EntityCollection<EventCustomersEntity>));
				_eventNoteCollectionViaEventNotesLog = (EntityCollection<EventNoteEntity>)info.GetValue("_eventNoteCollectionViaEventNotesLog", typeof(EntityCollection<EventNoteEntity>));
				_eventPackageDetailsCollectionViaCustomerOrderHistory = (EntityCollection<EventPackageDetailsEntity>)info.GetValue("_eventPackageDetailsCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventPackageDetailsEntity>));
				_eventPodRoomCollectionViaEventSchedulingSlot = (EntityCollection<EventPodRoomEntity>)info.GetValue("_eventPodRoomCollectionViaEventSchedulingSlot", typeof(EntityCollection<EventPodRoomEntity>));
				_eventTestCollectionViaCustomerOrderHistory = (EntityCollection<EventTestEntity>)info.GetValue("_eventTestCollectionViaCustomerOrderHistory", typeof(EntityCollection<EventTestEntity>));
				_fileCollectionViaResultArchiveUpload = (EntityCollection<FileEntity>)info.GetValue("_fileCollectionViaResultArchiveUpload", typeof(EntityCollection<FileEntity>));
				_fluConsentTemplateCollectionViaEventFluConsentTemplate = (EntityCollection<FluConsentTemplateEntity>)info.GetValue("_fluConsentTemplateCollectionViaEventFluConsentTemplate", typeof(EntityCollection<FluConsentTemplateEntity>));
				_gcNotGivenReasonCollectionViaEventCustomers = (EntityCollection<GcNotGivenReasonEntity>)info.GetValue("_gcNotGivenReasonCollectionViaEventCustomers", typeof(EntityCollection<GcNotGivenReasonEntity>));
				_hafTemplateCollectionViaEventPackageDetails = (EntityCollection<HafTemplateEntity>)info.GetValue("_hafTemplateCollectionViaEventPackageDetails", typeof(EntityCollection<HafTemplateEntity>));
				_hafTemplateCollectionViaEventTest = (EntityCollection<HafTemplateEntity>)info.GetValue("_hafTemplateCollectionViaEventTest", typeof(EntityCollection<HafTemplateEntity>));
				_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<HafTemplateEntity>)info.GetValue("_hafTemplateCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<HafTemplateEntity>));
				_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue = (EntityCollection<HealthPlanCallQueueCriteriaEntity>)info.GetValue("_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue", typeof(EntityCollection<HealthPlanCallQueueCriteriaEntity>));
				_hospitalFacilityCollectionViaEventHospitalFacility = (EntityCollection<HospitalFacilityEntity>)info.GetValue("_hospitalFacilityCollectionViaEventHospitalFacility", typeof(EntityCollection<HospitalFacilityEntity>));
				_hospitalFacilityCollectionViaEventCustomers = (EntityCollection<HospitalFacilityEntity>)info.GetValue("_hospitalFacilityCollectionViaEventCustomers", typeof(EntityCollection<HospitalFacilityEntity>));
				_hospitalPartnerCollectionViaEventHospitalPartner = (EntityCollection<HospitalPartnerEntity>)info.GetValue("_hospitalPartnerCollectionViaEventHospitalPartner", typeof(EntityCollection<HospitalPartnerEntity>));
				_languageCollectionViaCallQueueCustomer = (EntityCollection<LanguageEntity>)info.GetValue("_languageCollectionViaCallQueueCustomer", typeof(EntityCollection<LanguageEntity>));
				_lookupCollectionViaEventSchedulingSlot = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventSchedulingSlot", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventPackageDetails = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventPackageDetails", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventTest = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventTest", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomers = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomers", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomerResult = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomerResult", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventCustomers_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventCustomers_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventTest__ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventTest__", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventTest_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventTest_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_____ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_____", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomEventNotification = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomEventNotification", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerRegistrationNotes = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerRegistrationNotes", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaHostPayment_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaHostPayment_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCustomerOrderHistory = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCustomerOrderHistory", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult__ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult__", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult___ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult___", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult____ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult____", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventAppointmentChangeLog_ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventAppointmentChangeLog_", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaHostPayment = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaHostPayment", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaCallQueueCustomer = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaCallQueueCustomer", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventAppointmentChangeLog = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventAppointmentChangeLog", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult_______ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult_______", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult______ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult______", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaEventAppointmentCancellationLog = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<LookupEntity>));
				_lookupCollectionViaPreQualificationResult________ = (EntityCollection<LookupEntity>)info.GetValue("_lookupCollectionViaPreQualificationResult________", typeof(EntityCollection<LookupEntity>));
				_marketingOffersCollectionViaEventMarketingOffers = (EntityCollection<MarketingOffersEntity>)info.GetValue("_marketingOffersCollectionViaEventMarketingOffers", typeof(EntityCollection<MarketingOffersEntity>));
				_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping = (EntityCollection<MarketingPrintOrderEntity>)info.GetValue("_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping", typeof(EntityCollection<MarketingPrintOrderEntity>));
				_notesDetailsCollectionViaCallQueueCustomer = (EntityCollection<NotesDetailsEntity>)info.GetValue("_notesDetailsCollectionViaCallQueueCustomer", typeof(EntityCollection<NotesDetailsEntity>));
				_notificationCollectionViaEventNotification = (EntityCollection<NotificationEntity>)info.GetValue("_notificationCollectionViaEventNotification", typeof(EntityCollection<NotificationEntity>));
				_organizationCollectionViaEventAccountTestHcpcsCode = (EntityCollection<OrganizationEntity>)info.GetValue("_organizationCollectionViaEventAccountTestHcpcsCode", typeof(EntityCollection<OrganizationEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaSeminars = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaSeminars", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventStaffAssignment_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventStaffAssignment_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHospitalPartnerCustomer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventStaffAssignment__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventStaffAssignment__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventPhysicianTest__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventPhysicianTest__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventPhysicianTest_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventPhysicianTest_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaHostPayment = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaHostPayment", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventPhysicianTest = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventPhysicianTest", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventStaffAssignment = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventStaffAssignment", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventAppointmentCancellationLog = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventAppointmentChangeLog = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventAppointmentChangeLog", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventAccountTestHcpcsCode = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventAccountTestHcpcsCode", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventAppointmentChangeLog_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventAppointmentChangeLog_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaDisqualifiedTest_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaDisqualifiedTest_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCallQueueCustomer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCallQueueCustomer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomEventNotification = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomEventNotification", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaDisqualifiedTest = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaDisqualifiedTest", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaCustomerRegistrationNotes = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaCustomerRegistrationNotes", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_____ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_____", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult________ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult________", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult___ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult___", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult__ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult__", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult______ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult______", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult____ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult____", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomers = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomers", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomers_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomers_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_______ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_______", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_organizationRoleUserCollectionViaEventCustomerResult_ = (EntityCollection<OrganizationRoleUserEntity>)info.GetValue("_organizationRoleUserCollectionViaEventCustomerResult_", typeof(EntityCollection<OrganizationRoleUserEntity>));
				_packageCollectionViaEventPackageDetails = (EntityCollection<PackageEntity>)info.GetValue("_packageCollectionViaEventPackageDetails", typeof(EntityCollection<PackageEntity>));
				_physicianEvaluationCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianEvaluationEntity>)info.GetValue("_physicianEvaluationCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<PhysicianEvaluationEntity>));
				_physicianInvoiceCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianInvoiceEntity>)info.GetValue("_physicianInvoiceCollectionViaPhysicianInvoiceItem", typeof(EntityCollection<PhysicianInvoiceEntity>));
				_physicianProfileCollectionViaPhysicianEventAssignment = (EntityCollection<PhysicianProfileEntity>)info.GetValue("_physicianProfileCollectionViaPhysicianEventAssignment", typeof(EntityCollection<PhysicianProfileEntity>));
				_physicianProfileCollectionViaPhysicianEventAssignment_ = (EntityCollection<PhysicianProfileEntity>)info.GetValue("_physicianProfileCollectionViaPhysicianEventAssignment_", typeof(EntityCollection<PhysicianProfileEntity>));
				_podDetailsCollectionViaEventStaffAssignment = (EntityCollection<PodDetailsEntity>)info.GetValue("_podDetailsCollectionViaEventStaffAssignment", typeof(EntityCollection<PodDetailsEntity>));
				_podDetailsCollectionViaEventPod = (EntityCollection<PodDetailsEntity>)info.GetValue("_podDetailsCollectionViaEventPod", typeof(EntityCollection<PodDetailsEntity>));
				_podRoomCollectionViaEventPackageDetails = (EntityCollection<PodRoomEntity>)info.GetValue("_podRoomCollectionViaEventPackageDetails", typeof(EntityCollection<PodRoomEntity>));
				_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = (EntityCollection<PreQualificationQuestionEntity>)info.GetValue("_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer", typeof(EntityCollection<PreQualificationQuestionEntity>));
				_preQualificationQuestionCollectionViaDisqualifiedTest = (EntityCollection<PreQualificationQuestionEntity>)info.GetValue("_preQualificationQuestionCollectionViaDisqualifiedTest", typeof(EntityCollection<PreQualificationQuestionEntity>));
				_preQualificationTestTemplateCollectionViaEventTest = (EntityCollection<PreQualificationTestTemplateEntity>)info.GetValue("_preQualificationTestTemplateCollectionViaEventTest", typeof(EntityCollection<PreQualificationTestTemplateEntity>));
				_productCollectionViaEventProductExclusion = (EntityCollection<ProductEntity>)info.GetValue("_productCollectionViaEventProductExclusion", typeof(EntityCollection<ProductEntity>));
				_prospectCustomerCollectionViaCallQueueCustomer = (EntityCollection<ProspectCustomerEntity>)info.GetValue("_prospectCustomerCollectionViaCallQueueCustomer", typeof(EntityCollection<ProspectCustomerEntity>));
				_prospectsCollectionViaHostPayment = (EntityCollection<ProspectsEntity>)info.GetValue("_prospectsCollectionViaHostPayment", typeof(EntityCollection<ProspectsEntity>));
				_prospectsCollectionViaHostEventDetails = (EntityCollection<ProspectsEntity>)info.GetValue("_prospectsCollectionViaHostEventDetails", typeof(EntityCollection<ProspectsEntity>));
				_refundRequestCollectionViaEventAppointmentCancellationLog = (EntityCollection<RefundRequestEntity>)info.GetValue("_refundRequestCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<RefundRequestEntity>));
				_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog = (EntityCollection<RescheduleCancelDispositionEntity>)info.GetValue("_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog", typeof(EntityCollection<RescheduleCancelDispositionEntity>));
				_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog = (EntityCollection<RescheduleCancelDispositionEntity>)info.GetValue("_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog", typeof(EntityCollection<RescheduleCancelDispositionEntity>));
				_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ = (EntityCollection<RescheduleCancelDispositionEntity>)info.GetValue("_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_", typeof(EntityCollection<RescheduleCancelDispositionEntity>));
				_scheduleTemplateCollectionViaEventScheduleTemplate = (EntityCollection<ScheduleTemplateEntity>)info.GetValue("_scheduleTemplateCollectionViaEventScheduleTemplate", typeof(EntityCollection<ScheduleTemplateEntity>));
				_staffEventRoleCollectionViaEventStaffAssignment = (EntityCollection<StaffEventRoleEntity>)info.GetValue("_staffEventRoleCollectionViaEventStaffAssignment", typeof(EntityCollection<StaffEventRoleEntity>));
				_surveyTemplateCollectionViaEventSurveyTemplate = (EntityCollection<SurveyTemplateEntity>)info.GetValue("_surveyTemplateCollectionViaEventSurveyTemplate", typeof(EntityCollection<SurveyTemplateEntity>));
				_taskDetailsCollectionViaEventTaskDetails = (EntityCollection<TaskDetailsEntity>)info.GetValue("_taskDetailsCollectionViaEventTaskDetails", typeof(EntityCollection<TaskDetailsEntity>));
				_tempCartCollectionViaPreQualificationResult = (EntityCollection<TempCartEntity>)info.GetValue("_tempCartCollectionViaPreQualificationResult", typeof(EntityCollection<TempCartEntity>));
				_territoryCollectionViaEventPod = (EntityCollection<TerritoryEntity>)info.GetValue("_territoryCollectionViaEventPod", typeof(EntityCollection<TerritoryEntity>));
				_testCollectionViaEventPhysicianTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaEventPhysicianTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaDisqualifiedTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaDisqualifiedTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaEventTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaEventTest", typeof(EntityCollection<TestEntity>));
				_testCollectionViaCustomerEventTestFinding = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaCustomerEventTestFinding", typeof(EntityCollection<TestEntity>));
				_testCollectionViaDependentDisqualifiedTest = (EntityCollection<TestEntity>)info.GetValue("_testCollectionViaDependentDisqualifiedTest", typeof(EntityCollection<TestEntity>));
				_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode = (EntityCollection<TestHcpcsCodeEntity>)info.GetValue("_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode", typeof(EntityCollection<TestHcpcsCodeEntity>));
				_zipCollectionViaEventZip = (EntityCollection<ZipEntity>)info.GetValue("_zipCollectionViaEventZip", typeof(EntityCollection<ZipEntity>));
				_communicationMode = (CommunicationModeEntity)info.GetValue("_communicationMode", typeof(CommunicationModeEntity));
				if(_communicationMode!=null)
				{
					_communicationMode.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_eventType = (EventTypeEntity)info.GetValue("_eventType", typeof(EventTypeEntity));
				if(_eventType!=null)
				{
					_eventType.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_hafTemplate = (HafTemplateEntity)info.GetValue("_hafTemplate", typeof(HafTemplateEntity));
				if(_hafTemplate!=null)
				{
					_hafTemplate.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup = (LookupEntity)info.GetValue("_lookup", typeof(LookupEntity));
				if(_lookup!=null)
				{
					_lookup.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup____ = (LookupEntity)info.GetValue("_lookup____", typeof(LookupEntity));
				if(_lookup____!=null)
				{
					_lookup____.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup___ = (LookupEntity)info.GetValue("_lookup___", typeof(LookupEntity));
				if(_lookup___!=null)
				{
					_lookup___.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup__ = (LookupEntity)info.GetValue("_lookup__", typeof(LookupEntity));
				if(_lookup__!=null)
				{
					_lookup__.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_lookup_ = (LookupEntity)info.GetValue("_lookup_", typeof(LookupEntity));
				if(_lookup_!=null)
				{
					_lookup_.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_notesDetails = (NotesDetailsEntity)info.GetValue("_notesDetails", typeof(NotesDetailsEntity));
				if(_notesDetails!=null)
				{
					_notesDetails.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser_ = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser_", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser_!=null)
				{
					_organizationRoleUser_.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser____ = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser____", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser____!=null)
				{
					_organizationRoleUser____.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser__ = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser__", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser__!=null)
				{
					_organizationRoleUser__.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser!=null)
				{
					_organizationRoleUser.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_organizationRoleUser___ = (OrganizationRoleUserEntity)info.GetValue("_organizationRoleUser___", typeof(OrganizationRoleUserEntity));
				if(_organizationRoleUser___!=null)
				{
					_organizationRoleUser___.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_scheduleMethod = (ScheduleMethodEntity)info.GetValue("_scheduleMethod", typeof(ScheduleMethodEntity));
				if(_scheduleMethod!=null)
				{
					_scheduleMethod.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				_eventAccount = (EventAccountEntity)info.GetValue("_eventAccount", typeof(EventAccountEntity));
				if(_eventAccount!=null)
				{
					_eventAccount.AfterSave+=new EventHandler(OnEntityAfterSave);
				}
				base.FixupDeserialization(FieldInfoProviderSingleton.GetInstance());
			}
			
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		
		/// <summary>Performs the desync setup when an FK field has been changed. The entity referenced based on the FK field will be dereferenced and sync info will be removed.</summary>
		/// <param name="fieldIndex">The fieldindex.</param>
		protected override void PerformDesyncSetupFKFieldChange(int fieldIndex)
		{
			switch((EventsFieldIndex)fieldIndex)
			{
				case EventsFieldIndex.EventTypeId:
					DesetupSyncEventType(true, false);
					break;
				case EventsFieldIndex.ScheduleMethodId:
					DesetupSyncScheduleMethod(true, false);
					break;
				case EventsFieldIndex.CommunicationModeId:
					DesetupSyncCommunicationMode(true, false);
					break;
				case EventsFieldIndex.CreatedByOrgRoleUserId:
					DesetupSyncOrganizationRoleUser_(true, false);
					break;
				case EventsFieldIndex.AssignedToOrgRoleUserId:
					DesetupSyncOrganizationRoleUser(true, false);
					break;
				case EventsFieldIndex.EventActivityOrgRoleUserId:
					DesetupSyncOrganizationRoleUser__(true, false);
					break;
				case EventsFieldIndex.SignOffOrgRoleUserId:
					DesetupSyncOrganizationRoleUser___(true, false);
					break;
				case EventsFieldIndex.EmrNotesId:
					DesetupSyncNotesDetails(true, false);
					break;
				case EventsFieldIndex.HafTemplateId:
					DesetupSyncHafTemplate(true, false);
					break;
				case EventsFieldIndex.GenerateKynXml:
					DesetupSyncLookup(true, false);
					break;
				case EventsFieldIndex.EventCancellationReasonId:
					DesetupSyncLookup_(true, false);
					break;
				case EventsFieldIndex.GenerateHkynXml:
					DesetupSyncLookup__(true, false);
					break;
				case EventsFieldIndex.GenerateMyBioCheckAssessment:
					DesetupSyncLookup___(true, false);
					break;
				case EventsFieldIndex.UpdatedByAdmin:
					DesetupSyncOrganizationRoleUser____(true, false);
					break;
				case EventsFieldIndex.GenerateHealthAssesmentFormStatus:
					DesetupSyncLookup____(true, false);
					break;
				default:
					base.PerformDesyncSetupFKFieldChange(fieldIndex);
					break;
			}
		}
				
		/// <summary>Gets the inheritance info provider instance of the project this entity instance is located in. </summary>
		/// <returns>ready to use inheritance info provider instance.</returns>
		protected override IInheritanceInfoProvider GetInheritanceInfoProvider()
		{
			return InheritanceInfoProviderSingleton.GetInstance();
		}
		
		/// <summary> Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.</summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <param name="entity">Entity to set as an related entity</param>
		/// <remarks>Used by prefetch path logic.</remarks>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void SetRelatedEntityProperty(string propertyName, IEntity2 entity)
		{
			switch(propertyName)
			{
				case "CommunicationMode":
					this.CommunicationMode = (CommunicationModeEntity)entity;
					break;
				case "EventType":
					this.EventType = (EventTypeEntity)entity;
					break;
				case "HafTemplate":
					this.HafTemplate = (HafTemplateEntity)entity;
					break;
				case "Lookup":
					this.Lookup = (LookupEntity)entity;
					break;
				case "Lookup____":
					this.Lookup____ = (LookupEntity)entity;
					break;
				case "Lookup___":
					this.Lookup___ = (LookupEntity)entity;
					break;
				case "Lookup__":
					this.Lookup__ = (LookupEntity)entity;
					break;
				case "Lookup_":
					this.Lookup_ = (LookupEntity)entity;
					break;
				case "NotesDetails":
					this.NotesDetails = (NotesDetailsEntity)entity;
					break;
				case "OrganizationRoleUser_":
					this.OrganizationRoleUser_ = (OrganizationRoleUserEntity)entity;
					break;
				case "OrganizationRoleUser____":
					this.OrganizationRoleUser____ = (OrganizationRoleUserEntity)entity;
					break;
				case "OrganizationRoleUser__":
					this.OrganizationRoleUser__ = (OrganizationRoleUserEntity)entity;
					break;
				case "OrganizationRoleUser":
					this.OrganizationRoleUser = (OrganizationRoleUserEntity)entity;
					break;
				case "OrganizationRoleUser___":
					this.OrganizationRoleUser___ = (OrganizationRoleUserEntity)entity;
					break;
				case "ScheduleMethod":
					this.ScheduleMethod = (ScheduleMethodEntity)entity;
					break;
				case "AfmarketingMaterial":
					this.AfmarketingMaterial.Add((AfmarketingMaterialEntity)entity);
					break;
				case "CallDetails":
					this.CallDetails.Add((CallDetailsEntity)entity);
					break;
				case "CallQueueCustomer":
					this.CallQueueCustomer.Add((CallQueueCustomerEntity)entity);
					break;
				case "CustomerClinicalQuestionAnswer":
					this.CustomerClinicalQuestionAnswer.Add((CustomerClinicalQuestionAnswerEntity)entity);
					break;
				case "CustomerEventTestFinding":
					this.CustomerEventTestFinding.Add((CustomerEventTestFindingEntity)entity);
					break;
				case "CustomerOrderHistory":
					this.CustomerOrderHistory.Add((CustomerOrderHistoryEntity)entity);
					break;
				case "CustomerRegistrationNotes":
					this.CustomerRegistrationNotes.Add((CustomerRegistrationNotesEntity)entity);
					break;
				case "CustomEventNotification":
					this.CustomEventNotification.Add((CustomEventNotificationEntity)entity);
					break;
				case "DependentDisqualifiedTest":
					this.DependentDisqualifiedTest.Add((DependentDisqualifiedTestEntity)entity);
					break;
				case "DisqualifiedTest":
					this.DisqualifiedTest.Add((DisqualifiedTestEntity)entity);
					break;
				case "EventAccountTestHcpcsCode":
					this.EventAccountTestHcpcsCode.Add((EventAccountTestHcpcsCodeEntity)entity);
					break;
				case "EventAffiliateDetails":
					this.EventAffiliateDetails.Add((EventAffiliateDetailsEntity)entity);
					break;
				case "EventAppointmentCancellationLog":
					this.EventAppointmentCancellationLog.Add((EventAppointmentCancellationLogEntity)entity);
					break;
				case "EventAppointmentChangeLog_":
					this.EventAppointmentChangeLog_.Add((EventAppointmentChangeLogEntity)entity);
					break;
				case "EventAppointmentChangeLog":
					this.EventAppointmentChangeLog.Add((EventAppointmentChangeLogEntity)entity);
					break;
				case "EventCallDetails":
					this.EventCallDetails.Add((EventCallDetailsEntity)entity);
					break;
				case "EventChecklistTemplate":
					this.EventChecklistTemplate.Add((EventChecklistTemplateEntity)entity);
					break;
				case "EventCoupons":
					this.EventCoupons.Add((EventCouponsEntity)entity);
					break;
				case "EventCustomerQuestionAnswer":
					this.EventCustomerQuestionAnswer.Add((EventCustomerQuestionAnswerEntity)entity);
					break;
				case "EventCustomerResult":
					this.EventCustomerResult.Add((EventCustomerResultEntity)entity);
					break;
				case "EventCustomers":
					this.EventCustomers.Add((EventCustomersEntity)entity);
					break;
				case "EventFluConsentTemplate":
					this.EventFluConsentTemplate.Add((EventFluConsentTemplateEntity)entity);
					break;
				case "EventHospitalFacility":
					this.EventHospitalFacility.Add((EventHospitalFacilityEntity)entity);
					break;
				case "EventHospitalPartner":
					this.EventHospitalPartner.Add((EventHospitalPartnerEntity)entity);
					break;
				case "EventHostPromotions":
					this.EventHostPromotions.Add((EventHostPromotionsEntity)entity);
					break;
				case "EventMarketingOffers":
					this.EventMarketingOffers.Add((EventMarketingOffersEntity)entity);
					break;
				case "EventMeetingDetails":
					this.EventMeetingDetails.Add((EventMeetingDetailsEntity)entity);
					break;
				case "EventNotesLog":
					this.EventNotesLog.Add((EventNotesLogEntity)entity);
					break;
				case "EventNotification":
					this.EventNotification.Add((EventNotificationEntity)entity);
					break;
				case "EventPackageDetails":
					this.EventPackageDetails.Add((EventPackageDetailsEntity)entity);
					break;
				case "EventPhysicianTest":
					this.EventPhysicianTest.Add((EventPhysicianTestEntity)entity);
					break;
				case "EventPod":
					this.EventPod.Add((EventPodEntity)entity);
					break;
				case "EventProductExclusion":
					this.EventProductExclusion.Add((EventProductExclusionEntity)entity);
					break;
				case "EventProductType":
					this.EventProductType.Add((EventProductTypeEntity)entity);
					break;
				case "EventPublication":
					this.EventPublication.Add((EventPublicationEntity)entity);
					break;
				case "EventScheduleTemplate":
					this.EventScheduleTemplate.Add((EventScheduleTemplateEntity)entity);
					break;
				case "EventSchedulingSlot":
					this.EventSchedulingSlot.Add((EventSchedulingSlotEntity)entity);
					break;
				case "EventStaffAssignment":
					this.EventStaffAssignment.Add((EventStaffAssignmentEntity)entity);
					break;
				case "EventSurveyTemplate":
					this.EventSurveyTemplate.Add((EventSurveyTemplateEntity)entity);
					break;
				case "EventTaskDetails":
					this.EventTaskDetails.Add((EventTaskDetailsEntity)entity);
					break;
				case "EventTest":
					this.EventTest.Add((EventTestEntity)entity);
					break;
				case "EventZip":
					this.EventZip.Add((EventZipEntity)entity);
					break;
				case "HealthPlanFillEventCallQueue":
					this.HealthPlanFillEventCallQueue.Add((HealthPlanFillEventCallQueueEntity)entity);
					break;
				case "HospitalPartnerCustomer":
					this.HospitalPartnerCustomer.Add((HospitalPartnerCustomerEntity)entity);
					break;
				case "HospitalPartnerEventNotes":
					this.HospitalPartnerEventNotes.Add((HospitalPartnerEventNotesEntity)entity);
					break;
				case "HostEventDetails":
					this.HostEventDetails.Add((HostEventDetailsEntity)entity);
					break;
				case "HostPayment":
					this.HostPayment.Add((HostPaymentEntity)entity);
					break;
				case "MarketingPrintOrderEventMapping":
					this.MarketingPrintOrderEventMapping.Add((MarketingPrintOrderEventMappingEntity)entity);
					break;
				case "PhysicianEventAssignment":
					this.PhysicianEventAssignment.Add((PhysicianEventAssignmentEntity)entity);
					break;
				case "PhysicianInvoiceItem":
					this.PhysicianInvoiceItem.Add((PhysicianInvoiceItemEntity)entity);
					break;
				case "PreQualificationResult":
					this.PreQualificationResult.Add((PreQualificationResultEntity)entity);
					break;
				case "ResultArchiveUpload":
					this.ResultArchiveUpload.Add((ResultArchiveUploadEntity)entity);
					break;
				case "Seminars":
					this.Seminars.Add((SeminarsEntity)entity);
					break;
				case "AccountCollectionViaCallQueueCustomer":
					this.AccountCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.AccountCollectionViaCallQueueCustomer.Add((AccountEntity)entity);
					this.AccountCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "AccountCollectionViaCustomEventNotification":
					this.AccountCollectionViaCustomEventNotification.IsReadOnly = false;
					this.AccountCollectionViaCustomEventNotification.Add((AccountEntity)entity);
					this.AccountCollectionViaCustomEventNotification.IsReadOnly = true;
					break;
				case "ActivityTypeCollectionViaCallQueueCustomer":
					this.ActivityTypeCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.ActivityTypeCollectionViaCallQueueCustomer.Add((ActivityTypeEntity)entity);
					this.ActivityTypeCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "AddressCollectionViaHostPayment":
					this.AddressCollectionViaHostPayment.IsReadOnly = false;
					this.AddressCollectionViaHostPayment.Add((AddressEntity)entity);
					this.AddressCollectionViaHostPayment.IsReadOnly = true;
					break;
				case "AfaffiliateCampaignCollectionViaEventCustomers":
					this.AfaffiliateCampaignCollectionViaEventCustomers.IsReadOnly = false;
					this.AfaffiliateCampaignCollectionViaEventCustomers.Add((AfaffiliateCampaignEntity)entity);
					this.AfaffiliateCampaignCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "AffiliateProfileCollectionViaEventAffiliateDetails":
					this.AffiliateProfileCollectionViaEventAffiliateDetails.IsReadOnly = false;
					this.AffiliateProfileCollectionViaEventAffiliateDetails.Add((AffiliateProfileEntity)entity);
					this.AffiliateProfileCollectionViaEventAffiliateDetails.IsReadOnly = true;
					break;
				case "AfmarketingMaterialTypeCollectionViaAfmarketingMaterial":
					this.AfmarketingMaterialTypeCollectionViaAfmarketingMaterial.IsReadOnly = false;
					this.AfmarketingMaterialTypeCollectionViaAfmarketingMaterial.Add((AfmarketingMaterialTypeEntity)entity);
					this.AfmarketingMaterialTypeCollectionViaAfmarketingMaterial.IsReadOnly = true;
					break;
				case "CallQueueCollectionViaCallQueueCustomer":
					this.CallQueueCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CallQueueCollectionViaCallQueueCustomer.Add((CallQueueEntity)entity);
					this.CallQueueCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CallQueueCriteriaCollectionViaCallQueueCustomer":
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.Add((CallQueueCriteriaEntity)entity);
					this.CallQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CallsCollectionViaPreQualificationResult":
					this.CallsCollectionViaPreQualificationResult.IsReadOnly = false;
					this.CallsCollectionViaPreQualificationResult.Add((CallsEntity)entity);
					this.CallsCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "CampaignCollectionViaCallQueueCustomer":
					this.CampaignCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CampaignCollectionViaCallQueueCustomer.Add((CampaignEntity)entity);
					this.CampaignCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CampaignCollectionViaEventCustomers":
					this.CampaignCollectionViaEventCustomers.IsReadOnly = false;
					this.CampaignCollectionViaEventCustomers.Add((CampaignEntity)entity);
					this.CampaignCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CheckListTemplateCollectionViaEventChecklistTemplate":
					this.CheckListTemplateCollectionViaEventChecklistTemplate.IsReadOnly = false;
					this.CheckListTemplateCollectionViaEventChecklistTemplate.Add((CheckListTemplateEntity)entity);
					this.CheckListTemplateCollectionViaEventChecklistTemplate.IsReadOnly = true;
					break;
				case "ContactCallCollectionViaEventCallDetails":
					this.ContactCallCollectionViaEventCallDetails.IsReadOnly = false;
					this.ContactCallCollectionViaEventCallDetails.Add((ContactCallEntity)entity);
					this.ContactCallCollectionViaEventCallDetails.IsReadOnly = true;
					break;
				case "ContactMeetingCollectionViaEventMeetingDetails":
					this.ContactMeetingCollectionViaEventMeetingDetails.IsReadOnly = false;
					this.ContactMeetingCollectionViaEventMeetingDetails.Add((ContactMeetingEntity)entity);
					this.ContactMeetingCollectionViaEventMeetingDetails.IsReadOnly = true;
					break;
				case "CorporateUploadCollectionViaCustomerOrderHistory":
					this.CorporateUploadCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.CorporateUploadCollectionViaCustomerOrderHistory.Add((CorporateUploadEntity)entity);
					this.CorporateUploadCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "CouponsCollectionViaEventCoupons":
					this.CouponsCollectionViaEventCoupons.IsReadOnly = false;
					this.CouponsCollectionViaEventCoupons.Add((CouponsEntity)entity);
					this.CouponsCollectionViaEventCoupons.IsReadOnly = true;
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer":
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.Add((CustomerHealthQuestionsEntity)entity);
					this.CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaHospitalPartnerCustomer":
					this.CustomerProfileCollectionViaHospitalPartnerCustomer.IsReadOnly = false;
					this.CustomerProfileCollectionViaHospitalPartnerCustomer.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaHospitalPartnerCustomer.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaEventCustomerQuestionAnswer":
					this.CustomerProfileCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.CustomerProfileCollectionViaEventCustomerQuestionAnswer.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaEventCustomerResult":
					this.CustomerProfileCollectionViaEventCustomerResult.IsReadOnly = false;
					this.CustomerProfileCollectionViaEventCustomerResult.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaDependentDisqualifiedTest":
					this.CustomerProfileCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.CustomerProfileCollectionViaDependentDisqualifiedTest.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaPhysicianInvoiceItem":
					this.CustomerProfileCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.CustomerProfileCollectionViaPhysicianInvoiceItem.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaEventCustomers":
					this.CustomerProfileCollectionViaEventCustomers.IsReadOnly = false;
					this.CustomerProfileCollectionViaEventCustomers.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaDisqualifiedTest":
					this.CustomerProfileCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.CustomerProfileCollectionViaDisqualifiedTest.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaCustomerEventTestFinding":
					this.CustomerProfileCollectionViaCustomerEventTestFinding.IsReadOnly = false;
					this.CustomerProfileCollectionViaCustomerEventTestFinding.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaCustomerEventTestFinding.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaCustomerOrderHistory":
					this.CustomerProfileCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.CustomerProfileCollectionViaCustomerOrderHistory.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaPreQualificationResult":
					this.CustomerProfileCollectionViaPreQualificationResult.IsReadOnly = false;
					this.CustomerProfileCollectionViaPreQualificationResult.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaCustomerClinicalQuestionAnswer":
					this.CustomerProfileCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.CustomerProfileCollectionViaCustomerClinicalQuestionAnswer.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "CustomerProfileCollectionViaCallQueueCustomer":
					this.CustomerProfileCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.CustomerProfileCollectionViaCallQueueCustomer.Add((CustomerProfileEntity)entity);
					this.CustomerProfileCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "CustomerProfileHistoryCollectionViaEventCustomers":
					this.CustomerProfileHistoryCollectionViaEventCustomers.IsReadOnly = false;
					this.CustomerProfileHistoryCollectionViaEventCustomers.Add((CustomerProfileHistoryEntity)entity);
					this.CustomerProfileHistoryCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog":
					this.CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog.Add((CustomerRegistrationNotesEntity)entity);
					this.CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "CustomerRegistrationNotesCollectionViaEventCustomers":
					this.CustomerRegistrationNotesCollectionViaEventCustomers.IsReadOnly = false;
					this.CustomerRegistrationNotesCollectionViaEventCustomers.Add((CustomerRegistrationNotesEntity)entity);
					this.CustomerRegistrationNotesCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "EventAppointmentCollectionViaEventCustomers":
					this.EventAppointmentCollectionViaEventCustomers.IsReadOnly = false;
					this.EventAppointmentCollectionViaEventCustomers.Add((EventAppointmentEntity)entity);
					this.EventAppointmentCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaEventAppointmentCancellationLog":
					this.EventCustomersCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.EventCustomersCollectionViaEventAppointmentCancellationLog.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCallQueueCustomer":
					this.EventCustomersCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.EventCustomersCollectionViaCallQueueCustomer.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaDisqualifiedTest":
					this.EventCustomersCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.EventCustomersCollectionViaDisqualifiedTest.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaEventAppointmentChangeLog_":
					this.EventCustomersCollectionViaEventAppointmentChangeLog_.IsReadOnly = false;
					this.EventCustomersCollectionViaEventAppointmentChangeLog_.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaEventAppointmentChangeLog_.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaEventCustomerQuestionAnswer":
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaCustomerOrderHistory":
					this.EventCustomersCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventCustomersCollectionViaCustomerOrderHistory.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaDependentDisqualifiedTest":
					this.EventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.EventCustomersCollectionViaDependentDisqualifiedTest.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "EventCustomersCollectionViaEventAppointmentChangeLog":
					this.EventCustomersCollectionViaEventAppointmentChangeLog.IsReadOnly = false;
					this.EventCustomersCollectionViaEventAppointmentChangeLog.Add((EventCustomersEntity)entity);
					this.EventCustomersCollectionViaEventAppointmentChangeLog.IsReadOnly = true;
					break;
				case "EventNoteCollectionViaEventNotesLog":
					this.EventNoteCollectionViaEventNotesLog.IsReadOnly = false;
					this.EventNoteCollectionViaEventNotesLog.Add((EventNoteEntity)entity);
					this.EventNoteCollectionViaEventNotesLog.IsReadOnly = true;
					break;
				case "EventPackageDetailsCollectionViaCustomerOrderHistory":
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.Add((EventPackageDetailsEntity)entity);
					this.EventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "EventPodRoomCollectionViaEventSchedulingSlot":
					this.EventPodRoomCollectionViaEventSchedulingSlot.IsReadOnly = false;
					this.EventPodRoomCollectionViaEventSchedulingSlot.Add((EventPodRoomEntity)entity);
					this.EventPodRoomCollectionViaEventSchedulingSlot.IsReadOnly = true;
					break;
				case "EventTestCollectionViaCustomerOrderHistory":
					this.EventTestCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.EventTestCollectionViaCustomerOrderHistory.Add((EventTestEntity)entity);
					this.EventTestCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "FileCollectionViaResultArchiveUpload":
					this.FileCollectionViaResultArchiveUpload.IsReadOnly = false;
					this.FileCollectionViaResultArchiveUpload.Add((FileEntity)entity);
					this.FileCollectionViaResultArchiveUpload.IsReadOnly = true;
					break;
				case "FluConsentTemplateCollectionViaEventFluConsentTemplate":
					this.FluConsentTemplateCollectionViaEventFluConsentTemplate.IsReadOnly = false;
					this.FluConsentTemplateCollectionViaEventFluConsentTemplate.Add((FluConsentTemplateEntity)entity);
					this.FluConsentTemplateCollectionViaEventFluConsentTemplate.IsReadOnly = true;
					break;
				case "GcNotGivenReasonCollectionViaEventCustomers":
					this.GcNotGivenReasonCollectionViaEventCustomers.IsReadOnly = false;
					this.GcNotGivenReasonCollectionViaEventCustomers.Add((GcNotGivenReasonEntity)entity);
					this.GcNotGivenReasonCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "HafTemplateCollectionViaEventPackageDetails":
					this.HafTemplateCollectionViaEventPackageDetails.IsReadOnly = false;
					this.HafTemplateCollectionViaEventPackageDetails.Add((HafTemplateEntity)entity);
					this.HafTemplateCollectionViaEventPackageDetails.IsReadOnly = true;
					break;
				case "HafTemplateCollectionViaEventTest":
					this.HafTemplateCollectionViaEventTest.IsReadOnly = false;
					this.HafTemplateCollectionViaEventTest.Add((HafTemplateEntity)entity);
					this.HafTemplateCollectionViaEventTest.IsReadOnly = true;
					break;
				case "HafTemplateCollectionViaCustomerClinicalQuestionAnswer":
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.Add((HafTemplateEntity)entity);
					this.HafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue":
					this.HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.IsReadOnly = false;
					this.HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.Add((HealthPlanCallQueueCriteriaEntity)entity);
					this.HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.IsReadOnly = true;
					break;
				case "HospitalFacilityCollectionViaEventHospitalFacility":
					this.HospitalFacilityCollectionViaEventHospitalFacility.IsReadOnly = false;
					this.HospitalFacilityCollectionViaEventHospitalFacility.Add((HospitalFacilityEntity)entity);
					this.HospitalFacilityCollectionViaEventHospitalFacility.IsReadOnly = true;
					break;
				case "HospitalFacilityCollectionViaEventCustomers":
					this.HospitalFacilityCollectionViaEventCustomers.IsReadOnly = false;
					this.HospitalFacilityCollectionViaEventCustomers.Add((HospitalFacilityEntity)entity);
					this.HospitalFacilityCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "HospitalPartnerCollectionViaEventHospitalPartner":
					this.HospitalPartnerCollectionViaEventHospitalPartner.IsReadOnly = false;
					this.HospitalPartnerCollectionViaEventHospitalPartner.Add((HospitalPartnerEntity)entity);
					this.HospitalPartnerCollectionViaEventHospitalPartner.IsReadOnly = true;
					break;
				case "LanguageCollectionViaCallQueueCustomer":
					this.LanguageCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.LanguageCollectionViaCallQueueCustomer.Add((LanguageEntity)entity);
					this.LanguageCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventSchedulingSlot":
					this.LookupCollectionViaEventSchedulingSlot.IsReadOnly = false;
					this.LookupCollectionViaEventSchedulingSlot.Add((LookupEntity)entity);
					this.LookupCollectionViaEventSchedulingSlot.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventPackageDetails":
					this.LookupCollectionViaEventPackageDetails.IsReadOnly = false;
					this.LookupCollectionViaEventPackageDetails.Add((LookupEntity)entity);
					this.LookupCollectionViaEventPackageDetails.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventTest":
					this.LookupCollectionViaEventTest.IsReadOnly = false;
					this.LookupCollectionViaEventTest.Add((LookupEntity)entity);
					this.LookupCollectionViaEventTest.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomers":
					this.LookupCollectionViaEventCustomers.IsReadOnly = false;
					this.LookupCollectionViaEventCustomers.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomerResult":
					this.LookupCollectionViaEventCustomerResult.IsReadOnly = false;
					this.LookupCollectionViaEventCustomerResult.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventCustomers_":
					this.LookupCollectionViaEventCustomers_.IsReadOnly = false;
					this.LookupCollectionViaEventCustomers_.Add((LookupEntity)entity);
					this.LookupCollectionViaEventCustomers_.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventTest__":
					this.LookupCollectionViaEventTest__.IsReadOnly = false;
					this.LookupCollectionViaEventTest__.Add((LookupEntity)entity);
					this.LookupCollectionViaEventTest__.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventTest_":
					this.LookupCollectionViaEventTest_.IsReadOnly = false;
					this.LookupCollectionViaEventTest_.Add((LookupEntity)entity);
					this.LookupCollectionViaEventTest_.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_____":
					this.LookupCollectionViaPreQualificationResult_____.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_____.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_____.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomEventNotification":
					this.LookupCollectionViaCustomEventNotification.IsReadOnly = false;
					this.LookupCollectionViaCustomEventNotification.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomEventNotification.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerRegistrationNotes":
					this.LookupCollectionViaCustomerRegistrationNotes.IsReadOnly = false;
					this.LookupCollectionViaCustomerRegistrationNotes.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerRegistrationNotes.IsReadOnly = true;
					break;
				case "LookupCollectionViaHostPayment_":
					this.LookupCollectionViaHostPayment_.IsReadOnly = false;
					this.LookupCollectionViaHostPayment_.Add((LookupEntity)entity);
					this.LookupCollectionViaHostPayment_.IsReadOnly = true;
					break;
				case "LookupCollectionViaCustomerOrderHistory":
					this.LookupCollectionViaCustomerOrderHistory.IsReadOnly = false;
					this.LookupCollectionViaCustomerOrderHistory.Add((LookupEntity)entity);
					this.LookupCollectionViaCustomerOrderHistory.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult__":
					this.LookupCollectionViaPreQualificationResult__.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult__.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult__.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult___":
					this.LookupCollectionViaPreQualificationResult___.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult___.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult___.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_":
					this.LookupCollectionViaPreQualificationResult_.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult____":
					this.LookupCollectionViaPreQualificationResult____.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult____.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult____.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult":
					this.LookupCollectionViaPreQualificationResult.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventAppointmentChangeLog_":
					this.LookupCollectionViaEventAppointmentChangeLog_.IsReadOnly = false;
					this.LookupCollectionViaEventAppointmentChangeLog_.Add((LookupEntity)entity);
					this.LookupCollectionViaEventAppointmentChangeLog_.IsReadOnly = true;
					break;
				case "LookupCollectionViaHostPayment":
					this.LookupCollectionViaHostPayment.IsReadOnly = false;
					this.LookupCollectionViaHostPayment.Add((LookupEntity)entity);
					this.LookupCollectionViaHostPayment.IsReadOnly = true;
					break;
				case "LookupCollectionViaCallQueueCustomer":
					this.LookupCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.LookupCollectionViaCallQueueCustomer.Add((LookupEntity)entity);
					this.LookupCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventAppointmentChangeLog":
					this.LookupCollectionViaEventAppointmentChangeLog.IsReadOnly = false;
					this.LookupCollectionViaEventAppointmentChangeLog.Add((LookupEntity)entity);
					this.LookupCollectionViaEventAppointmentChangeLog.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult_______":
					this.LookupCollectionViaPreQualificationResult_______.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult_______.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult_______.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult______":
					this.LookupCollectionViaPreQualificationResult______.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult______.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult______.IsReadOnly = true;
					break;
				case "LookupCollectionViaEventAppointmentCancellationLog":
					this.LookupCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.LookupCollectionViaEventAppointmentCancellationLog.Add((LookupEntity)entity);
					this.LookupCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "LookupCollectionViaPreQualificationResult________":
					this.LookupCollectionViaPreQualificationResult________.IsReadOnly = false;
					this.LookupCollectionViaPreQualificationResult________.Add((LookupEntity)entity);
					this.LookupCollectionViaPreQualificationResult________.IsReadOnly = true;
					break;
				case "MarketingOffersCollectionViaEventMarketingOffers":
					this.MarketingOffersCollectionViaEventMarketingOffers.IsReadOnly = false;
					this.MarketingOffersCollectionViaEventMarketingOffers.Add((MarketingOffersEntity)entity);
					this.MarketingOffersCollectionViaEventMarketingOffers.IsReadOnly = true;
					break;
				case "MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping":
					this.MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.IsReadOnly = false;
					this.MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.Add((MarketingPrintOrderEntity)entity);
					this.MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.IsReadOnly = true;
					break;
				case "NotesDetailsCollectionViaCallQueueCustomer":
					this.NotesDetailsCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.NotesDetailsCollectionViaCallQueueCustomer.Add((NotesDetailsEntity)entity);
					this.NotesDetailsCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "NotificationCollectionViaEventNotification":
					this.NotificationCollectionViaEventNotification.IsReadOnly = false;
					this.NotificationCollectionViaEventNotification.Add((NotificationEntity)entity);
					this.NotificationCollectionViaEventNotification.IsReadOnly = true;
					break;
				case "OrganizationCollectionViaEventAccountTestHcpcsCode":
					this.OrganizationCollectionViaEventAccountTestHcpcsCode.IsReadOnly = false;
					this.OrganizationCollectionViaEventAccountTestHcpcsCode.Add((OrganizationEntity)entity);
					this.OrganizationCollectionViaEventAccountTestHcpcsCode.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaSeminars":
					this.OrganizationRoleUserCollectionViaSeminars.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaSeminars.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaSeminars.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment_":
					this.OrganizationRoleUserCollectionViaEventStaffAssignment_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventStaffAssignment_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventStaffAssignment_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer":
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment__":
					this.OrganizationRoleUserCollectionViaEventStaffAssignment__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventStaffAssignment__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventStaffAssignment__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest__":
					this.OrganizationRoleUserCollectionViaEventPhysicianTest__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventPhysicianTest__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventPhysicianTest__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest_":
					this.OrganizationRoleUserCollectionViaEventPhysicianTest_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventPhysicianTest_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventPhysicianTest_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaHostPayment":
					this.OrganizationRoleUserCollectionViaHostPayment.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaHostPayment.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaHostPayment.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest":
					this.OrganizationRoleUserCollectionViaEventPhysicianTest.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventPhysicianTest.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventPhysicianTest.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment":
					this.OrganizationRoleUserCollectionViaEventStaffAssignment.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventStaffAssignment.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventStaffAssignment.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentCancellationLog":
					this.OrganizationRoleUserCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventAppointmentCancellationLog.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentChangeLog":
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode":
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_":
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_":
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult":
					this.OrganizationRoleUserCollectionViaEventCustomerResult.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentChangeLog_":
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventAppointmentChangeLog_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer":
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest_":
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer__":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer":
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer_":
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomEventNotification":
					this.OrganizationRoleUserCollectionViaCustomEventNotification.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomEventNotification.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomEventNotification.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest":
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_":
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaCustomerRegistrationNotes":
					this.OrganizationRoleUserCollectionViaCustomerRegistrationNotes.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaCustomerRegistrationNotes.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaCustomerRegistrationNotes.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_____":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult________":
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult___":
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult__":
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult______":
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult____":
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers":
					this.OrganizationRoleUserCollectionViaEventCustomers.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomers.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomers.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers_":
					this.OrganizationRoleUserCollectionViaEventCustomers_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomers_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomers_.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_______":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly = true;
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_":
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly = false;
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.Add((OrganizationRoleUserEntity)entity);
					this.OrganizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly = true;
					break;
				case "PackageCollectionViaEventPackageDetails":
					this.PackageCollectionViaEventPackageDetails.IsReadOnly = false;
					this.PackageCollectionViaEventPackageDetails.Add((PackageEntity)entity);
					this.PackageCollectionViaEventPackageDetails.IsReadOnly = true;
					break;
				case "PhysicianEvaluationCollectionViaPhysicianInvoiceItem":
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.Add((PhysicianEvaluationEntity)entity);
					this.PhysicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "PhysicianInvoiceCollectionViaPhysicianInvoiceItem":
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly = false;
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.Add((PhysicianInvoiceEntity)entity);
					this.PhysicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly = true;
					break;
				case "PhysicianProfileCollectionViaPhysicianEventAssignment":
					this.PhysicianProfileCollectionViaPhysicianEventAssignment.IsReadOnly = false;
					this.PhysicianProfileCollectionViaPhysicianEventAssignment.Add((PhysicianProfileEntity)entity);
					this.PhysicianProfileCollectionViaPhysicianEventAssignment.IsReadOnly = true;
					break;
				case "PhysicianProfileCollectionViaPhysicianEventAssignment_":
					this.PhysicianProfileCollectionViaPhysicianEventAssignment_.IsReadOnly = false;
					this.PhysicianProfileCollectionViaPhysicianEventAssignment_.Add((PhysicianProfileEntity)entity);
					this.PhysicianProfileCollectionViaPhysicianEventAssignment_.IsReadOnly = true;
					break;
				case "PodDetailsCollectionViaEventStaffAssignment":
					this.PodDetailsCollectionViaEventStaffAssignment.IsReadOnly = false;
					this.PodDetailsCollectionViaEventStaffAssignment.Add((PodDetailsEntity)entity);
					this.PodDetailsCollectionViaEventStaffAssignment.IsReadOnly = true;
					break;
				case "PodDetailsCollectionViaEventPod":
					this.PodDetailsCollectionViaEventPod.IsReadOnly = false;
					this.PodDetailsCollectionViaEventPod.Add((PodDetailsEntity)entity);
					this.PodDetailsCollectionViaEventPod.IsReadOnly = true;
					break;
				case "PodRoomCollectionViaEventPackageDetails":
					this.PodRoomCollectionViaEventPackageDetails.IsReadOnly = false;
					this.PodRoomCollectionViaEventPackageDetails.Add((PodRoomEntity)entity);
					this.PodRoomCollectionViaEventPackageDetails.IsReadOnly = true;
					break;
				case "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer":
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly = false;
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.Add((PreQualificationQuestionEntity)entity);
					this.PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly = true;
					break;
				case "PreQualificationQuestionCollectionViaDisqualifiedTest":
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.Add((PreQualificationQuestionEntity)entity);
					this.PreQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "PreQualificationTestTemplateCollectionViaEventTest":
					this.PreQualificationTestTemplateCollectionViaEventTest.IsReadOnly = false;
					this.PreQualificationTestTemplateCollectionViaEventTest.Add((PreQualificationTestTemplateEntity)entity);
					this.PreQualificationTestTemplateCollectionViaEventTest.IsReadOnly = true;
					break;
				case "ProductCollectionViaEventProductExclusion":
					this.ProductCollectionViaEventProductExclusion.IsReadOnly = false;
					this.ProductCollectionViaEventProductExclusion.Add((ProductEntity)entity);
					this.ProductCollectionViaEventProductExclusion.IsReadOnly = true;
					break;
				case "ProspectCustomerCollectionViaCallQueueCustomer":
					this.ProspectCustomerCollectionViaCallQueueCustomer.IsReadOnly = false;
					this.ProspectCustomerCollectionViaCallQueueCustomer.Add((ProspectCustomerEntity)entity);
					this.ProspectCustomerCollectionViaCallQueueCustomer.IsReadOnly = true;
					break;
				case "ProspectsCollectionViaHostPayment":
					this.ProspectsCollectionViaHostPayment.IsReadOnly = false;
					this.ProspectsCollectionViaHostPayment.Add((ProspectsEntity)entity);
					this.ProspectsCollectionViaHostPayment.IsReadOnly = true;
					break;
				case "ProspectsCollectionViaHostEventDetails":
					this.ProspectsCollectionViaHostEventDetails.IsReadOnly = false;
					this.ProspectsCollectionViaHostEventDetails.Add((ProspectsEntity)entity);
					this.ProspectsCollectionViaHostEventDetails.IsReadOnly = true;
					break;
				case "RefundRequestCollectionViaEventAppointmentCancellationLog":
					this.RefundRequestCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.RefundRequestCollectionViaEventAppointmentCancellationLog.Add((RefundRequestEntity)entity);
					this.RefundRequestCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog":
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.IsReadOnly = false;
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.Add((RescheduleCancelDispositionEntity)entity);
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.IsReadOnly = true;
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog":
					this.RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.IsReadOnly = false;
					this.RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.Add((RescheduleCancelDispositionEntity)entity);
					this.RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.IsReadOnly = true;
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_":
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.IsReadOnly = false;
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.Add((RescheduleCancelDispositionEntity)entity);
					this.RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.IsReadOnly = true;
					break;
				case "ScheduleTemplateCollectionViaEventScheduleTemplate":
					this.ScheduleTemplateCollectionViaEventScheduleTemplate.IsReadOnly = false;
					this.ScheduleTemplateCollectionViaEventScheduleTemplate.Add((ScheduleTemplateEntity)entity);
					this.ScheduleTemplateCollectionViaEventScheduleTemplate.IsReadOnly = true;
					break;
				case "StaffEventRoleCollectionViaEventStaffAssignment":
					this.StaffEventRoleCollectionViaEventStaffAssignment.IsReadOnly = false;
					this.StaffEventRoleCollectionViaEventStaffAssignment.Add((StaffEventRoleEntity)entity);
					this.StaffEventRoleCollectionViaEventStaffAssignment.IsReadOnly = true;
					break;
				case "SurveyTemplateCollectionViaEventSurveyTemplate":
					this.SurveyTemplateCollectionViaEventSurveyTemplate.IsReadOnly = false;
					this.SurveyTemplateCollectionViaEventSurveyTemplate.Add((SurveyTemplateEntity)entity);
					this.SurveyTemplateCollectionViaEventSurveyTemplate.IsReadOnly = true;
					break;
				case "TaskDetailsCollectionViaEventTaskDetails":
					this.TaskDetailsCollectionViaEventTaskDetails.IsReadOnly = false;
					this.TaskDetailsCollectionViaEventTaskDetails.Add((TaskDetailsEntity)entity);
					this.TaskDetailsCollectionViaEventTaskDetails.IsReadOnly = true;
					break;
				case "TempCartCollectionViaPreQualificationResult":
					this.TempCartCollectionViaPreQualificationResult.IsReadOnly = false;
					this.TempCartCollectionViaPreQualificationResult.Add((TempCartEntity)entity);
					this.TempCartCollectionViaPreQualificationResult.IsReadOnly = true;
					break;
				case "TerritoryCollectionViaEventPod":
					this.TerritoryCollectionViaEventPod.IsReadOnly = false;
					this.TerritoryCollectionViaEventPod.Add((TerritoryEntity)entity);
					this.TerritoryCollectionViaEventPod.IsReadOnly = true;
					break;
				case "TestCollectionViaEventPhysicianTest":
					this.TestCollectionViaEventPhysicianTest.IsReadOnly = false;
					this.TestCollectionViaEventPhysicianTest.Add((TestEntity)entity);
					this.TestCollectionViaEventPhysicianTest.IsReadOnly = true;
					break;
				case "TestCollectionViaDisqualifiedTest":
					this.TestCollectionViaDisqualifiedTest.IsReadOnly = false;
					this.TestCollectionViaDisqualifiedTest.Add((TestEntity)entity);
					this.TestCollectionViaDisqualifiedTest.IsReadOnly = true;
					break;
				case "TestCollectionViaEventTest":
					this.TestCollectionViaEventTest.IsReadOnly = false;
					this.TestCollectionViaEventTest.Add((TestEntity)entity);
					this.TestCollectionViaEventTest.IsReadOnly = true;
					break;
				case "TestCollectionViaCustomerEventTestFinding":
					this.TestCollectionViaCustomerEventTestFinding.IsReadOnly = false;
					this.TestCollectionViaCustomerEventTestFinding.Add((TestEntity)entity);
					this.TestCollectionViaCustomerEventTestFinding.IsReadOnly = true;
					break;
				case "TestCollectionViaDependentDisqualifiedTest":
					this.TestCollectionViaDependentDisqualifiedTest.IsReadOnly = false;
					this.TestCollectionViaDependentDisqualifiedTest.Add((TestEntity)entity);
					this.TestCollectionViaDependentDisqualifiedTest.IsReadOnly = true;
					break;
				case "TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode":
					this.TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode.IsReadOnly = false;
					this.TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode.Add((TestHcpcsCodeEntity)entity);
					this.TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode.IsReadOnly = true;
					break;
				case "ZipCollectionViaEventZip":
					this.ZipCollectionViaEventZip.IsReadOnly = false;
					this.ZipCollectionViaEventZip.Add((ZipEntity)entity);
					this.ZipCollectionViaEventZip.IsReadOnly = true;
					break;
				case "EventAccount":
					this.EventAccount = (EventAccountEntity)entity;
					break;
				default:
					break;
			}
		}
		
		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		public override RelationCollection GetRelationsForFieldOfType(string fieldName)
		{
			return EventsEntity.GetRelationsForField(fieldName);
		}

		/// <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
		/// <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
		/// <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
		public static RelationCollection GetRelationsForField(string fieldName)
		{
			RelationCollection toReturn = new RelationCollection();
			switch(fieldName)
			{
				case "CommunicationMode":
					toReturn.Add(EventsEntity.Relations.CommunicationModeEntityUsingCommunicationModeId);
					break;
				case "EventType":
					toReturn.Add(EventsEntity.Relations.EventTypeEntityUsingEventTypeId);
					break;
				case "HafTemplate":
					toReturn.Add(EventsEntity.Relations.HafTemplateEntityUsingHafTemplateId);
					break;
				case "Lookup":
					toReturn.Add(EventsEntity.Relations.LookupEntityUsingGenerateKynXml);
					break;
				case "Lookup____":
					toReturn.Add(EventsEntity.Relations.LookupEntityUsingGenerateHealthAssesmentFormStatus);
					break;
				case "Lookup___":
					toReturn.Add(EventsEntity.Relations.LookupEntityUsingGenerateMyBioCheckAssessment);
					break;
				case "Lookup__":
					toReturn.Add(EventsEntity.Relations.LookupEntityUsingGenerateHkynXml);
					break;
				case "Lookup_":
					toReturn.Add(EventsEntity.Relations.LookupEntityUsingEventCancellationReasonId);
					break;
				case "NotesDetails":
					toReturn.Add(EventsEntity.Relations.NotesDetailsEntityUsingEmrNotesId);
					break;
				case "OrganizationRoleUser_":
					toReturn.Add(EventsEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId);
					break;
				case "OrganizationRoleUser____":
					toReturn.Add(EventsEntity.Relations.OrganizationRoleUserEntityUsingUpdatedByAdmin);
					break;
				case "OrganizationRoleUser__":
					toReturn.Add(EventsEntity.Relations.OrganizationRoleUserEntityUsingEventActivityOrgRoleUserId);
					break;
				case "OrganizationRoleUser":
					toReturn.Add(EventsEntity.Relations.OrganizationRoleUserEntityUsingAssignedToOrgRoleUserId);
					break;
				case "OrganizationRoleUser___":
					toReturn.Add(EventsEntity.Relations.OrganizationRoleUserEntityUsingSignOffOrgRoleUserId);
					break;
				case "ScheduleMethod":
					toReturn.Add(EventsEntity.Relations.ScheduleMethodEntityUsingScheduleMethodId);
					break;
				case "AfmarketingMaterial":
					toReturn.Add(EventsEntity.Relations.AfmarketingMaterialEntityUsingEventId);
					break;
				case "CallDetails":
					toReturn.Add(EventsEntity.Relations.CallDetailsEntityUsingEventId);
					break;
				case "CallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId);
					break;
				case "CustomerClinicalQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId);
					break;
				case "CustomerEventTestFinding":
					toReturn.Add(EventsEntity.Relations.CustomerEventTestFindingEntityUsingEventId);
					break;
				case "CustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId);
					break;
				case "CustomerRegistrationNotes":
					toReturn.Add(EventsEntity.Relations.CustomerRegistrationNotesEntityUsingEventId);
					break;
				case "CustomEventNotification":
					toReturn.Add(EventsEntity.Relations.CustomEventNotificationEntityUsingEventId);
					break;
				case "DependentDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId);
					break;
				case "DisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId);
					break;
				case "EventAccountTestHcpcsCode":
					toReturn.Add(EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId);
					break;
				case "EventAffiliateDetails":
					toReturn.Add(EventsEntity.Relations.EventAffiliateDetailsEntityUsingEventId);
					break;
				case "EventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId);
					break;
				case "EventAppointmentChangeLog_":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId);
					break;
				case "EventAppointmentChangeLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId);
					break;
				case "EventCallDetails":
					toReturn.Add(EventsEntity.Relations.EventCallDetailsEntityUsingEventId);
					break;
				case "EventChecklistTemplate":
					toReturn.Add(EventsEntity.Relations.EventChecklistTemplateEntityUsingEventId);
					break;
				case "EventCoupons":
					toReturn.Add(EventsEntity.Relations.EventCouponsEntityUsingEventId);
					break;
				case "EventCustomerQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId);
					break;
				case "EventCustomerResult":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId);
					break;
				case "EventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId);
					break;
				case "EventFluConsentTemplate":
					toReturn.Add(EventsEntity.Relations.EventFluConsentTemplateEntityUsingEventId);
					break;
				case "EventHospitalFacility":
					toReturn.Add(EventsEntity.Relations.EventHospitalFacilityEntityUsingEventId);
					break;
				case "EventHospitalPartner":
					toReturn.Add(EventsEntity.Relations.EventHospitalPartnerEntityUsingEventId);
					break;
				case "EventHostPromotions":
					toReturn.Add(EventsEntity.Relations.EventHostPromotionsEntityUsingEventId);
					break;
				case "EventMarketingOffers":
					toReturn.Add(EventsEntity.Relations.EventMarketingOffersEntityUsingEventId);
					break;
				case "EventMeetingDetails":
					toReturn.Add(EventsEntity.Relations.EventMeetingDetailsEntityUsingEventId);
					break;
				case "EventNotesLog":
					toReturn.Add(EventsEntity.Relations.EventNotesLogEntityUsingEventId);
					break;
				case "EventNotification":
					toReturn.Add(EventsEntity.Relations.EventNotificationEntityUsingEventId);
					break;
				case "EventPackageDetails":
					toReturn.Add(EventsEntity.Relations.EventPackageDetailsEntityUsingEventId);
					break;
				case "EventPhysicianTest":
					toReturn.Add(EventsEntity.Relations.EventPhysicianTestEntityUsingEventId);
					break;
				case "EventPod":
					toReturn.Add(EventsEntity.Relations.EventPodEntityUsingEventId);
					break;
				case "EventProductExclusion":
					toReturn.Add(EventsEntity.Relations.EventProductExclusionEntityUsingEventId);
					break;
				case "EventProductType":
					toReturn.Add(EventsEntity.Relations.EventProductTypeEntityUsingEventId);
					break;
				case "EventPublication":
					toReturn.Add(EventsEntity.Relations.EventPublicationEntityUsingEventId);
					break;
				case "EventScheduleTemplate":
					toReturn.Add(EventsEntity.Relations.EventScheduleTemplateEntityUsingEventId);
					break;
				case "EventSchedulingSlot":
					toReturn.Add(EventsEntity.Relations.EventSchedulingSlotEntityUsingEventId);
					break;
				case "EventStaffAssignment":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId);
					break;
				case "EventSurveyTemplate":
					toReturn.Add(EventsEntity.Relations.EventSurveyTemplateEntityUsingEventId);
					break;
				case "EventTaskDetails":
					toReturn.Add(EventsEntity.Relations.EventTaskDetailsEntityUsingEventId);
					break;
				case "EventTest":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId);
					break;
				case "EventZip":
					toReturn.Add(EventsEntity.Relations.EventZipEntityUsingEventId);
					break;
				case "HealthPlanFillEventCallQueue":
					toReturn.Add(EventsEntity.Relations.HealthPlanFillEventCallQueueEntityUsingEventId);
					break;
				case "HospitalPartnerCustomer":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId);
					break;
				case "HospitalPartnerEventNotes":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerEventNotesEntityUsingEventId);
					break;
				case "HostEventDetails":
					toReturn.Add(EventsEntity.Relations.HostEventDetailsEntityUsingEventId);
					break;
				case "HostPayment":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId);
					break;
				case "MarketingPrintOrderEventMapping":
					toReturn.Add(EventsEntity.Relations.MarketingPrintOrderEventMappingEntityUsingEventId);
					break;
				case "PhysicianEventAssignment":
					toReturn.Add(EventsEntity.Relations.PhysicianEventAssignmentEntityUsingEventId);
					break;
				case "PhysicianInvoiceItem":
					toReturn.Add(EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId);
					break;
				case "PreQualificationResult":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId);
					break;
				case "ResultArchiveUpload":
					toReturn.Add(EventsEntity.Relations.ResultArchiveUploadEntityUsingEventId);
					break;
				case "Seminars":
					toReturn.Add(EventsEntity.Relations.SeminarsEntityUsingEventId);
					break;
				case "AccountCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.AccountEntityUsingHealthPlanId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "AccountCollectionViaCustomEventNotification":
					toReturn.Add(EventsEntity.Relations.CustomEventNotificationEntityUsingEventId, "EventsEntity__", "CustomEventNotification_", JoinHint.None);
					toReturn.Add(CustomEventNotificationEntity.Relations.AccountEntityUsingAccountId, "CustomEventNotification_", string.Empty, JoinHint.None);
					break;
				case "ActivityTypeCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.ActivityTypeEntityUsingActivityId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "AddressCollectionViaHostPayment":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId, "EventsEntity__", "HostPayment_", JoinHint.None);
					toReturn.Add(HostPaymentEntity.Relations.AddressEntityUsingMailingAddressId, "HostPayment_", string.Empty, JoinHint.None);
					break;
				case "AfaffiliateCampaignCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.AfaffiliateCampaignEntityUsingAffiliateCampaignId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "AffiliateProfileCollectionViaEventAffiliateDetails":
					toReturn.Add(EventsEntity.Relations.EventAffiliateDetailsEntityUsingEventId, "EventsEntity__", "EventAffiliateDetails_", JoinHint.None);
					toReturn.Add(EventAffiliateDetailsEntity.Relations.AffiliateProfileEntityUsingAffiliateId, "EventAffiliateDetails_", string.Empty, JoinHint.None);
					break;
				case "AfmarketingMaterialTypeCollectionViaAfmarketingMaterial":
					toReturn.Add(EventsEntity.Relations.AfmarketingMaterialEntityUsingEventId, "EventsEntity__", "AfmarketingMaterial_", JoinHint.None);
					toReturn.Add(AfmarketingMaterialEntity.Relations.AfmarketingMaterialTypeEntityUsingMarketingMaterialTypeId, "AfmarketingMaterial_", string.Empty, JoinHint.None);
					break;
				case "CallQueueCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CallQueueEntityUsingCallQueueId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CallQueueCriteriaCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CallQueueCriteriaEntityUsingCallQueueCriteriaId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CallsCollectionViaPreQualificationResult":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.CallsEntityUsingCallId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "CampaignCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CampaignEntityUsingCampaignId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CampaignCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CampaignEntityUsingCampaignId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CheckListTemplateCollectionViaEventChecklistTemplate":
					toReturn.Add(EventsEntity.Relations.EventChecklistTemplateEntityUsingEventId, "EventsEntity__", "EventChecklistTemplate_", JoinHint.None);
					toReturn.Add(EventChecklistTemplateEntity.Relations.CheckListTemplateEntityUsingChecklistTemplateId, "EventChecklistTemplate_", string.Empty, JoinHint.None);
					break;
				case "ContactCallCollectionViaEventCallDetails":
					toReturn.Add(EventsEntity.Relations.EventCallDetailsEntityUsingEventId, "EventsEntity__", "EventCallDetails_", JoinHint.None);
					toReturn.Add(EventCallDetailsEntity.Relations.ContactCallEntityUsingCallId, "EventCallDetails_", string.Empty, JoinHint.None);
					break;
				case "ContactMeetingCollectionViaEventMeetingDetails":
					toReturn.Add(EventsEntity.Relations.EventMeetingDetailsEntityUsingEventId, "EventsEntity__", "EventMeetingDetails_", JoinHint.None);
					toReturn.Add(EventMeetingDetailsEntity.Relations.ContactMeetingEntityUsingMeetingId, "EventMeetingDetails_", string.Empty, JoinHint.None);
					break;
				case "CorporateUploadCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.CorporateUploadEntityUsingUploadId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "CouponsCollectionViaEventCoupons":
					toReturn.Add(EventsEntity.Relations.EventCouponsEntityUsingEventId, "EventsEntity__", "EventCoupons_", JoinHint.None);
					toReturn.Add(EventCouponsEntity.Relations.CouponsEntityUsingCouponId, "EventCoupons_", string.Empty, JoinHint.None);
					break;
				case "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId, "EventsEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.CustomerHealthQuestionsEntityUsingClinicalHealthQuestionId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaHospitalPartnerCustomer":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId, "EventsEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.CustomerProfileEntityUsingCustomerId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId, "EventsEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.CustomerProfileEntityUsingCustomerId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaEventCustomerResult":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.CustomerProfileEntityUsingCustomerId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaDependentDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId, "EventsEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.CustomerProfileEntityUsingCustomerId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaPhysicianInvoiceItem":
					toReturn.Add(EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId, "EventsEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.CustomerProfileEntityUsingCustomerId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CustomerProfileEntityUsingCustomerId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.CustomerProfileEntityUsingCustomerId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaCustomerEventTestFinding":
					toReturn.Add(EventsEntity.Relations.CustomerEventTestFindingEntityUsingEventId, "EventsEntity__", "CustomerEventTestFinding_", JoinHint.None);
					toReturn.Add(CustomerEventTestFindingEntity.Relations.CustomerProfileEntityUsingCustomerId, "CustomerEventTestFinding_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.CustomerProfileEntityUsingCustomerId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaPreQualificationResult":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.CustomerProfileEntityUsingCustomerId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId, "EventsEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.CustomerProfileEntityUsingCustomerId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.CustomerProfileEntityUsingCustomerId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "CustomerProfileHistoryCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CustomerProfileHistoryEntityUsingCustomerProfileHistoryId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.CustomerRegistrationNotesEntityUsingNoteId, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "CustomerRegistrationNotesCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.CustomerRegistrationNotesEntityUsingLeftWithoutScreeningNotesId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "EventAppointmentCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.EventAppointmentEntityUsingAppointmentId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.EventCustomersEntityUsingEventCustomerId, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.EventCustomersEntityUsingEventCustomerId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaEventAppointmentChangeLog_":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.EventCustomersEntityUsingEventCustomerId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId, "EventsEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.EventCustomersEntityUsingEventCustomerId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventCustomersEntityUsingEventCustomerId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaDependentDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId, "EventsEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.EventCustomersEntityUsingEventCustomerId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "EventCustomersCollectionViaEventAppointmentChangeLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.EventCustomersEntityUsingEventCustomerId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "EventNoteCollectionViaEventNotesLog":
					toReturn.Add(EventsEntity.Relations.EventNotesLogEntityUsingEventId, "EventsEntity__", "EventNotesLog_", JoinHint.None);
					toReturn.Add(EventNotesLogEntity.Relations.EventNoteEntityUsingEventNoteId, "EventNotesLog_", string.Empty, JoinHint.None);
					break;
				case "EventPackageDetailsCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventPackageDetailsEntityUsingEventPackageId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "EventPodRoomCollectionViaEventSchedulingSlot":
					toReturn.Add(EventsEntity.Relations.EventSchedulingSlotEntityUsingEventId, "EventsEntity__", "EventSchedulingSlot_", JoinHint.None);
					toReturn.Add(EventSchedulingSlotEntity.Relations.EventPodRoomEntityUsingEventPodRoomId, "EventSchedulingSlot_", string.Empty, JoinHint.None);
					break;
				case "EventTestCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.EventTestEntityUsingEventTestId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "FileCollectionViaResultArchiveUpload":
					toReturn.Add(EventsEntity.Relations.ResultArchiveUploadEntityUsingEventId, "EventsEntity__", "ResultArchiveUpload_", JoinHint.None);
					toReturn.Add(ResultArchiveUploadEntity.Relations.FileEntityUsingFileId, "ResultArchiveUpload_", string.Empty, JoinHint.None);
					break;
				case "FluConsentTemplateCollectionViaEventFluConsentTemplate":
					toReturn.Add(EventsEntity.Relations.EventFluConsentTemplateEntityUsingEventId, "EventsEntity__", "EventFluConsentTemplate_", JoinHint.None);
					toReturn.Add(EventFluConsentTemplateEntity.Relations.FluConsentTemplateEntityUsingTemplateId, "EventFluConsentTemplate_", string.Empty, JoinHint.None);
					break;
				case "GcNotGivenReasonCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.GcNotGivenReasonEntityUsingGcNotGivenReasonId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "HafTemplateCollectionViaEventPackageDetails":
					toReturn.Add(EventsEntity.Relations.EventPackageDetailsEntityUsingEventId, "EventsEntity__", "EventPackageDetails_", JoinHint.None);
					toReturn.Add(EventPackageDetailsEntity.Relations.HafTemplateEntityUsingHafTemplateId, "EventPackageDetails_", string.Empty, JoinHint.None);
					break;
				case "HafTemplateCollectionViaEventTest":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.HafTemplateEntityUsingHafTemplateId, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "HafTemplateCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId, "EventsEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.HafTemplateEntityUsingClinicalQuestionTemplateId, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue":
					toReturn.Add(EventsEntity.Relations.HealthPlanFillEventCallQueueEntityUsingEventId, "EventsEntity__", "HealthPlanFillEventCallQueue_", JoinHint.None);
					toReturn.Add(HealthPlanFillEventCallQueueEntity.Relations.HealthPlanCallQueueCriteriaEntityUsingCriteriaId, "HealthPlanFillEventCallQueue_", string.Empty, JoinHint.None);
					break;
				case "HospitalFacilityCollectionViaEventHospitalFacility":
					toReturn.Add(EventsEntity.Relations.EventHospitalFacilityEntityUsingEventId, "EventsEntity__", "EventHospitalFacility_", JoinHint.None);
					toReturn.Add(EventHospitalFacilityEntity.Relations.HospitalFacilityEntityUsingHospitalFacilityId, "EventHospitalFacility_", string.Empty, JoinHint.None);
					break;
				case "HospitalFacilityCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.HospitalFacilityEntityUsingHospitalFacilityId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "HospitalPartnerCollectionViaEventHospitalPartner":
					toReturn.Add(EventsEntity.Relations.EventHospitalPartnerEntityUsingEventId, "EventsEntity__", "EventHospitalPartner_", JoinHint.None);
					toReturn.Add(EventHospitalPartnerEntity.Relations.HospitalPartnerEntityUsingHospitalPartnerId, "EventHospitalPartner_", string.Empty, JoinHint.None);
					break;
				case "LanguageCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.LanguageEntityUsingLanguageId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventSchedulingSlot":
					toReturn.Add(EventsEntity.Relations.EventSchedulingSlotEntityUsingEventId, "EventsEntity__", "EventSchedulingSlot_", JoinHint.None);
					toReturn.Add(EventSchedulingSlotEntity.Relations.LookupEntityUsingStatus, "EventSchedulingSlot_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventPackageDetails":
					toReturn.Add(EventsEntity.Relations.EventPackageDetailsEntityUsingEventId, "EventsEntity__", "EventPackageDetails_", JoinHint.None);
					toReturn.Add(EventPackageDetailsEntity.Relations.LookupEntityUsingGender, "EventPackageDetails_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventTest":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.LookupEntityUsingGender, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.LookupEntityUsingLeftWithoutScreeningReasonId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomerResult":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.LookupEntityUsingResultSummary, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventCustomers_":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.LookupEntityUsingPreferredContactType, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventTest__":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.LookupEntityUsingResultEntryTypeId, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventTest_":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.LookupEntityUsingGroupId, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_____":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHighBloodPressure, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomEventNotification":
					toReturn.Add(EventsEntity.Relations.CustomEventNotificationEntityUsingEventId, "EventsEntity__", "CustomEventNotification_", JoinHint.None);
					toReturn.Add(CustomEventNotificationEntity.Relations.LookupEntityUsingServiceStatus, "CustomEventNotification_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerRegistrationNotes":
					toReturn.Add(EventsEntity.Relations.CustomerRegistrationNotesEntityUsingEventId, "EventsEntity__", "CustomerRegistrationNotes_", JoinHint.None);
					toReturn.Add(CustomerRegistrationNotesEntity.Relations.LookupEntityUsingReasonId, "CustomerRegistrationNotes_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaHostPayment_":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId, "EventsEntity__", "HostPayment_", JoinHint.None);
					toReturn.Add(HostPaymentEntity.Relations.LookupEntityUsingStatus, "HostPayment_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCustomerOrderHistory":
					toReturn.Add(EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId, "EventsEntity__", "CustomerOrderHistory_", JoinHint.None);
					toReturn.Add(CustomerOrderHistoryEntity.Relations.LookupEntityUsingOrderItemStatusId, "CustomerOrderHistory_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult__":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingDiabetic, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult___":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingDiagnosedHeartProblem, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingChestPain, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult____":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHeartDisease, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingAgeOverPreQualificationQuestion, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventAppointmentChangeLog_":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.LookupEntityUsingReasonId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaHostPayment":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId, "EventsEntity__", "HostPayment_", JoinHint.None);
					toReturn.Add(HostPaymentEntity.Relations.LookupEntityUsingDepositType, "HostPayment_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.LookupEntityUsingDoNotContactUpdateSource, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventAppointmentChangeLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.LookupEntityUsingReasonId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult_______":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingOverWeight, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult______":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingHighCholestrol, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.LookupEntityUsingReasonId, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "LookupCollectionViaPreQualificationResult________":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.LookupEntityUsingSmoker, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "MarketingOffersCollectionViaEventMarketingOffers":
					toReturn.Add(EventsEntity.Relations.EventMarketingOffersEntityUsingEventId, "EventsEntity__", "EventMarketingOffers_", JoinHint.None);
					toReturn.Add(EventMarketingOffersEntity.Relations.MarketingOffersEntityUsingMarketingOfferId, "EventMarketingOffers_", string.Empty, JoinHint.None);
					break;
				case "MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping":
					toReturn.Add(EventsEntity.Relations.MarketingPrintOrderEventMappingEntityUsingEventId, "EventsEntity__", "MarketingPrintOrderEventMapping_", JoinHint.None);
					toReturn.Add(MarketingPrintOrderEventMappingEntity.Relations.MarketingPrintOrderEntityUsingMarketingPrintOrderId, "MarketingPrintOrderEventMapping_", string.Empty, JoinHint.None);
					break;
				case "NotesDetailsCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.NotesDetailsEntityUsingNotesId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "NotificationCollectionViaEventNotification":
					toReturn.Add(EventsEntity.Relations.EventNotificationEntityUsingEventId, "EventsEntity__", "EventNotification_", JoinHint.None);
					toReturn.Add(EventNotificationEntity.Relations.NotificationEntityUsingNotificationId, "EventNotification_", string.Empty, JoinHint.None);
					break;
				case "OrganizationCollectionViaEventAccountTestHcpcsCode":
					toReturn.Add(EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId, "EventsEntity__", "EventAccountTestHcpcsCode_", JoinHint.None);
					toReturn.Add(EventAccountTestHcpcsCodeEntity.Relations.OrganizationEntityUsingAccountId, "EventAccountTestHcpcsCode_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId, "EventsEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaSeminars":
					toReturn.Add(EventsEntity.Relations.SeminarsEntityUsingEventId, "EventsEntity__", "Seminars_", JoinHint.None);
					toReturn.Add(SeminarsEntity.Relations.OrganizationRoleUserEntityUsingOrgRoleUserId, "Seminars_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId, "EventsEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment_":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId, "EventsEntity__", "EventStaffAssignment_", JoinHint.None);
					toReturn.Add(EventStaffAssignmentEntity.Relations.OrganizationRoleUserEntityUsingActualStaffOrgRoleUserId, "EventStaffAssignment_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHospitalPartnerCustomer":
					toReturn.Add(EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId, "EventsEntity__", "HospitalPartnerCustomer_", JoinHint.None);
					toReturn.Add(HospitalPartnerCustomerEntity.Relations.OrganizationRoleUserEntityUsingCareCoordinatorOrgRoleUserId, "HospitalPartnerCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment__":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId, "EventsEntity__", "EventStaffAssignment_", JoinHint.None);
					toReturn.Add(EventStaffAssignmentEntity.Relations.OrganizationRoleUserEntityUsingScheduledByOrgRoleUserId, "EventStaffAssignment_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest__":
					toReturn.Add(EventsEntity.Relations.EventPhysicianTestEntityUsingEventId, "EventsEntity__", "EventPhysicianTest_", JoinHint.None);
					toReturn.Add(EventPhysicianTestEntity.Relations.OrganizationRoleUserEntityUsingPhysicianId, "EventPhysicianTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest_":
					toReturn.Add(EventsEntity.Relations.EventPhysicianTestEntityUsingEventId, "EventsEntity__", "EventPhysicianTest_", JoinHint.None);
					toReturn.Add(EventPhysicianTestEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "EventPhysicianTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaHostPayment":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId, "EventsEntity__", "HostPayment_", JoinHint.None);
					toReturn.Add(HostPaymentEntity.Relations.OrganizationRoleUserEntityUsingCreatorOrganizationRoleUserId, "HostPayment_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventPhysicianTest":
					toReturn.Add(EventsEntity.Relations.EventPhysicianTestEntityUsingEventId, "EventsEntity__", "EventPhysicianTest_", JoinHint.None);
					toReturn.Add(EventPhysicianTestEntity.Relations.OrganizationRoleUserEntityUsingAssignedByOrgRoleUserId, "EventPhysicianTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventStaffAssignment":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId, "EventsEntity__", "EventStaffAssignment_", JoinHint.None);
					toReturn.Add(EventStaffAssignmentEntity.Relations.OrganizationRoleUserEntityUsingScheduledStaffOrgRoleUserId, "EventStaffAssignment_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentChangeLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode":
					toReturn.Add(EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId, "EventsEntity__", "EventAccountTestHcpcsCode_", JoinHint.None);
					toReturn.Add(EventAccountTestHcpcsCodeEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "EventAccountTestHcpcsCode_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_":
					toReturn.Add(EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId, "EventsEntity__", "EventAccountTestHcpcsCode_", JoinHint.None);
					toReturn.Add(EventAccountTestHcpcsCodeEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "EventAccountTestHcpcsCode_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId, "EventsEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingUpdatedBy, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventAppointmentChangeLog_":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId, "EventsEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest_":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.OrganizationRoleUserEntityUsingUpdatedBy, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer__":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId, "EventsEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingAssignedToOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCallQueueCustomer_":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomEventNotification":
					toReturn.Add(EventsEntity.Relations.CustomEventNotificationEntityUsingEventId, "EventsEntity__", "CustomEventNotification_", JoinHint.None);
					toReturn.Add(CustomEventNotificationEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "CustomEventNotification_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.OrganizationRoleUserEntityUsingCreatedBy, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_":
					toReturn.Add(EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId, "EventsEntity__", "CustomerClinicalQuestionAnswer_", JoinHint.None);
					toReturn.Add(CustomerClinicalQuestionAnswerEntity.Relations.OrganizationRoleUserEntityUsingModifiedBy, "CustomerClinicalQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaCustomerRegistrationNotes":
					toReturn.Add(EventsEntity.Relations.CustomerRegistrationNotesEntityUsingEventId, "EventsEntity__", "CustomerRegistrationNotes_", JoinHint.None);
					toReturn.Add(CustomerRegistrationNotesEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "CustomerRegistrationNotes_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_____":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingCodedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult________":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingChatPdfReviewedByPhysicianId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult___":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingSignedOffBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult__":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingRegeneratedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult______":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingInvoiceDateUpdatedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult____":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingVerifiedBy, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomers_":
					toReturn.Add(EventsEntity.Relations.EventCustomersEntityUsingEventId, "EventsEntity__", "EventCustomers_", JoinHint.None);
					toReturn.Add(EventCustomersEntity.Relations.OrganizationRoleUserEntityUsingConfirmedBy, "EventCustomers_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_______":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingChatPdfReviewedByOverreadPhysicianId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "OrganizationRoleUserCollectionViaEventCustomerResult_":
					toReturn.Add(EventsEntity.Relations.EventCustomerResultEntityUsingEventId, "EventsEntity__", "EventCustomerResult_", JoinHint.None);
					toReturn.Add(EventCustomerResultEntity.Relations.OrganizationRoleUserEntityUsingModifiedByOrgRoleUserId, "EventCustomerResult_", string.Empty, JoinHint.None);
					break;
				case "PackageCollectionViaEventPackageDetails":
					toReturn.Add(EventsEntity.Relations.EventPackageDetailsEntityUsingEventId, "EventsEntity__", "EventPackageDetails_", JoinHint.None);
					toReturn.Add(EventPackageDetailsEntity.Relations.PackageEntityUsingPackageId, "EventPackageDetails_", string.Empty, JoinHint.None);
					break;
				case "PhysicianEvaluationCollectionViaPhysicianInvoiceItem":
					toReturn.Add(EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId, "EventsEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.PhysicianEvaluationEntityUsingPhysicianEvaluationId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "PhysicianInvoiceCollectionViaPhysicianInvoiceItem":
					toReturn.Add(EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId, "EventsEntity__", "PhysicianInvoiceItem_", JoinHint.None);
					toReturn.Add(PhysicianInvoiceItemEntity.Relations.PhysicianInvoiceEntityUsingPhysicianInvoiceId, "PhysicianInvoiceItem_", string.Empty, JoinHint.None);
					break;
				case "PhysicianProfileCollectionViaPhysicianEventAssignment":
					toReturn.Add(EventsEntity.Relations.PhysicianEventAssignmentEntityUsingEventId, "EventsEntity__", "PhysicianEventAssignment_", JoinHint.None);
					toReturn.Add(PhysicianEventAssignmentEntity.Relations.PhysicianProfileEntityUsingOverReadPhysicianId, "PhysicianEventAssignment_", string.Empty, JoinHint.None);
					break;
				case "PhysicianProfileCollectionViaPhysicianEventAssignment_":
					toReturn.Add(EventsEntity.Relations.PhysicianEventAssignmentEntityUsingEventId, "EventsEntity__", "PhysicianEventAssignment_", JoinHint.None);
					toReturn.Add(PhysicianEventAssignmentEntity.Relations.PhysicianProfileEntityUsingPhysicianId, "PhysicianEventAssignment_", string.Empty, JoinHint.None);
					break;
				case "PodDetailsCollectionViaEventStaffAssignment":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId, "EventsEntity__", "EventStaffAssignment_", JoinHint.None);
					toReturn.Add(EventStaffAssignmentEntity.Relations.PodDetailsEntityUsingPodId, "EventStaffAssignment_", string.Empty, JoinHint.None);
					break;
				case "PodDetailsCollectionViaEventPod":
					toReturn.Add(EventsEntity.Relations.EventPodEntityUsingEventId, "EventsEntity__", "EventPod_", JoinHint.None);
					toReturn.Add(EventPodEntity.Relations.PodDetailsEntityUsingPodId, "EventPod_", string.Empty, JoinHint.None);
					break;
				case "PodRoomCollectionViaEventPackageDetails":
					toReturn.Add(EventsEntity.Relations.EventPackageDetailsEntityUsingEventId, "EventsEntity__", "EventPackageDetails_", JoinHint.None);
					toReturn.Add(EventPackageDetailsEntity.Relations.PodRoomEntityUsingPodRoomId, "EventPackageDetails_", string.Empty, JoinHint.None);
					break;
				case "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer":
					toReturn.Add(EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId, "EventsEntity__", "EventCustomerQuestionAnswer_", JoinHint.None);
					toReturn.Add(EventCustomerQuestionAnswerEntity.Relations.PreQualificationQuestionEntityUsingQuestionId, "EventCustomerQuestionAnswer_", string.Empty, JoinHint.None);
					break;
				case "PreQualificationQuestionCollectionViaDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.PreQualificationQuestionEntityUsingQuestionId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "PreQualificationTestTemplateCollectionViaEventTest":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.PreQualificationTestTemplateEntityUsingPreQualificationQuestionTemplateId, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "ProductCollectionViaEventProductExclusion":
					toReturn.Add(EventsEntity.Relations.EventProductExclusionEntityUsingEventId, "EventsEntity__", "EventProductExclusion_", JoinHint.None);
					toReturn.Add(EventProductExclusionEntity.Relations.ProductEntityUsingProductId, "EventProductExclusion_", string.Empty, JoinHint.None);
					break;
				case "ProspectCustomerCollectionViaCallQueueCustomer":
					toReturn.Add(EventsEntity.Relations.CallQueueCustomerEntityUsingEventId, "EventsEntity__", "CallQueueCustomer_", JoinHint.None);
					toReturn.Add(CallQueueCustomerEntity.Relations.ProspectCustomerEntityUsingProspectCustomerId, "CallQueueCustomer_", string.Empty, JoinHint.None);
					break;
				case "ProspectsCollectionViaHostPayment":
					toReturn.Add(EventsEntity.Relations.HostPaymentEntityUsingEventId, "EventsEntity__", "HostPayment_", JoinHint.None);
					toReturn.Add(HostPaymentEntity.Relations.ProspectsEntityUsingHostId, "HostPayment_", string.Empty, JoinHint.None);
					break;
				case "ProspectsCollectionViaHostEventDetails":
					toReturn.Add(EventsEntity.Relations.HostEventDetailsEntityUsingEventId, "EventsEntity__", "HostEventDetails_", JoinHint.None);
					toReturn.Add(HostEventDetailsEntity.Relations.ProspectsEntityUsingHostId, "HostEventDetails_", string.Empty, JoinHint.None);
					break;
				case "RefundRequestCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.RefundRequestEntityUsingRefundRequestId, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.RescheduleCancelDispositionEntityUsingSubReasonId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog":
					toReturn.Add(EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId, "EventsEntity__", "EventAppointmentCancellationLog_", JoinHint.None);
					toReturn.Add(EventAppointmentCancellationLogEntity.Relations.RescheduleCancelDispositionEntityUsingSubReasonId, "EventAppointmentCancellationLog_", string.Empty, JoinHint.None);
					break;
				case "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_":
					toReturn.Add(EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId, "EventsEntity__", "EventAppointmentChangeLog_", JoinHint.None);
					toReturn.Add(EventAppointmentChangeLogEntity.Relations.RescheduleCancelDispositionEntityUsingSubReasonId, "EventAppointmentChangeLog_", string.Empty, JoinHint.None);
					break;
				case "ScheduleTemplateCollectionViaEventScheduleTemplate":
					toReturn.Add(EventsEntity.Relations.EventScheduleTemplateEntityUsingEventId, "EventsEntity__", "EventScheduleTemplate_", JoinHint.None);
					toReturn.Add(EventScheduleTemplateEntity.Relations.ScheduleTemplateEntityUsingScheduleTemplateId, "EventScheduleTemplate_", string.Empty, JoinHint.None);
					break;
				case "StaffEventRoleCollectionViaEventStaffAssignment":
					toReturn.Add(EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId, "EventsEntity__", "EventStaffAssignment_", JoinHint.None);
					toReturn.Add(EventStaffAssignmentEntity.Relations.StaffEventRoleEntityUsingStaffEventRoleId, "EventStaffAssignment_", string.Empty, JoinHint.None);
					break;
				case "SurveyTemplateCollectionViaEventSurveyTemplate":
					toReturn.Add(EventsEntity.Relations.EventSurveyTemplateEntityUsingEventId, "EventsEntity__", "EventSurveyTemplate_", JoinHint.None);
					toReturn.Add(EventSurveyTemplateEntity.Relations.SurveyTemplateEntityUsingSurveyTemplateId, "EventSurveyTemplate_", string.Empty, JoinHint.None);
					break;
				case "TaskDetailsCollectionViaEventTaskDetails":
					toReturn.Add(EventsEntity.Relations.EventTaskDetailsEntityUsingEventId, "EventsEntity__", "EventTaskDetails_", JoinHint.None);
					toReturn.Add(EventTaskDetailsEntity.Relations.TaskDetailsEntityUsingTaskId, "EventTaskDetails_", string.Empty, JoinHint.None);
					break;
				case "TempCartCollectionViaPreQualificationResult":
					toReturn.Add(EventsEntity.Relations.PreQualificationResultEntityUsingEventId, "EventsEntity__", "PreQualificationResult_", JoinHint.None);
					toReturn.Add(PreQualificationResultEntity.Relations.TempCartEntityUsingTempCartId, "PreQualificationResult_", string.Empty, JoinHint.None);
					break;
				case "TerritoryCollectionViaEventPod":
					toReturn.Add(EventsEntity.Relations.EventPodEntityUsingEventId, "EventsEntity__", "EventPod_", JoinHint.None);
					toReturn.Add(EventPodEntity.Relations.TerritoryEntityUsingTerritoryId, "EventPod_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaEventPhysicianTest":
					toReturn.Add(EventsEntity.Relations.EventPhysicianTestEntityUsingEventId, "EventsEntity__", "EventPhysicianTest_", JoinHint.None);
					toReturn.Add(EventPhysicianTestEntity.Relations.TestEntityUsingTestId, "EventPhysicianTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DisqualifiedTestEntityUsingEventId, "EventsEntity__", "DisqualifiedTest_", JoinHint.None);
					toReturn.Add(DisqualifiedTestEntity.Relations.TestEntityUsingTestId, "DisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaEventTest":
					toReturn.Add(EventsEntity.Relations.EventTestEntityUsingEventId, "EventsEntity__", "EventTest_", JoinHint.None);
					toReturn.Add(EventTestEntity.Relations.TestEntityUsingTestId, "EventTest_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaCustomerEventTestFinding":
					toReturn.Add(EventsEntity.Relations.CustomerEventTestFindingEntityUsingEventId, "EventsEntity__", "CustomerEventTestFinding_", JoinHint.None);
					toReturn.Add(CustomerEventTestFindingEntity.Relations.TestEntityUsingTestId, "CustomerEventTestFinding_", string.Empty, JoinHint.None);
					break;
				case "TestCollectionViaDependentDisqualifiedTest":
					toReturn.Add(EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId, "EventsEntity__", "DependentDisqualifiedTest_", JoinHint.None);
					toReturn.Add(DependentDisqualifiedTestEntity.Relations.TestEntityUsingTestId, "DependentDisqualifiedTest_", string.Empty, JoinHint.None);
					break;
				case "TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode":
					toReturn.Add(EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId, "EventsEntity__", "EventAccountTestHcpcsCode_", JoinHint.None);
					toReturn.Add(EventAccountTestHcpcsCodeEntity.Relations.TestHcpcsCodeEntityUsingTestHcpcsCodeId, "EventAccountTestHcpcsCode_", string.Empty, JoinHint.None);
					break;
				case "ZipCollectionViaEventZip":
					toReturn.Add(EventsEntity.Relations.EventZipEntityUsingEventId, "EventsEntity__", "EventZip_", JoinHint.None);
					toReturn.Add(EventZipEntity.Relations.ZipEntityUsingZipId, "EventZip_", string.Empty, JoinHint.None);
					break;
				case "EventAccount":
					toReturn.Add(EventsEntity.Relations.EventAccountEntityUsingEventId);
					break;
				default:

					break;				
			}
			return toReturn;
		}
#if !CF
		/// <summary>Checks if the relation mapped by the property with the name specified is a one way / single sided relation. If the passed in name is null, it
		/// will return true if the entity has any single-sided relation</summary>
		/// <param name="propertyName">Name of the property which is mapped onto the relation to check, or null to check if the entity has any relation/ which is single sided</param>
		/// <returns>true if the relation is single sided / one way (so the opposite relation isn't present), false otherwise</returns>
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override bool CheckOneWayRelations(string propertyName)
		{
			// use template trick to calculate the # of single-sided / oneway relations
			int numberOfOneWayRelations = 0;
			switch(propertyName)
			{
				case null:
					return ((numberOfOneWayRelations > 0) || base.CheckOneWayRelations(null));
















				default:
					return base.CheckOneWayRelations(propertyName);
			}
		}
#endif
		/// <summary> Sets the internal parameter related to the fieldname passed to the instance relatedEntity. </summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void SetRelatedEntity(IEntity2 relatedEntity, string fieldName)
		{
			switch(fieldName)
			{
				case "CommunicationMode":
					SetupSyncCommunicationMode(relatedEntity);
					break;
				case "EventType":
					SetupSyncEventType(relatedEntity);
					break;
				case "HafTemplate":
					SetupSyncHafTemplate(relatedEntity);
					break;
				case "Lookup":
					SetupSyncLookup(relatedEntity);
					break;
				case "Lookup____":
					SetupSyncLookup____(relatedEntity);
					break;
				case "Lookup___":
					SetupSyncLookup___(relatedEntity);
					break;
				case "Lookup__":
					SetupSyncLookup__(relatedEntity);
					break;
				case "Lookup_":
					SetupSyncLookup_(relatedEntity);
					break;
				case "NotesDetails":
					SetupSyncNotesDetails(relatedEntity);
					break;
				case "OrganizationRoleUser_":
					SetupSyncOrganizationRoleUser_(relatedEntity);
					break;
				case "OrganizationRoleUser____":
					SetupSyncOrganizationRoleUser____(relatedEntity);
					break;
				case "OrganizationRoleUser__":
					SetupSyncOrganizationRoleUser__(relatedEntity);
					break;
				case "OrganizationRoleUser":
					SetupSyncOrganizationRoleUser(relatedEntity);
					break;
				case "OrganizationRoleUser___":
					SetupSyncOrganizationRoleUser___(relatedEntity);
					break;
				case "ScheduleMethod":
					SetupSyncScheduleMethod(relatedEntity);
					break;
				case "AfmarketingMaterial":
					this.AfmarketingMaterial.Add((AfmarketingMaterialEntity)relatedEntity);
					break;
				case "CallDetails":
					this.CallDetails.Add((CallDetailsEntity)relatedEntity);
					break;
				case "CallQueueCustomer":
					this.CallQueueCustomer.Add((CallQueueCustomerEntity)relatedEntity);
					break;
				case "CustomerClinicalQuestionAnswer":
					this.CustomerClinicalQuestionAnswer.Add((CustomerClinicalQuestionAnswerEntity)relatedEntity);
					break;
				case "CustomerEventTestFinding":
					this.CustomerEventTestFinding.Add((CustomerEventTestFindingEntity)relatedEntity);
					break;
				case "CustomerOrderHistory":
					this.CustomerOrderHistory.Add((CustomerOrderHistoryEntity)relatedEntity);
					break;
				case "CustomerRegistrationNotes":
					this.CustomerRegistrationNotes.Add((CustomerRegistrationNotesEntity)relatedEntity);
					break;
				case "CustomEventNotification":
					this.CustomEventNotification.Add((CustomEventNotificationEntity)relatedEntity);
					break;
				case "DependentDisqualifiedTest":
					this.DependentDisqualifiedTest.Add((DependentDisqualifiedTestEntity)relatedEntity);
					break;
				case "DisqualifiedTest":
					this.DisqualifiedTest.Add((DisqualifiedTestEntity)relatedEntity);
					break;
				case "EventAccountTestHcpcsCode":
					this.EventAccountTestHcpcsCode.Add((EventAccountTestHcpcsCodeEntity)relatedEntity);
					break;
				case "EventAffiliateDetails":
					this.EventAffiliateDetails.Add((EventAffiliateDetailsEntity)relatedEntity);
					break;
				case "EventAppointmentCancellationLog":
					this.EventAppointmentCancellationLog.Add((EventAppointmentCancellationLogEntity)relatedEntity);
					break;
				case "EventAppointmentChangeLog_":
					this.EventAppointmentChangeLog_.Add((EventAppointmentChangeLogEntity)relatedEntity);
					break;
				case "EventAppointmentChangeLog":
					this.EventAppointmentChangeLog.Add((EventAppointmentChangeLogEntity)relatedEntity);
					break;
				case "EventCallDetails":
					this.EventCallDetails.Add((EventCallDetailsEntity)relatedEntity);
					break;
				case "EventChecklistTemplate":
					this.EventChecklistTemplate.Add((EventChecklistTemplateEntity)relatedEntity);
					break;
				case "EventCoupons":
					this.EventCoupons.Add((EventCouponsEntity)relatedEntity);
					break;
				case "EventCustomerQuestionAnswer":
					this.EventCustomerQuestionAnswer.Add((EventCustomerQuestionAnswerEntity)relatedEntity);
					break;
				case "EventCustomerResult":
					this.EventCustomerResult.Add((EventCustomerResultEntity)relatedEntity);
					break;
				case "EventCustomers":
					this.EventCustomers.Add((EventCustomersEntity)relatedEntity);
					break;
				case "EventFluConsentTemplate":
					this.EventFluConsentTemplate.Add((EventFluConsentTemplateEntity)relatedEntity);
					break;
				case "EventHospitalFacility":
					this.EventHospitalFacility.Add((EventHospitalFacilityEntity)relatedEntity);
					break;
				case "EventHospitalPartner":
					this.EventHospitalPartner.Add((EventHospitalPartnerEntity)relatedEntity);
					break;
				case "EventHostPromotions":
					this.EventHostPromotions.Add((EventHostPromotionsEntity)relatedEntity);
					break;
				case "EventMarketingOffers":
					this.EventMarketingOffers.Add((EventMarketingOffersEntity)relatedEntity);
					break;
				case "EventMeetingDetails":
					this.EventMeetingDetails.Add((EventMeetingDetailsEntity)relatedEntity);
					break;
				case "EventNotesLog":
					this.EventNotesLog.Add((EventNotesLogEntity)relatedEntity);
					break;
				case "EventNotification":
					this.EventNotification.Add((EventNotificationEntity)relatedEntity);
					break;
				case "EventPackageDetails":
					this.EventPackageDetails.Add((EventPackageDetailsEntity)relatedEntity);
					break;
				case "EventPhysicianTest":
					this.EventPhysicianTest.Add((EventPhysicianTestEntity)relatedEntity);
					break;
				case "EventPod":
					this.EventPod.Add((EventPodEntity)relatedEntity);
					break;
				case "EventProductExclusion":
					this.EventProductExclusion.Add((EventProductExclusionEntity)relatedEntity);
					break;
				case "EventProductType":
					this.EventProductType.Add((EventProductTypeEntity)relatedEntity);
					break;
				case "EventPublication":
					this.EventPublication.Add((EventPublicationEntity)relatedEntity);
					break;
				case "EventScheduleTemplate":
					this.EventScheduleTemplate.Add((EventScheduleTemplateEntity)relatedEntity);
					break;
				case "EventSchedulingSlot":
					this.EventSchedulingSlot.Add((EventSchedulingSlotEntity)relatedEntity);
					break;
				case "EventStaffAssignment":
					this.EventStaffAssignment.Add((EventStaffAssignmentEntity)relatedEntity);
					break;
				case "EventSurveyTemplate":
					this.EventSurveyTemplate.Add((EventSurveyTemplateEntity)relatedEntity);
					break;
				case "EventTaskDetails":
					this.EventTaskDetails.Add((EventTaskDetailsEntity)relatedEntity);
					break;
				case "EventTest":
					this.EventTest.Add((EventTestEntity)relatedEntity);
					break;
				case "EventZip":
					this.EventZip.Add((EventZipEntity)relatedEntity);
					break;
				case "HealthPlanFillEventCallQueue":
					this.HealthPlanFillEventCallQueue.Add((HealthPlanFillEventCallQueueEntity)relatedEntity);
					break;
				case "HospitalPartnerCustomer":
					this.HospitalPartnerCustomer.Add((HospitalPartnerCustomerEntity)relatedEntity);
					break;
				case "HospitalPartnerEventNotes":
					this.HospitalPartnerEventNotes.Add((HospitalPartnerEventNotesEntity)relatedEntity);
					break;
				case "HostEventDetails":
					this.HostEventDetails.Add((HostEventDetailsEntity)relatedEntity);
					break;
				case "HostPayment":
					this.HostPayment.Add((HostPaymentEntity)relatedEntity);
					break;
				case "MarketingPrintOrderEventMapping":
					this.MarketingPrintOrderEventMapping.Add((MarketingPrintOrderEventMappingEntity)relatedEntity);
					break;
				case "PhysicianEventAssignment":
					this.PhysicianEventAssignment.Add((PhysicianEventAssignmentEntity)relatedEntity);
					break;
				case "PhysicianInvoiceItem":
					this.PhysicianInvoiceItem.Add((PhysicianInvoiceItemEntity)relatedEntity);
					break;
				case "PreQualificationResult":
					this.PreQualificationResult.Add((PreQualificationResultEntity)relatedEntity);
					break;
				case "ResultArchiveUpload":
					this.ResultArchiveUpload.Add((ResultArchiveUploadEntity)relatedEntity);
					break;
				case "Seminars":
					this.Seminars.Add((SeminarsEntity)relatedEntity);
					break;
				case "EventAccount":
					SetupSyncEventAccount(relatedEntity);
					break;
				default:
					break;
			}
		}

		/// <summary> Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() </summary>
		/// <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
		/// <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
		/// <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void UnsetRelatedEntity(IEntity2 relatedEntity, string fieldName, bool signalRelatedEntityManyToOne)
		{
			switch(fieldName)
			{
				case "CommunicationMode":
					DesetupSyncCommunicationMode(false, true);
					break;
				case "EventType":
					DesetupSyncEventType(false, true);
					break;
				case "HafTemplate":
					DesetupSyncHafTemplate(false, true);
					break;
				case "Lookup":
					DesetupSyncLookup(false, true);
					break;
				case "Lookup____":
					DesetupSyncLookup____(false, true);
					break;
				case "Lookup___":
					DesetupSyncLookup___(false, true);
					break;
				case "Lookup__":
					DesetupSyncLookup__(false, true);
					break;
				case "Lookup_":
					DesetupSyncLookup_(false, true);
					break;
				case "NotesDetails":
					DesetupSyncNotesDetails(false, true);
					break;
				case "OrganizationRoleUser_":
					DesetupSyncOrganizationRoleUser_(false, true);
					break;
				case "OrganizationRoleUser____":
					DesetupSyncOrganizationRoleUser____(false, true);
					break;
				case "OrganizationRoleUser__":
					DesetupSyncOrganizationRoleUser__(false, true);
					break;
				case "OrganizationRoleUser":
					DesetupSyncOrganizationRoleUser(false, true);
					break;
				case "OrganizationRoleUser___":
					DesetupSyncOrganizationRoleUser___(false, true);
					break;
				case "ScheduleMethod":
					DesetupSyncScheduleMethod(false, true);
					break;
				case "AfmarketingMaterial":
					base.PerformRelatedEntityRemoval(this.AfmarketingMaterial, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CallDetails":
					base.PerformRelatedEntityRemoval(this.CallDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CallQueueCustomer":
					base.PerformRelatedEntityRemoval(this.CallQueueCustomer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerClinicalQuestionAnswer":
					base.PerformRelatedEntityRemoval(this.CustomerClinicalQuestionAnswer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerEventTestFinding":
					base.PerformRelatedEntityRemoval(this.CustomerEventTestFinding, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerOrderHistory":
					base.PerformRelatedEntityRemoval(this.CustomerOrderHistory, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomerRegistrationNotes":
					base.PerformRelatedEntityRemoval(this.CustomerRegistrationNotes, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "CustomEventNotification":
					base.PerformRelatedEntityRemoval(this.CustomEventNotification, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "DependentDisqualifiedTest":
					base.PerformRelatedEntityRemoval(this.DependentDisqualifiedTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "DisqualifiedTest":
					base.PerformRelatedEntityRemoval(this.DisqualifiedTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAccountTestHcpcsCode":
					base.PerformRelatedEntityRemoval(this.EventAccountTestHcpcsCode, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAffiliateDetails":
					base.PerformRelatedEntityRemoval(this.EventAffiliateDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAppointmentCancellationLog":
					base.PerformRelatedEntityRemoval(this.EventAppointmentCancellationLog, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAppointmentChangeLog_":
					base.PerformRelatedEntityRemoval(this.EventAppointmentChangeLog_, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAppointmentChangeLog":
					base.PerformRelatedEntityRemoval(this.EventAppointmentChangeLog, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCallDetails":
					base.PerformRelatedEntityRemoval(this.EventCallDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventChecklistTemplate":
					base.PerformRelatedEntityRemoval(this.EventChecklistTemplate, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCoupons":
					base.PerformRelatedEntityRemoval(this.EventCoupons, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomerQuestionAnswer":
					base.PerformRelatedEntityRemoval(this.EventCustomerQuestionAnswer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomerResult":
					base.PerformRelatedEntityRemoval(this.EventCustomerResult, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventCustomers":
					base.PerformRelatedEntityRemoval(this.EventCustomers, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventFluConsentTemplate":
					base.PerformRelatedEntityRemoval(this.EventFluConsentTemplate, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventHospitalFacility":
					base.PerformRelatedEntityRemoval(this.EventHospitalFacility, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventHospitalPartner":
					base.PerformRelatedEntityRemoval(this.EventHospitalPartner, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventHostPromotions":
					base.PerformRelatedEntityRemoval(this.EventHostPromotions, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventMarketingOffers":
					base.PerformRelatedEntityRemoval(this.EventMarketingOffers, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventMeetingDetails":
					base.PerformRelatedEntityRemoval(this.EventMeetingDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventNotesLog":
					base.PerformRelatedEntityRemoval(this.EventNotesLog, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventNotification":
					base.PerformRelatedEntityRemoval(this.EventNotification, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventPackageDetails":
					base.PerformRelatedEntityRemoval(this.EventPackageDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventPhysicianTest":
					base.PerformRelatedEntityRemoval(this.EventPhysicianTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventPod":
					base.PerformRelatedEntityRemoval(this.EventPod, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventProductExclusion":
					base.PerformRelatedEntityRemoval(this.EventProductExclusion, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventProductType":
					base.PerformRelatedEntityRemoval(this.EventProductType, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventPublication":
					base.PerformRelatedEntityRemoval(this.EventPublication, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventScheduleTemplate":
					base.PerformRelatedEntityRemoval(this.EventScheduleTemplate, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventSchedulingSlot":
					base.PerformRelatedEntityRemoval(this.EventSchedulingSlot, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventStaffAssignment":
					base.PerformRelatedEntityRemoval(this.EventStaffAssignment, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventSurveyTemplate":
					base.PerformRelatedEntityRemoval(this.EventSurveyTemplate, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventTaskDetails":
					base.PerformRelatedEntityRemoval(this.EventTaskDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventTest":
					base.PerformRelatedEntityRemoval(this.EventTest, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventZip":
					base.PerformRelatedEntityRemoval(this.EventZip, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HealthPlanFillEventCallQueue":
					base.PerformRelatedEntityRemoval(this.HealthPlanFillEventCallQueue, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HospitalPartnerCustomer":
					base.PerformRelatedEntityRemoval(this.HospitalPartnerCustomer, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HospitalPartnerEventNotes":
					base.PerformRelatedEntityRemoval(this.HospitalPartnerEventNotes, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HostEventDetails":
					base.PerformRelatedEntityRemoval(this.HostEventDetails, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "HostPayment":
					base.PerformRelatedEntityRemoval(this.HostPayment, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "MarketingPrintOrderEventMapping":
					base.PerformRelatedEntityRemoval(this.MarketingPrintOrderEventMapping, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PhysicianEventAssignment":
					base.PerformRelatedEntityRemoval(this.PhysicianEventAssignment, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PhysicianInvoiceItem":
					base.PerformRelatedEntityRemoval(this.PhysicianInvoiceItem, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "PreQualificationResult":
					base.PerformRelatedEntityRemoval(this.PreQualificationResult, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "ResultArchiveUpload":
					base.PerformRelatedEntityRemoval(this.ResultArchiveUpload, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "Seminars":
					base.PerformRelatedEntityRemoval(this.Seminars, relatedEntity, signalRelatedEntityManyToOne);
					break;
				case "EventAccount":
					DesetupSyncEventAccount(false, true);
					break;
				default:
					break;
			}
		}

		/// <summary> Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These entities will have to be persisted after this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		public override List<IEntity2> GetDependingRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();
			if(_eventAccount!=null)
			{
				toReturn.Add(_eventAccount);
			}

			return toReturn;
		}
		
		/// <summary> Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
		/// entities will have to be persisted before this entity during a recursive save.</summary>
		/// <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
		public override List<IEntity2> GetDependentRelatedEntities()
		{
			List<IEntity2> toReturn = new List<IEntity2>();
			if(_communicationMode!=null)
			{
				toReturn.Add(_communicationMode);
			}
			if(_eventType!=null)
			{
				toReturn.Add(_eventType);
			}
			if(_hafTemplate!=null)
			{
				toReturn.Add(_hafTemplate);
			}
			if(_lookup!=null)
			{
				toReturn.Add(_lookup);
			}
			if(_lookup____!=null)
			{
				toReturn.Add(_lookup____);
			}
			if(_lookup___!=null)
			{
				toReturn.Add(_lookup___);
			}
			if(_lookup__!=null)
			{
				toReturn.Add(_lookup__);
			}
			if(_lookup_!=null)
			{
				toReturn.Add(_lookup_);
			}
			if(_notesDetails!=null)
			{
				toReturn.Add(_notesDetails);
			}
			if(_organizationRoleUser_!=null)
			{
				toReturn.Add(_organizationRoleUser_);
			}
			if(_organizationRoleUser____!=null)
			{
				toReturn.Add(_organizationRoleUser____);
			}
			if(_organizationRoleUser__!=null)
			{
				toReturn.Add(_organizationRoleUser__);
			}
			if(_organizationRoleUser!=null)
			{
				toReturn.Add(_organizationRoleUser);
			}
			if(_organizationRoleUser___!=null)
			{
				toReturn.Add(_organizationRoleUser___);
			}
			if(_scheduleMethod!=null)
			{
				toReturn.Add(_scheduleMethod);
			}


			return toReturn;
		}
		
		/// <summary>Gets a list of all entity collections stored as member variables in this entity. The contents of the ArrayList is used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.</summary>
		/// <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
		public override List<IEntityCollection2> GetMemberEntityCollections()
		{
			List<IEntityCollection2> toReturn = new List<IEntityCollection2>();
			toReturn.Add(this.AfmarketingMaterial);
			toReturn.Add(this.CallDetails);
			toReturn.Add(this.CallQueueCustomer);
			toReturn.Add(this.CustomerClinicalQuestionAnswer);
			toReturn.Add(this.CustomerEventTestFinding);
			toReturn.Add(this.CustomerOrderHistory);
			toReturn.Add(this.CustomerRegistrationNotes);
			toReturn.Add(this.CustomEventNotification);
			toReturn.Add(this.DependentDisqualifiedTest);
			toReturn.Add(this.DisqualifiedTest);
			toReturn.Add(this.EventAccountTestHcpcsCode);
			toReturn.Add(this.EventAffiliateDetails);
			toReturn.Add(this.EventAppointmentCancellationLog);
			toReturn.Add(this.EventAppointmentChangeLog_);
			toReturn.Add(this.EventAppointmentChangeLog);
			toReturn.Add(this.EventCallDetails);
			toReturn.Add(this.EventChecklistTemplate);
			toReturn.Add(this.EventCoupons);
			toReturn.Add(this.EventCustomerQuestionAnswer);
			toReturn.Add(this.EventCustomerResult);
			toReturn.Add(this.EventCustomers);
			toReturn.Add(this.EventFluConsentTemplate);
			toReturn.Add(this.EventHospitalFacility);
			toReturn.Add(this.EventHospitalPartner);
			toReturn.Add(this.EventHostPromotions);
			toReturn.Add(this.EventMarketingOffers);
			toReturn.Add(this.EventMeetingDetails);
			toReturn.Add(this.EventNotesLog);
			toReturn.Add(this.EventNotification);
			toReturn.Add(this.EventPackageDetails);
			toReturn.Add(this.EventPhysicianTest);
			toReturn.Add(this.EventPod);
			toReturn.Add(this.EventProductExclusion);
			toReturn.Add(this.EventProductType);
			toReturn.Add(this.EventPublication);
			toReturn.Add(this.EventScheduleTemplate);
			toReturn.Add(this.EventSchedulingSlot);
			toReturn.Add(this.EventStaffAssignment);
			toReturn.Add(this.EventSurveyTemplate);
			toReturn.Add(this.EventTaskDetails);
			toReturn.Add(this.EventTest);
			toReturn.Add(this.EventZip);
			toReturn.Add(this.HealthPlanFillEventCallQueue);
			toReturn.Add(this.HospitalPartnerCustomer);
			toReturn.Add(this.HospitalPartnerEventNotes);
			toReturn.Add(this.HostEventDetails);
			toReturn.Add(this.HostPayment);
			toReturn.Add(this.MarketingPrintOrderEventMapping);
			toReturn.Add(this.PhysicianEventAssignment);
			toReturn.Add(this.PhysicianInvoiceItem);
			toReturn.Add(this.PreQualificationResult);
			toReturn.Add(this.ResultArchiveUpload);
			toReturn.Add(this.Seminars);

			return toReturn;
		}
		


		/// <summary>ISerializable member. Does custom serialization so event handlers do not get serialized. Serializes members of this entity class and uses the base class' implementation to serialize the rest.</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (SerializationHelper.Optimization != SerializationOptimization.Fast) 
			{
				info.AddValue("_afmarketingMaterial", ((_afmarketingMaterial!=null) && (_afmarketingMaterial.Count>0) && !this.MarkedForDeletion)?_afmarketingMaterial:null);
				info.AddValue("_callDetails", ((_callDetails!=null) && (_callDetails.Count>0) && !this.MarkedForDeletion)?_callDetails:null);
				info.AddValue("_callQueueCustomer", ((_callQueueCustomer!=null) && (_callQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCustomer:null);
				info.AddValue("_customerClinicalQuestionAnswer", ((_customerClinicalQuestionAnswer!=null) && (_customerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerClinicalQuestionAnswer:null);
				info.AddValue("_customerEventTestFinding", ((_customerEventTestFinding!=null) && (_customerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_customerEventTestFinding:null);
				info.AddValue("_customerOrderHistory", ((_customerOrderHistory!=null) && (_customerOrderHistory.Count>0) && !this.MarkedForDeletion)?_customerOrderHistory:null);
				info.AddValue("_customerRegistrationNotes", ((_customerRegistrationNotes!=null) && (_customerRegistrationNotes.Count>0) && !this.MarkedForDeletion)?_customerRegistrationNotes:null);
				info.AddValue("_customEventNotification", ((_customEventNotification!=null) && (_customEventNotification.Count>0) && !this.MarkedForDeletion)?_customEventNotification:null);
				info.AddValue("_dependentDisqualifiedTest", ((_dependentDisqualifiedTest!=null) && (_dependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_dependentDisqualifiedTest:null);
				info.AddValue("_disqualifiedTest", ((_disqualifiedTest!=null) && (_disqualifiedTest.Count>0) && !this.MarkedForDeletion)?_disqualifiedTest:null);
				info.AddValue("_eventAccountTestHcpcsCode", ((_eventAccountTestHcpcsCode!=null) && (_eventAccountTestHcpcsCode.Count>0) && !this.MarkedForDeletion)?_eventAccountTestHcpcsCode:null);
				info.AddValue("_eventAffiliateDetails", ((_eventAffiliateDetails!=null) && (_eventAffiliateDetails.Count>0) && !this.MarkedForDeletion)?_eventAffiliateDetails:null);
				info.AddValue("_eventAppointmentCancellationLog", ((_eventAppointmentCancellationLog!=null) && (_eventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_eventAppointmentCancellationLog:null);
				info.AddValue("_eventAppointmentChangeLog_", ((_eventAppointmentChangeLog_!=null) && (_eventAppointmentChangeLog_.Count>0) && !this.MarkedForDeletion)?_eventAppointmentChangeLog_:null);
				info.AddValue("_eventAppointmentChangeLog", ((_eventAppointmentChangeLog!=null) && (_eventAppointmentChangeLog.Count>0) && !this.MarkedForDeletion)?_eventAppointmentChangeLog:null);
				info.AddValue("_eventCallDetails", ((_eventCallDetails!=null) && (_eventCallDetails.Count>0) && !this.MarkedForDeletion)?_eventCallDetails:null);
				info.AddValue("_eventChecklistTemplate", ((_eventChecklistTemplate!=null) && (_eventChecklistTemplate.Count>0) && !this.MarkedForDeletion)?_eventChecklistTemplate:null);
				info.AddValue("_eventCoupons", ((_eventCoupons!=null) && (_eventCoupons.Count>0) && !this.MarkedForDeletion)?_eventCoupons:null);
				info.AddValue("_eventCustomerQuestionAnswer", ((_eventCustomerQuestionAnswer!=null) && (_eventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventCustomerQuestionAnswer:null);
				info.AddValue("_eventCustomerResult", ((_eventCustomerResult!=null) && (_eventCustomerResult.Count>0) && !this.MarkedForDeletion)?_eventCustomerResult:null);
				info.AddValue("_eventCustomers", ((_eventCustomers!=null) && (_eventCustomers.Count>0) && !this.MarkedForDeletion)?_eventCustomers:null);
				info.AddValue("_eventFluConsentTemplate", ((_eventFluConsentTemplate!=null) && (_eventFluConsentTemplate.Count>0) && !this.MarkedForDeletion)?_eventFluConsentTemplate:null);
				info.AddValue("_eventHospitalFacility", ((_eventHospitalFacility!=null) && (_eventHospitalFacility.Count>0) && !this.MarkedForDeletion)?_eventHospitalFacility:null);
				info.AddValue("_eventHospitalPartner", ((_eventHospitalPartner!=null) && (_eventHospitalPartner.Count>0) && !this.MarkedForDeletion)?_eventHospitalPartner:null);
				info.AddValue("_eventHostPromotions", ((_eventHostPromotions!=null) && (_eventHostPromotions.Count>0) && !this.MarkedForDeletion)?_eventHostPromotions:null);
				info.AddValue("_eventMarketingOffers", ((_eventMarketingOffers!=null) && (_eventMarketingOffers.Count>0) && !this.MarkedForDeletion)?_eventMarketingOffers:null);
				info.AddValue("_eventMeetingDetails", ((_eventMeetingDetails!=null) && (_eventMeetingDetails.Count>0) && !this.MarkedForDeletion)?_eventMeetingDetails:null);
				info.AddValue("_eventNotesLog", ((_eventNotesLog!=null) && (_eventNotesLog.Count>0) && !this.MarkedForDeletion)?_eventNotesLog:null);
				info.AddValue("_eventNotification", ((_eventNotification!=null) && (_eventNotification.Count>0) && !this.MarkedForDeletion)?_eventNotification:null);
				info.AddValue("_eventPackageDetails", ((_eventPackageDetails!=null) && (_eventPackageDetails.Count>0) && !this.MarkedForDeletion)?_eventPackageDetails:null);
				info.AddValue("_eventPhysicianTest", ((_eventPhysicianTest!=null) && (_eventPhysicianTest.Count>0) && !this.MarkedForDeletion)?_eventPhysicianTest:null);
				info.AddValue("_eventPod", ((_eventPod!=null) && (_eventPod.Count>0) && !this.MarkedForDeletion)?_eventPod:null);
				info.AddValue("_eventProductExclusion", ((_eventProductExclusion!=null) && (_eventProductExclusion.Count>0) && !this.MarkedForDeletion)?_eventProductExclusion:null);
				info.AddValue("_eventProductType", ((_eventProductType!=null) && (_eventProductType.Count>0) && !this.MarkedForDeletion)?_eventProductType:null);
				info.AddValue("_eventPublication", ((_eventPublication!=null) && (_eventPublication.Count>0) && !this.MarkedForDeletion)?_eventPublication:null);
				info.AddValue("_eventScheduleTemplate", ((_eventScheduleTemplate!=null) && (_eventScheduleTemplate.Count>0) && !this.MarkedForDeletion)?_eventScheduleTemplate:null);
				info.AddValue("_eventSchedulingSlot", ((_eventSchedulingSlot!=null) && (_eventSchedulingSlot.Count>0) && !this.MarkedForDeletion)?_eventSchedulingSlot:null);
				info.AddValue("_eventStaffAssignment", ((_eventStaffAssignment!=null) && (_eventStaffAssignment.Count>0) && !this.MarkedForDeletion)?_eventStaffAssignment:null);
				info.AddValue("_eventSurveyTemplate", ((_eventSurveyTemplate!=null) && (_eventSurveyTemplate.Count>0) && !this.MarkedForDeletion)?_eventSurveyTemplate:null);
				info.AddValue("_eventTaskDetails", ((_eventTaskDetails!=null) && (_eventTaskDetails.Count>0) && !this.MarkedForDeletion)?_eventTaskDetails:null);
				info.AddValue("_eventTest", ((_eventTest!=null) && (_eventTest.Count>0) && !this.MarkedForDeletion)?_eventTest:null);
				info.AddValue("_eventZip", ((_eventZip!=null) && (_eventZip.Count>0) && !this.MarkedForDeletion)?_eventZip:null);
				info.AddValue("_healthPlanFillEventCallQueue", ((_healthPlanFillEventCallQueue!=null) && (_healthPlanFillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_healthPlanFillEventCallQueue:null);
				info.AddValue("_hospitalPartnerCustomer", ((_hospitalPartnerCustomer!=null) && (_hospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_hospitalPartnerCustomer:null);
				info.AddValue("_hospitalPartnerEventNotes", ((_hospitalPartnerEventNotes!=null) && (_hospitalPartnerEventNotes.Count>0) && !this.MarkedForDeletion)?_hospitalPartnerEventNotes:null);
				info.AddValue("_hostEventDetails", ((_hostEventDetails!=null) && (_hostEventDetails.Count>0) && !this.MarkedForDeletion)?_hostEventDetails:null);
				info.AddValue("_hostPayment", ((_hostPayment!=null) && (_hostPayment.Count>0) && !this.MarkedForDeletion)?_hostPayment:null);
				info.AddValue("_marketingPrintOrderEventMapping", ((_marketingPrintOrderEventMapping!=null) && (_marketingPrintOrderEventMapping.Count>0) && !this.MarkedForDeletion)?_marketingPrintOrderEventMapping:null);
				info.AddValue("_physicianEventAssignment", ((_physicianEventAssignment!=null) && (_physicianEventAssignment.Count>0) && !this.MarkedForDeletion)?_physicianEventAssignment:null);
				info.AddValue("_physicianInvoiceItem", ((_physicianInvoiceItem!=null) && (_physicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianInvoiceItem:null);
				info.AddValue("_preQualificationResult", ((_preQualificationResult!=null) && (_preQualificationResult.Count>0) && !this.MarkedForDeletion)?_preQualificationResult:null);
				info.AddValue("_resultArchiveUpload", ((_resultArchiveUpload!=null) && (_resultArchiveUpload.Count>0) && !this.MarkedForDeletion)?_resultArchiveUpload:null);
				info.AddValue("_seminars", ((_seminars!=null) && (_seminars.Count>0) && !this.MarkedForDeletion)?_seminars:null);
				info.AddValue("_accountCollectionViaCallQueueCustomer", ((_accountCollectionViaCallQueueCustomer!=null) && (_accountCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaCallQueueCustomer:null);
				info.AddValue("_accountCollectionViaCustomEventNotification", ((_accountCollectionViaCustomEventNotification!=null) && (_accountCollectionViaCustomEventNotification.Count>0) && !this.MarkedForDeletion)?_accountCollectionViaCustomEventNotification:null);
				info.AddValue("_activityTypeCollectionViaCallQueueCustomer", ((_activityTypeCollectionViaCallQueueCustomer!=null) && (_activityTypeCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_activityTypeCollectionViaCallQueueCustomer:null);
				info.AddValue("_addressCollectionViaHostPayment", ((_addressCollectionViaHostPayment!=null) && (_addressCollectionViaHostPayment.Count>0) && !this.MarkedForDeletion)?_addressCollectionViaHostPayment:null);
				info.AddValue("_afaffiliateCampaignCollectionViaEventCustomers", ((_afaffiliateCampaignCollectionViaEventCustomers!=null) && (_afaffiliateCampaignCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_afaffiliateCampaignCollectionViaEventCustomers:null);
				info.AddValue("_affiliateProfileCollectionViaEventAffiliateDetails", ((_affiliateProfileCollectionViaEventAffiliateDetails!=null) && (_affiliateProfileCollectionViaEventAffiliateDetails.Count>0) && !this.MarkedForDeletion)?_affiliateProfileCollectionViaEventAffiliateDetails:null);
				info.AddValue("_afmarketingMaterialTypeCollectionViaAfmarketingMaterial", ((_afmarketingMaterialTypeCollectionViaAfmarketingMaterial!=null) && (_afmarketingMaterialTypeCollectionViaAfmarketingMaterial.Count>0) && !this.MarkedForDeletion)?_afmarketingMaterialTypeCollectionViaAfmarketingMaterial:null);
				info.AddValue("_callQueueCollectionViaCallQueueCustomer", ((_callQueueCollectionViaCallQueueCustomer!=null) && (_callQueueCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCollectionViaCallQueueCustomer:null);
				info.AddValue("_callQueueCriteriaCollectionViaCallQueueCustomer", ((_callQueueCriteriaCollectionViaCallQueueCustomer!=null) && (_callQueueCriteriaCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_callQueueCriteriaCollectionViaCallQueueCustomer:null);
				info.AddValue("_callsCollectionViaPreQualificationResult", ((_callsCollectionViaPreQualificationResult!=null) && (_callsCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_callsCollectionViaPreQualificationResult:null);
				info.AddValue("_campaignCollectionViaCallQueueCustomer", ((_campaignCollectionViaCallQueueCustomer!=null) && (_campaignCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_campaignCollectionViaCallQueueCustomer:null);
				info.AddValue("_campaignCollectionViaEventCustomers", ((_campaignCollectionViaEventCustomers!=null) && (_campaignCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_campaignCollectionViaEventCustomers:null);
				info.AddValue("_checkListTemplateCollectionViaEventChecklistTemplate", ((_checkListTemplateCollectionViaEventChecklistTemplate!=null) && (_checkListTemplateCollectionViaEventChecklistTemplate.Count>0) && !this.MarkedForDeletion)?_checkListTemplateCollectionViaEventChecklistTemplate:null);
				info.AddValue("_contactCallCollectionViaEventCallDetails", ((_contactCallCollectionViaEventCallDetails!=null) && (_contactCallCollectionViaEventCallDetails.Count>0) && !this.MarkedForDeletion)?_contactCallCollectionViaEventCallDetails:null);
				info.AddValue("_contactMeetingCollectionViaEventMeetingDetails", ((_contactMeetingCollectionViaEventMeetingDetails!=null) && (_contactMeetingCollectionViaEventMeetingDetails.Count>0) && !this.MarkedForDeletion)?_contactMeetingCollectionViaEventMeetingDetails:null);
				info.AddValue("_corporateUploadCollectionViaCustomerOrderHistory", ((_corporateUploadCollectionViaCustomerOrderHistory!=null) && (_corporateUploadCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_corporateUploadCollectionViaCustomerOrderHistory:null);
				info.AddValue("_couponsCollectionViaEventCoupons", ((_couponsCollectionViaEventCoupons!=null) && (_couponsCollectionViaEventCoupons.Count>0) && !this.MarkedForDeletion)?_couponsCollectionViaEventCoupons:null);
				info.AddValue("_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", ((_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer!=null) && (_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_customerProfileCollectionViaHospitalPartnerCustomer", ((_customerProfileCollectionViaHospitalPartnerCustomer!=null) && (_customerProfileCollectionViaHospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaHospitalPartnerCustomer:null);
				info.AddValue("_customerProfileCollectionViaEventCustomerQuestionAnswer", ((_customerProfileCollectionViaEventCustomerQuestionAnswer!=null) && (_customerProfileCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_customerProfileCollectionViaEventCustomerResult", ((_customerProfileCollectionViaEventCustomerResult!=null) && (_customerProfileCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaEventCustomerResult:null);
				info.AddValue("_customerProfileCollectionViaDependentDisqualifiedTest", ((_customerProfileCollectionViaDependentDisqualifiedTest!=null) && (_customerProfileCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_customerProfileCollectionViaPhysicianInvoiceItem", ((_customerProfileCollectionViaPhysicianInvoiceItem!=null) && (_customerProfileCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_customerProfileCollectionViaEventCustomers", ((_customerProfileCollectionViaEventCustomers!=null) && (_customerProfileCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaEventCustomers:null);
				info.AddValue("_customerProfileCollectionViaDisqualifiedTest", ((_customerProfileCollectionViaDisqualifiedTest!=null) && (_customerProfileCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaDisqualifiedTest:null);
				info.AddValue("_customerProfileCollectionViaCustomerEventTestFinding", ((_customerProfileCollectionViaCustomerEventTestFinding!=null) && (_customerProfileCollectionViaCustomerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaCustomerEventTestFinding:null);
				info.AddValue("_customerProfileCollectionViaCustomerOrderHistory", ((_customerProfileCollectionViaCustomerOrderHistory!=null) && (_customerProfileCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaCustomerOrderHistory:null);
				info.AddValue("_customerProfileCollectionViaPreQualificationResult", ((_customerProfileCollectionViaPreQualificationResult!=null) && (_customerProfileCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaPreQualificationResult:null);
				info.AddValue("_customerProfileCollectionViaCustomerClinicalQuestionAnswer", ((_customerProfileCollectionViaCustomerClinicalQuestionAnswer!=null) && (_customerProfileCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_customerProfileCollectionViaCallQueueCustomer", ((_customerProfileCollectionViaCallQueueCustomer!=null) && (_customerProfileCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_customerProfileCollectionViaCallQueueCustomer:null);
				info.AddValue("_customerProfileHistoryCollectionViaEventCustomers", ((_customerProfileHistoryCollectionViaEventCustomers!=null) && (_customerProfileHistoryCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_customerProfileHistoryCollectionViaEventCustomers:null);
				info.AddValue("_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog", ((_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog!=null) && (_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_customerRegistrationNotesCollectionViaEventCustomers", ((_customerRegistrationNotesCollectionViaEventCustomers!=null) && (_customerRegistrationNotesCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_customerRegistrationNotesCollectionViaEventCustomers:null);
				info.AddValue("_eventAppointmentCollectionViaEventCustomers", ((_eventAppointmentCollectionViaEventCustomers!=null) && (_eventAppointmentCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_eventAppointmentCollectionViaEventCustomers:null);
				info.AddValue("_eventCustomersCollectionViaEventAppointmentCancellationLog", ((_eventCustomersCollectionViaEventAppointmentCancellationLog!=null) && (_eventCustomersCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_eventCustomersCollectionViaCallQueueCustomer", ((_eventCustomersCollectionViaCallQueueCustomer!=null) && (_eventCustomersCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCallQueueCustomer:null);
				info.AddValue("_eventCustomersCollectionViaDisqualifiedTest", ((_eventCustomersCollectionViaDisqualifiedTest!=null) && (_eventCustomersCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaDisqualifiedTest:null);
				info.AddValue("_eventCustomersCollectionViaEventAppointmentChangeLog_", ((_eventCustomersCollectionViaEventAppointmentChangeLog_!=null) && (_eventCustomersCollectionViaEventAppointmentChangeLog_.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaEventAppointmentChangeLog_:null);
				info.AddValue("_eventCustomersCollectionViaEventCustomerQuestionAnswer", ((_eventCustomersCollectionViaEventCustomerQuestionAnswer!=null) && (_eventCustomersCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_eventCustomersCollectionViaCustomerOrderHistory", ((_eventCustomersCollectionViaCustomerOrderHistory!=null) && (_eventCustomersCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaCustomerOrderHistory:null);
				info.AddValue("_eventCustomersCollectionViaDependentDisqualifiedTest", ((_eventCustomersCollectionViaDependentDisqualifiedTest!=null) && (_eventCustomersCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_eventCustomersCollectionViaEventAppointmentChangeLog", ((_eventCustomersCollectionViaEventAppointmentChangeLog!=null) && (_eventCustomersCollectionViaEventAppointmentChangeLog.Count>0) && !this.MarkedForDeletion)?_eventCustomersCollectionViaEventAppointmentChangeLog:null);
				info.AddValue("_eventNoteCollectionViaEventNotesLog", ((_eventNoteCollectionViaEventNotesLog!=null) && (_eventNoteCollectionViaEventNotesLog.Count>0) && !this.MarkedForDeletion)?_eventNoteCollectionViaEventNotesLog:null);
				info.AddValue("_eventPackageDetailsCollectionViaCustomerOrderHistory", ((_eventPackageDetailsCollectionViaCustomerOrderHistory!=null) && (_eventPackageDetailsCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventPackageDetailsCollectionViaCustomerOrderHistory:null);
				info.AddValue("_eventPodRoomCollectionViaEventSchedulingSlot", ((_eventPodRoomCollectionViaEventSchedulingSlot!=null) && (_eventPodRoomCollectionViaEventSchedulingSlot.Count>0) && !this.MarkedForDeletion)?_eventPodRoomCollectionViaEventSchedulingSlot:null);
				info.AddValue("_eventTestCollectionViaCustomerOrderHistory", ((_eventTestCollectionViaCustomerOrderHistory!=null) && (_eventTestCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_eventTestCollectionViaCustomerOrderHistory:null);
				info.AddValue("_fileCollectionViaResultArchiveUpload", ((_fileCollectionViaResultArchiveUpload!=null) && (_fileCollectionViaResultArchiveUpload.Count>0) && !this.MarkedForDeletion)?_fileCollectionViaResultArchiveUpload:null);
				info.AddValue("_fluConsentTemplateCollectionViaEventFluConsentTemplate", ((_fluConsentTemplateCollectionViaEventFluConsentTemplate!=null) && (_fluConsentTemplateCollectionViaEventFluConsentTemplate.Count>0) && !this.MarkedForDeletion)?_fluConsentTemplateCollectionViaEventFluConsentTemplate:null);
				info.AddValue("_gcNotGivenReasonCollectionViaEventCustomers", ((_gcNotGivenReasonCollectionViaEventCustomers!=null) && (_gcNotGivenReasonCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_gcNotGivenReasonCollectionViaEventCustomers:null);
				info.AddValue("_hafTemplateCollectionViaEventPackageDetails", ((_hafTemplateCollectionViaEventPackageDetails!=null) && (_hafTemplateCollectionViaEventPackageDetails.Count>0) && !this.MarkedForDeletion)?_hafTemplateCollectionViaEventPackageDetails:null);
				info.AddValue("_hafTemplateCollectionViaEventTest", ((_hafTemplateCollectionViaEventTest!=null) && (_hafTemplateCollectionViaEventTest.Count>0) && !this.MarkedForDeletion)?_hafTemplateCollectionViaEventTest:null);
				info.AddValue("_hafTemplateCollectionViaCustomerClinicalQuestionAnswer", ((_hafTemplateCollectionViaCustomerClinicalQuestionAnswer!=null) && (_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_hafTemplateCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue", ((_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue!=null) && (_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.Count>0) && !this.MarkedForDeletion)?_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue:null);
				info.AddValue("_hospitalFacilityCollectionViaEventHospitalFacility", ((_hospitalFacilityCollectionViaEventHospitalFacility!=null) && (_hospitalFacilityCollectionViaEventHospitalFacility.Count>0) && !this.MarkedForDeletion)?_hospitalFacilityCollectionViaEventHospitalFacility:null);
				info.AddValue("_hospitalFacilityCollectionViaEventCustomers", ((_hospitalFacilityCollectionViaEventCustomers!=null) && (_hospitalFacilityCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_hospitalFacilityCollectionViaEventCustomers:null);
				info.AddValue("_hospitalPartnerCollectionViaEventHospitalPartner", ((_hospitalPartnerCollectionViaEventHospitalPartner!=null) && (_hospitalPartnerCollectionViaEventHospitalPartner.Count>0) && !this.MarkedForDeletion)?_hospitalPartnerCollectionViaEventHospitalPartner:null);
				info.AddValue("_languageCollectionViaCallQueueCustomer", ((_languageCollectionViaCallQueueCustomer!=null) && (_languageCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_languageCollectionViaCallQueueCustomer:null);
				info.AddValue("_lookupCollectionViaEventSchedulingSlot", ((_lookupCollectionViaEventSchedulingSlot!=null) && (_lookupCollectionViaEventSchedulingSlot.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventSchedulingSlot:null);
				info.AddValue("_lookupCollectionViaEventPackageDetails", ((_lookupCollectionViaEventPackageDetails!=null) && (_lookupCollectionViaEventPackageDetails.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventPackageDetails:null);
				info.AddValue("_lookupCollectionViaEventTest", ((_lookupCollectionViaEventTest!=null) && (_lookupCollectionViaEventTest.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventTest:null);
				info.AddValue("_lookupCollectionViaEventCustomers", ((_lookupCollectionViaEventCustomers!=null) && (_lookupCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomers:null);
				info.AddValue("_lookupCollectionViaEventCustomerResult", ((_lookupCollectionViaEventCustomerResult!=null) && (_lookupCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomerResult:null);
				info.AddValue("_lookupCollectionViaEventCustomers_", ((_lookupCollectionViaEventCustomers_!=null) && (_lookupCollectionViaEventCustomers_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventCustomers_:null);
				info.AddValue("_lookupCollectionViaEventTest__", ((_lookupCollectionViaEventTest__!=null) && (_lookupCollectionViaEventTest__.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventTest__:null);
				info.AddValue("_lookupCollectionViaEventTest_", ((_lookupCollectionViaEventTest_!=null) && (_lookupCollectionViaEventTest_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventTest_:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_____", ((_lookupCollectionViaPreQualificationResult_____!=null) && (_lookupCollectionViaPreQualificationResult_____.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_____:null);
				info.AddValue("_lookupCollectionViaCustomEventNotification", ((_lookupCollectionViaCustomEventNotification!=null) && (_lookupCollectionViaCustomEventNotification.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomEventNotification:null);
				info.AddValue("_lookupCollectionViaCustomerRegistrationNotes", ((_lookupCollectionViaCustomerRegistrationNotes!=null) && (_lookupCollectionViaCustomerRegistrationNotes.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerRegistrationNotes:null);
				info.AddValue("_lookupCollectionViaHostPayment_", ((_lookupCollectionViaHostPayment_!=null) && (_lookupCollectionViaHostPayment_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaHostPayment_:null);
				info.AddValue("_lookupCollectionViaCustomerOrderHistory", ((_lookupCollectionViaCustomerOrderHistory!=null) && (_lookupCollectionViaCustomerOrderHistory.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCustomerOrderHistory:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult__", ((_lookupCollectionViaPreQualificationResult__!=null) && (_lookupCollectionViaPreQualificationResult__.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult__:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult___", ((_lookupCollectionViaPreQualificationResult___!=null) && (_lookupCollectionViaPreQualificationResult___.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult___:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_", ((_lookupCollectionViaPreQualificationResult_!=null) && (_lookupCollectionViaPreQualificationResult_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult____", ((_lookupCollectionViaPreQualificationResult____!=null) && (_lookupCollectionViaPreQualificationResult____.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult____:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult", ((_lookupCollectionViaPreQualificationResult!=null) && (_lookupCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult:null);
				info.AddValue("_lookupCollectionViaEventAppointmentChangeLog_", ((_lookupCollectionViaEventAppointmentChangeLog_!=null) && (_lookupCollectionViaEventAppointmentChangeLog_.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventAppointmentChangeLog_:null);
				info.AddValue("_lookupCollectionViaHostPayment", ((_lookupCollectionViaHostPayment!=null) && (_lookupCollectionViaHostPayment.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaHostPayment:null);
				info.AddValue("_lookupCollectionViaCallQueueCustomer", ((_lookupCollectionViaCallQueueCustomer!=null) && (_lookupCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaCallQueueCustomer:null);
				info.AddValue("_lookupCollectionViaEventAppointmentChangeLog", ((_lookupCollectionViaEventAppointmentChangeLog!=null) && (_lookupCollectionViaEventAppointmentChangeLog.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventAppointmentChangeLog:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult_______", ((_lookupCollectionViaPreQualificationResult_______!=null) && (_lookupCollectionViaPreQualificationResult_______.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult_______:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult______", ((_lookupCollectionViaPreQualificationResult______!=null) && (_lookupCollectionViaPreQualificationResult______.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult______:null);
				info.AddValue("_lookupCollectionViaEventAppointmentCancellationLog", ((_lookupCollectionViaEventAppointmentCancellationLog!=null) && (_lookupCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_lookupCollectionViaPreQualificationResult________", ((_lookupCollectionViaPreQualificationResult________!=null) && (_lookupCollectionViaPreQualificationResult________.Count>0) && !this.MarkedForDeletion)?_lookupCollectionViaPreQualificationResult________:null);
				info.AddValue("_marketingOffersCollectionViaEventMarketingOffers", ((_marketingOffersCollectionViaEventMarketingOffers!=null) && (_marketingOffersCollectionViaEventMarketingOffers.Count>0) && !this.MarkedForDeletion)?_marketingOffersCollectionViaEventMarketingOffers:null);
				info.AddValue("_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping", ((_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping!=null) && (_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.Count>0) && !this.MarkedForDeletion)?_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping:null);
				info.AddValue("_notesDetailsCollectionViaCallQueueCustomer", ((_notesDetailsCollectionViaCallQueueCustomer!=null) && (_notesDetailsCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_notesDetailsCollectionViaCallQueueCustomer:null);
				info.AddValue("_notificationCollectionViaEventNotification", ((_notificationCollectionViaEventNotification!=null) && (_notificationCollectionViaEventNotification.Count>0) && !this.MarkedForDeletion)?_notificationCollectionViaEventNotification:null);
				info.AddValue("_organizationCollectionViaEventAccountTestHcpcsCode", ((_organizationCollectionViaEventAccountTestHcpcsCode!=null) && (_organizationCollectionViaEventAccountTestHcpcsCode.Count>0) && !this.MarkedForDeletion)?_organizationCollectionViaEventAccountTestHcpcsCode:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer__", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer__!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer__:null);
				info.AddValue("_organizationRoleUserCollectionViaSeminars", ((_organizationRoleUserCollectionViaSeminars!=null) && (_organizationRoleUserCollectionViaSeminars.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaSeminars:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer_", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer_!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventStaffAssignment_", ((_organizationRoleUserCollectionViaEventStaffAssignment_!=null) && (_organizationRoleUserCollectionViaEventStaffAssignment_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventStaffAssignment_:null);
				info.AddValue("_organizationRoleUserCollectionViaHospitalPartnerCustomer", ((_organizationRoleUserCollectionViaHospitalPartnerCustomer!=null) && (_organizationRoleUserCollectionViaHospitalPartnerCustomer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHospitalPartnerCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaEventStaffAssignment__", ((_organizationRoleUserCollectionViaEventStaffAssignment__!=null) && (_organizationRoleUserCollectionViaEventStaffAssignment__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventStaffAssignment__:null);
				info.AddValue("_organizationRoleUserCollectionViaEventPhysicianTest__", ((_organizationRoleUserCollectionViaEventPhysicianTest__!=null) && (_organizationRoleUserCollectionViaEventPhysicianTest__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventPhysicianTest__:null);
				info.AddValue("_organizationRoleUserCollectionViaEventPhysicianTest_", ((_organizationRoleUserCollectionViaEventPhysicianTest_!=null) && (_organizationRoleUserCollectionViaEventPhysicianTest_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventPhysicianTest_:null);
				info.AddValue("_organizationRoleUserCollectionViaHostPayment", ((_organizationRoleUserCollectionViaHostPayment!=null) && (_organizationRoleUserCollectionViaHostPayment.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaHostPayment:null);
				info.AddValue("_organizationRoleUserCollectionViaEventPhysicianTest", ((_organizationRoleUserCollectionViaEventPhysicianTest!=null) && (_organizationRoleUserCollectionViaEventPhysicianTest.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventPhysicianTest:null);
				info.AddValue("_organizationRoleUserCollectionViaEventStaffAssignment", ((_organizationRoleUserCollectionViaEventStaffAssignment!=null) && (_organizationRoleUserCollectionViaEventStaffAssignment.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventStaffAssignment:null);
				info.AddValue("_organizationRoleUserCollectionViaEventAppointmentCancellationLog", ((_organizationRoleUserCollectionViaEventAppointmentCancellationLog!=null) && (_organizationRoleUserCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_organizationRoleUserCollectionViaEventAppointmentChangeLog", ((_organizationRoleUserCollectionViaEventAppointmentChangeLog!=null) && (_organizationRoleUserCollectionViaEventAppointmentChangeLog.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventAppointmentChangeLog:null);
				info.AddValue("_organizationRoleUserCollectionViaEventAccountTestHcpcsCode", ((_organizationRoleUserCollectionViaEventAccountTestHcpcsCode!=null) && (_organizationRoleUserCollectionViaEventAccountTestHcpcsCode.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventAccountTestHcpcsCode:null);
				info.AddValue("_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_", ((_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_!=null) && (_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_", ((_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_!=null) && (_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult", ((_organizationRoleUserCollectionViaEventCustomerResult!=null) && (_organizationRoleUserCollectionViaEventCustomerResult.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult:null);
				info.AddValue("_organizationRoleUserCollectionViaEventAppointmentChangeLog_", ((_organizationRoleUserCollectionViaEventAppointmentChangeLog_!=null) && (_organizationRoleUserCollectionViaEventAppointmentChangeLog_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventAppointmentChangeLog_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerQuestionAnswer", ((_organizationRoleUserCollectionViaEventCustomerQuestionAnswer!=null) && (_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_organizationRoleUserCollectionViaDisqualifiedTest_", ((_organizationRoleUserCollectionViaDisqualifiedTest_!=null) && (_organizationRoleUserCollectionViaDisqualifiedTest_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaDisqualifiedTest_:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer__", ((_organizationRoleUserCollectionViaCallQueueCustomer__!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer__:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", ((_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer!=null) && (_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer", ((_organizationRoleUserCollectionViaCallQueueCustomer!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer:null);
				info.AddValue("_organizationRoleUserCollectionViaCallQueueCustomer_", ((_organizationRoleUserCollectionViaCallQueueCustomer_!=null) && (_organizationRoleUserCollectionViaCallQueueCustomer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCallQueueCustomer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomEventNotification", ((_organizationRoleUserCollectionViaCustomEventNotification!=null) && (_organizationRoleUserCollectionViaCustomEventNotification.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomEventNotification:null);
				info.AddValue("_organizationRoleUserCollectionViaDisqualifiedTest", ((_organizationRoleUserCollectionViaDisqualifiedTest!=null) && (_organizationRoleUserCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaDisqualifiedTest:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", ((_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_!=null) && (_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_:null);
				info.AddValue("_organizationRoleUserCollectionViaCustomerRegistrationNotes", ((_organizationRoleUserCollectionViaCustomerRegistrationNotes!=null) && (_organizationRoleUserCollectionViaCustomerRegistrationNotes.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaCustomerRegistrationNotes:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_____", ((_organizationRoleUserCollectionViaEventCustomerResult_____!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_____.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_____:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult________", ((_organizationRoleUserCollectionViaEventCustomerResult________!=null) && (_organizationRoleUserCollectionViaEventCustomerResult________.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult________:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult___", ((_organizationRoleUserCollectionViaEventCustomerResult___!=null) && (_organizationRoleUserCollectionViaEventCustomerResult___.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult___:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult__", ((_organizationRoleUserCollectionViaEventCustomerResult__!=null) && (_organizationRoleUserCollectionViaEventCustomerResult__.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult__:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult______", ((_organizationRoleUserCollectionViaEventCustomerResult______!=null) && (_organizationRoleUserCollectionViaEventCustomerResult______.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult______:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult____", ((_organizationRoleUserCollectionViaEventCustomerResult____!=null) && (_organizationRoleUserCollectionViaEventCustomerResult____.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult____:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomers", ((_organizationRoleUserCollectionViaEventCustomers!=null) && (_organizationRoleUserCollectionViaEventCustomers.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomers:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomers_", ((_organizationRoleUserCollectionViaEventCustomers_!=null) && (_organizationRoleUserCollectionViaEventCustomers_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomers_:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_______", ((_organizationRoleUserCollectionViaEventCustomerResult_______!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_______.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_______:null);
				info.AddValue("_organizationRoleUserCollectionViaEventCustomerResult_", ((_organizationRoleUserCollectionViaEventCustomerResult_!=null) && (_organizationRoleUserCollectionViaEventCustomerResult_.Count>0) && !this.MarkedForDeletion)?_organizationRoleUserCollectionViaEventCustomerResult_:null);
				info.AddValue("_packageCollectionViaEventPackageDetails", ((_packageCollectionViaEventPackageDetails!=null) && (_packageCollectionViaEventPackageDetails.Count>0) && !this.MarkedForDeletion)?_packageCollectionViaEventPackageDetails:null);
				info.AddValue("_physicianEvaluationCollectionViaPhysicianInvoiceItem", ((_physicianEvaluationCollectionViaPhysicianInvoiceItem!=null) && (_physicianEvaluationCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianEvaluationCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_physicianInvoiceCollectionViaPhysicianInvoiceItem", ((_physicianInvoiceCollectionViaPhysicianInvoiceItem!=null) && (_physicianInvoiceCollectionViaPhysicianInvoiceItem.Count>0) && !this.MarkedForDeletion)?_physicianInvoiceCollectionViaPhysicianInvoiceItem:null);
				info.AddValue("_physicianProfileCollectionViaPhysicianEventAssignment", ((_physicianProfileCollectionViaPhysicianEventAssignment!=null) && (_physicianProfileCollectionViaPhysicianEventAssignment.Count>0) && !this.MarkedForDeletion)?_physicianProfileCollectionViaPhysicianEventAssignment:null);
				info.AddValue("_physicianProfileCollectionViaPhysicianEventAssignment_", ((_physicianProfileCollectionViaPhysicianEventAssignment_!=null) && (_physicianProfileCollectionViaPhysicianEventAssignment_.Count>0) && !this.MarkedForDeletion)?_physicianProfileCollectionViaPhysicianEventAssignment_:null);
				info.AddValue("_podDetailsCollectionViaEventStaffAssignment", ((_podDetailsCollectionViaEventStaffAssignment!=null) && (_podDetailsCollectionViaEventStaffAssignment.Count>0) && !this.MarkedForDeletion)?_podDetailsCollectionViaEventStaffAssignment:null);
				info.AddValue("_podDetailsCollectionViaEventPod", ((_podDetailsCollectionViaEventPod!=null) && (_podDetailsCollectionViaEventPod.Count>0) && !this.MarkedForDeletion)?_podDetailsCollectionViaEventPod:null);
				info.AddValue("_podRoomCollectionViaEventPackageDetails", ((_podRoomCollectionViaEventPackageDetails!=null) && (_podRoomCollectionViaEventPackageDetails.Count>0) && !this.MarkedForDeletion)?_podRoomCollectionViaEventPackageDetails:null);
				info.AddValue("_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer", ((_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer!=null) && (_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.Count>0) && !this.MarkedForDeletion)?_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer:null);
				info.AddValue("_preQualificationQuestionCollectionViaDisqualifiedTest", ((_preQualificationQuestionCollectionViaDisqualifiedTest!=null) && (_preQualificationQuestionCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_preQualificationQuestionCollectionViaDisqualifiedTest:null);
				info.AddValue("_preQualificationTestTemplateCollectionViaEventTest", ((_preQualificationTestTemplateCollectionViaEventTest!=null) && (_preQualificationTestTemplateCollectionViaEventTest.Count>0) && !this.MarkedForDeletion)?_preQualificationTestTemplateCollectionViaEventTest:null);
				info.AddValue("_productCollectionViaEventProductExclusion", ((_productCollectionViaEventProductExclusion!=null) && (_productCollectionViaEventProductExclusion.Count>0) && !this.MarkedForDeletion)?_productCollectionViaEventProductExclusion:null);
				info.AddValue("_prospectCustomerCollectionViaCallQueueCustomer", ((_prospectCustomerCollectionViaCallQueueCustomer!=null) && (_prospectCustomerCollectionViaCallQueueCustomer.Count>0) && !this.MarkedForDeletion)?_prospectCustomerCollectionViaCallQueueCustomer:null);
				info.AddValue("_prospectsCollectionViaHostPayment", ((_prospectsCollectionViaHostPayment!=null) && (_prospectsCollectionViaHostPayment.Count>0) && !this.MarkedForDeletion)?_prospectsCollectionViaHostPayment:null);
				info.AddValue("_prospectsCollectionViaHostEventDetails", ((_prospectsCollectionViaHostEventDetails!=null) && (_prospectsCollectionViaHostEventDetails.Count>0) && !this.MarkedForDeletion)?_prospectsCollectionViaHostEventDetails:null);
				info.AddValue("_refundRequestCollectionViaEventAppointmentCancellationLog", ((_refundRequestCollectionViaEventAppointmentCancellationLog!=null) && (_refundRequestCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_refundRequestCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog", ((_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog!=null) && (_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.Count>0) && !this.MarkedForDeletion)?_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog:null);
				info.AddValue("_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog", ((_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog!=null) && (_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.Count>0) && !this.MarkedForDeletion)?_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog:null);
				info.AddValue("_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_", ((_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_!=null) && (_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.Count>0) && !this.MarkedForDeletion)?_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_:null);
				info.AddValue("_scheduleTemplateCollectionViaEventScheduleTemplate", ((_scheduleTemplateCollectionViaEventScheduleTemplate!=null) && (_scheduleTemplateCollectionViaEventScheduleTemplate.Count>0) && !this.MarkedForDeletion)?_scheduleTemplateCollectionViaEventScheduleTemplate:null);
				info.AddValue("_staffEventRoleCollectionViaEventStaffAssignment", ((_staffEventRoleCollectionViaEventStaffAssignment!=null) && (_staffEventRoleCollectionViaEventStaffAssignment.Count>0) && !this.MarkedForDeletion)?_staffEventRoleCollectionViaEventStaffAssignment:null);
				info.AddValue("_surveyTemplateCollectionViaEventSurveyTemplate", ((_surveyTemplateCollectionViaEventSurveyTemplate!=null) && (_surveyTemplateCollectionViaEventSurveyTemplate.Count>0) && !this.MarkedForDeletion)?_surveyTemplateCollectionViaEventSurveyTemplate:null);
				info.AddValue("_taskDetailsCollectionViaEventTaskDetails", ((_taskDetailsCollectionViaEventTaskDetails!=null) && (_taskDetailsCollectionViaEventTaskDetails.Count>0) && !this.MarkedForDeletion)?_taskDetailsCollectionViaEventTaskDetails:null);
				info.AddValue("_tempCartCollectionViaPreQualificationResult", ((_tempCartCollectionViaPreQualificationResult!=null) && (_tempCartCollectionViaPreQualificationResult.Count>0) && !this.MarkedForDeletion)?_tempCartCollectionViaPreQualificationResult:null);
				info.AddValue("_territoryCollectionViaEventPod", ((_territoryCollectionViaEventPod!=null) && (_territoryCollectionViaEventPod.Count>0) && !this.MarkedForDeletion)?_territoryCollectionViaEventPod:null);
				info.AddValue("_testCollectionViaEventPhysicianTest", ((_testCollectionViaEventPhysicianTest!=null) && (_testCollectionViaEventPhysicianTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaEventPhysicianTest:null);
				info.AddValue("_testCollectionViaDisqualifiedTest", ((_testCollectionViaDisqualifiedTest!=null) && (_testCollectionViaDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaDisqualifiedTest:null);
				info.AddValue("_testCollectionViaEventTest", ((_testCollectionViaEventTest!=null) && (_testCollectionViaEventTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaEventTest:null);
				info.AddValue("_testCollectionViaCustomerEventTestFinding", ((_testCollectionViaCustomerEventTestFinding!=null) && (_testCollectionViaCustomerEventTestFinding.Count>0) && !this.MarkedForDeletion)?_testCollectionViaCustomerEventTestFinding:null);
				info.AddValue("_testCollectionViaDependentDisqualifiedTest", ((_testCollectionViaDependentDisqualifiedTest!=null) && (_testCollectionViaDependentDisqualifiedTest.Count>0) && !this.MarkedForDeletion)?_testCollectionViaDependentDisqualifiedTest:null);
				info.AddValue("_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode", ((_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode!=null) && (_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode.Count>0) && !this.MarkedForDeletion)?_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode:null);
				info.AddValue("_zipCollectionViaEventZip", ((_zipCollectionViaEventZip!=null) && (_zipCollectionViaEventZip.Count>0) && !this.MarkedForDeletion)?_zipCollectionViaEventZip:null);
				info.AddValue("_communicationMode", (!this.MarkedForDeletion?_communicationMode:null));
				info.AddValue("_eventType", (!this.MarkedForDeletion?_eventType:null));
				info.AddValue("_hafTemplate", (!this.MarkedForDeletion?_hafTemplate:null));
				info.AddValue("_lookup", (!this.MarkedForDeletion?_lookup:null));
				info.AddValue("_lookup____", (!this.MarkedForDeletion?_lookup____:null));
				info.AddValue("_lookup___", (!this.MarkedForDeletion?_lookup___:null));
				info.AddValue("_lookup__", (!this.MarkedForDeletion?_lookup__:null));
				info.AddValue("_lookup_", (!this.MarkedForDeletion?_lookup_:null));
				info.AddValue("_notesDetails", (!this.MarkedForDeletion?_notesDetails:null));
				info.AddValue("_organizationRoleUser_", (!this.MarkedForDeletion?_organizationRoleUser_:null));
				info.AddValue("_organizationRoleUser____", (!this.MarkedForDeletion?_organizationRoleUser____:null));
				info.AddValue("_organizationRoleUser__", (!this.MarkedForDeletion?_organizationRoleUser__:null));
				info.AddValue("_organizationRoleUser", (!this.MarkedForDeletion?_organizationRoleUser:null));
				info.AddValue("_organizationRoleUser___", (!this.MarkedForDeletion?_organizationRoleUser___:null));
				info.AddValue("_scheduleMethod", (!this.MarkedForDeletion?_scheduleMethod:null));
				info.AddValue("_eventAccount", (!this.MarkedForDeletion?_eventAccount:null));
			}
			
			// __LLBLGENPRO_USER_CODE_REGION_START GetObjectInfo
			// __LLBLGENPRO_USER_CODE_REGION_END
			base.GetObjectData(info, context);
		}

		/// <summary>Returns true if the original value for the field with the fieldIndex passed in, read from the persistent storage was NULL, false otherwise.
		/// Should not be used for testing if the current value is NULL, use <see cref="TestCurrentFieldValueForNull"/> for that.</summary>
		/// <param name="fieldIndex">Index of the field to test if that field was NULL in the persistent storage</param>
		/// <returns>true if the field with the passed in index was NULL in the persistent storage, false otherwise</returns>
		public bool TestOriginalFieldValueForNull(EventsFieldIndex fieldIndex)
		{
			return base.Fields[(int)fieldIndex].IsNull;
		}
		
		/// <summary>Returns true if the current value for the field with the fieldIndex passed in represents null/not defined, false otherwise.
		/// Should not be used for testing if the original value (read from the db) is NULL</summary>
		/// <param name="fieldIndex">Index of the field to test if its currentvalue is null/undefined</param>
		/// <returns>true if the field's value isn't defined yet, false otherwise</returns>
		public bool TestCurrentFieldValueForNull(EventsFieldIndex fieldIndex)
		{
			return base.CheckIfCurrentFieldValueIsNull((int)fieldIndex);
		}

				
		/// <summary>Gets a list of all the EntityRelation objects the type of this instance has.</summary>
		/// <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
		public override List<IEntityRelation> GetAllRelations()
		{
			return new EventsRelations().GetAllRelations();
		}
		

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AfmarketingMaterial' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfmarketingMaterial()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(AfmarketingMaterialFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CallDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueueCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CallQueueCustomerFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerClinicalQuestionAnswer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerClinicalQuestionAnswerFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerEventTestFinding' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerEventTestFindingFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerOrderHistory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerOrderHistoryFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerRegistrationNotes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerRegistrationNotes()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomerRegistrationNotesFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomEventNotification' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CustomEventNotificationFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DependentDisqualifiedTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(DependentDisqualifiedTestFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'DisqualifiedTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(DisqualifiedTestFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAccountTestHcpcsCode' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAccountTestHcpcsCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAccountTestHcpcsCodeFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAffiliateDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAffiliateDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAffiliateDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAppointmentCancellationLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAppointmentCancellationLogFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAppointmentChangeLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAppointmentChangeLog_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAppointmentChangeLogFields.OldEventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAppointmentChangeLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAppointmentChangeLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAppointmentChangeLogFields.NewEventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCallDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCallDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCallDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventChecklistTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventChecklistTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventChecklistTemplateFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCoupons' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCoupons()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCouponsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomerQuestionAnswer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomerQuestionAnswerFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomerResult' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomerResultFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventCustomersFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventFluConsentTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventFluConsentTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventFluConsentTemplateFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventHospitalFacility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventHospitalFacility()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventHospitalFacilityFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventHospitalPartner' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventHospitalPartner()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventHospitalPartnerFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventHostPromotions' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventHostPromotions()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventHostPromotionsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventMarketingOffers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventMarketingOffers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventMarketingOffersFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventMeetingDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventMeetingDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventMeetingDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventNotesLog' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventNotesLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventNotesLogFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventNotification' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventNotificationFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPackageDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPackageDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventPackageDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPhysicianTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPhysicianTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventPhysicianTestFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPod' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPod()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventPodFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventProductExclusion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventProductExclusion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventProductExclusionFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventProductType' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventProductType()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventProductTypeFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPublication' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPublication()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventPublicationFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventScheduleTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventScheduleTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventScheduleTemplateFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventSchedulingSlot' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventSchedulingSlot()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventSchedulingSlotFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventStaffAssignment' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventStaffAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventStaffAssignmentFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventSurveyTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventSurveyTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventSurveyTemplateFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventTaskDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventTaskDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventTaskDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventTestFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventZip' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventZip()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventZipFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HealthPlanFillEventCallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHealthPlanFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HealthPlanFillEventCallQueueFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalPartnerCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HospitalPartnerCustomerFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalPartnerEventNotes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalPartnerEventNotes()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HospitalPartnerEventNotesFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HostEventDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHostEventDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HostEventDetailsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HostPayment' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHostPayment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HostPaymentFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'MarketingPrintOrderEventMapping' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMarketingPrintOrderEventMapping()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(MarketingPrintOrderEventMappingFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianEventAssignment' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianEventAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PhysicianEventAssignmentFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianInvoiceItem' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PhysicianInvoiceItemFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationResult' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(PreQualificationResultFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ResultArchiveUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoResultArchiveUpload()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ResultArchiveUploadFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Seminars' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSeminars()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(SeminarsFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Account' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAccountCollectionViaCustomEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AccountCollectionViaCustomEventNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ActivityType' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoActivityTypeCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ActivityTypeCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Address' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddressCollectionViaHostPayment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AddressCollectionViaHostPayment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AfaffiliateCampaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfaffiliateCampaignCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AfaffiliateCampaignCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AffiliateProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAffiliateProfileCollectionViaEventAffiliateDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AffiliateProfileCollectionViaEventAffiliateDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'AfmarketingMaterialType' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAfmarketingMaterialTypeCollectionViaAfmarketingMaterial()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("AfmarketingMaterialTypeCollectionViaAfmarketingMaterial"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueue' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallQueueCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CallQueueCriteria' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallQueueCriteriaCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallQueueCriteriaCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Calls' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCallsCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CallsCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Campaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCampaignCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CampaignCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Campaign' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCampaignCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CampaignCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CheckListTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCheckListTemplateCollectionViaEventChecklistTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CheckListTemplateCollectionViaEventChecklistTemplate"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ContactCall' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContactCallCollectionViaEventCallDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ContactCallCollectionViaEventCallDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ContactMeeting' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContactMeetingCollectionViaEventMeetingDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ContactMeetingCollectionViaEventMeetingDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CorporateUpload' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCorporateUploadCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CorporateUploadCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Coupons' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCouponsCollectionViaEventCoupons()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CouponsCollectionViaEventCoupons"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerHealthQuestions' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaHospitalPartnerCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaCustomerEventTestFinding"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerProfileHistory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerProfileHistoryCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerProfileHistoryCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerRegistrationNotes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'CustomerRegistrationNotes' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerRegistrationNotesCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("CustomerRegistrationNotesCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventAppointment' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAppointmentCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventAppointmentCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaEventAppointmentChangeLog_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaEventAppointmentChangeLog_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventCustomers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventCustomersCollectionViaEventAppointmentChangeLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventCustomersCollectionViaEventAppointmentChangeLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventNote' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventNoteCollectionViaEventNotesLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventNoteCollectionViaEventNotesLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPackageDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPackageDetailsCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventPackageDetailsCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventPodRoom' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventPodRoomCollectionViaEventSchedulingSlot()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventPodRoomCollectionViaEventSchedulingSlot"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'EventTest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventTestCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("EventTestCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'File' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFileCollectionViaResultArchiveUpload()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("FileCollectionViaResultArchiveUpload"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'FluConsentTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoFluConsentTemplateCollectionViaEventFluConsentTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("FluConsentTemplateCollectionViaEventFluConsentTemplate"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'GcNotGivenReason' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGcNotGivenReasonCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("GcNotGivenReasonCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HafTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHafTemplateCollectionViaEventPackageDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HafTemplateCollectionViaEventPackageDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HafTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHafTemplateCollectionViaEventTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HafTemplateCollectionViaEventTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HafTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHafTemplateCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HafTemplateCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HealthPlanCallQueueCriteria' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalFacility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalFacilityCollectionViaEventHospitalFacility()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HospitalFacilityCollectionViaEventHospitalFacility"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalFacility' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalFacilityCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HospitalFacilityCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'HospitalPartner' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHospitalPartnerCollectionViaEventHospitalPartner()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("HospitalPartnerCollectionViaEventHospitalPartner"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Language' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLanguageCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LanguageCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventSchedulingSlot()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventSchedulingSlot"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventPackageDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventPackageDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventCustomers_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventCustomers_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventTest__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventTest__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventTest_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventTest_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomEventNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerRegistrationNotes()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerRegistrationNotes"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaHostPayment_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaHostPayment_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCustomerOrderHistory()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCustomerOrderHistory"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult___"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventAppointmentChangeLog_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventAppointmentChangeLog_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaHostPayment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaHostPayment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventAppointmentChangeLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventAppointmentChangeLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult_______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult_______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Lookup' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookupCollectionViaPreQualificationResult________()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("LookupCollectionViaPreQualificationResult________"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'MarketingOffers' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMarketingOffersCollectionViaEventMarketingOffers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("MarketingOffersCollectionViaEventMarketingOffers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'MarketingPrintOrder' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'NotesDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNotesDetailsCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("NotesDetailsCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Notification' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNotificationCollectionViaEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("NotificationCollectionViaEventNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Organization' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationCollectionViaEventAccountTestHcpcsCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationCollectionViaEventAccountTestHcpcsCode"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaSeminars()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaSeminars"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventStaffAssignment_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventStaffAssignment_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHospitalPartnerCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHospitalPartnerCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventStaffAssignment__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventStaffAssignment__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventPhysicianTest__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventPhysicianTest__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventPhysicianTest_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventPhysicianTest_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaHostPayment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaHostPayment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventPhysicianTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventPhysicianTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventStaffAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventStaffAssignment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventAppointmentChangeLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventAppointmentChangeLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventAccountTestHcpcsCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventAppointmentChangeLog_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventAppointmentChangeLog_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaDisqualifiedTest_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaDisqualifiedTest_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCallQueueCustomer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCallQueueCustomer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomEventNotification()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomEventNotification"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaCustomerRegistrationNotes()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaCustomerRegistrationNotes"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult________()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult________"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult___"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult__"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult____"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomers()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomers"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomers_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomers_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_______()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_______"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUserCollectionViaEventCustomerResult_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("OrganizationRoleUserCollectionViaEventCustomerResult_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Package' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPackageCollectionViaEventPackageDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PackageCollectionViaEventPackageDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianEvaluation' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianEvaluationCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianEvaluationCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianInvoice' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianInvoiceCollectionViaPhysicianInvoiceItem()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianInvoiceCollectionViaPhysicianInvoiceItem"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianProfileCollectionViaPhysicianEventAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianProfileCollectionViaPhysicianEventAssignment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PhysicianProfile' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPhysicianProfileCollectionViaPhysicianEventAssignment_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PhysicianProfileCollectionViaPhysicianEventAssignment_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PodDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPodDetailsCollectionViaEventStaffAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PodDetailsCollectionViaEventStaffAssignment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PodDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPodDetailsCollectionViaEventPod()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PodDetailsCollectionViaEventPod"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PodRoom' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPodRoomCollectionViaEventPackageDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PodRoomCollectionViaEventPackageDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationQuestion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationQuestionCollectionViaEventCustomerQuestionAnswer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationQuestion' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationQuestionCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PreQualificationQuestionCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'PreQualificationTestTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreQualificationTestTemplateCollectionViaEventTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("PreQualificationTestTemplateCollectionViaEventTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Product' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductCollectionViaEventProductExclusion()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProductCollectionViaEventProductExclusion"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ProspectCustomer' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectCustomerCollectionViaCallQueueCustomer()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectCustomerCollectionViaCallQueueCustomer"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Prospects' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectsCollectionViaHostPayment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectsCollectionViaHostPayment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Prospects' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProspectsCollectionViaHostEventDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ProspectsCollectionViaHostEventDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RefundRequest' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRefundRequestCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RefundRequestCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RescheduleCancelDisposition' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRescheduleCancelDispositionCollectionViaEventAppointmentChangeLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RescheduleCancelDisposition' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'RescheduleCancelDisposition' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'ScheduleTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoScheduleTemplateCollectionViaEventScheduleTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ScheduleTemplateCollectionViaEventScheduleTemplate"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'StaffEventRole' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStaffEventRoleCollectionViaEventStaffAssignment()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("StaffEventRoleCollectionViaEventStaffAssignment"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'SurveyTemplate' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSurveyTemplateCollectionViaEventSurveyTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("SurveyTemplateCollectionViaEventSurveyTemplate"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'TaskDetails' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTaskDetailsCollectionViaEventTaskDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TaskDetailsCollectionViaEventTaskDetails"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'TempCart' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTempCartCollectionViaPreQualificationResult()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TempCartCollectionViaPreQualificationResult"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Territory' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTerritoryCollectionViaEventPod()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TerritoryCollectionViaEventPod"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaEventPhysicianTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaEventPhysicianTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaEventTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaEventTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaCustomerEventTestFinding()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaCustomerEventTestFinding"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Test' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestCollectionViaDependentDisqualifiedTest()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestCollectionViaDependentDisqualifiedTest"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'TestHcpcsCode' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTestHcpcsCodeCollectionViaEventAccountTestHcpcsCode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entities of type 'Zip' to this entity. Use DataAccessAdapter.FetchEntityCollection() to fetch these related entities.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoZipCollectionViaEventZip()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.Relations.AddRange(GetRelationsForFieldOfType("ZipCollectionViaEventZip"));
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventsFields.EventId, null, ComparisonOperator.Equal, this.EventId, "EventsEntity__"));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'CommunicationMode' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCommunicationMode()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(CommunicationModeFields.CommunicationModeId, null, ComparisonOperator.Equal, this.CommunicationModeId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'EventType' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventType()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventTypeFields.EventTypeId, null, ComparisonOperator.Equal, this.EventTypeId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'HafTemplate' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHafTemplate()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(HafTemplateFields.HaftemplateId, null, ComparisonOperator.Equal, this.HafTemplateId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.GenerateKynXml));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.GenerateHealthAssesmentFormStatus));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.GenerateMyBioCheckAssessment));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.GenerateHkynXml));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'Lookup' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLookup_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(LookupFields.LookupId, null, ComparisonOperator.Equal, this.EventCancellationReasonId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'NotesDetails' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNotesDetails()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(NotesDetailsFields.NoteId, null, ComparisonOperator.Equal, this.EmrNotesId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser_()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.CreatedByOrgRoleUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser____()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.UpdatedByAdmin));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser__()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.EventActivityOrgRoleUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.AssignedToOrgRoleUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'OrganizationRoleUser' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrganizationRoleUser___()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(OrganizationRoleUserFields.OrganizationRoleUserId, null, ComparisonOperator.Equal, this.SignOffOrgRoleUserId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'ScheduleMethod' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoScheduleMethod()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(ScheduleMethodFields.ScheduleMethodId, null, ComparisonOperator.Equal, this.ScheduleMethodId));
			return bucket;
		}

		/// <summary> Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch
		/// the related entity of type 'EventAccount' to this entity. Use DataAccessAdapter.FetchNewEntity() to fetch this related entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEventAccount()
		{
			IRelationPredicateBucket bucket = new RelationPredicateBucket();
			bucket.PredicateExpression.Add(new FieldCompareValuePredicate(EventAccountFields.EventId, null, ComparisonOperator.Equal, this.EventId));
			return bucket;
		}
	
		
		/// <summary>Creates entity fields object for this entity. Used in constructor to setup this entity in a polymorphic scenario.</summary>
		protected virtual IEntityFields2 CreateFields()
		{
			return EntityFieldsFactory.CreateEntityFieldsObject(Falcon.Data.EntityType.EventsEntity);
		}

		/// <summary>
		/// Creates the ITypeDefaultValue instance used to provide default values for value types which aren't of type nullable(of T)
		/// </summary>
		/// <returns></returns>
		protected override ITypeDefaultValue CreateTypeDefaultValueProvider()
		{
			return new TypeDefaultValue();
		}

		/// <summary>Creates a new instance of the factory related to this entity</summary>
		protected override IEntityFactory2 CreateEntityFactory()
		{
			return EntityFactoryCache2.GetEntityFactory(typeof(EventsEntityFactory));
		}
#if !CF
		/// <summary>Adds the member collections to the collections queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void AddToMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue) 
		{
			base.AddToMemberEntityCollectionsQueue(collectionsQueue);
			collectionsQueue.Enqueue(this._afmarketingMaterial);
			collectionsQueue.Enqueue(this._callDetails);
			collectionsQueue.Enqueue(this._callQueueCustomer);
			collectionsQueue.Enqueue(this._customerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._customerEventTestFinding);
			collectionsQueue.Enqueue(this._customerOrderHistory);
			collectionsQueue.Enqueue(this._customerRegistrationNotes);
			collectionsQueue.Enqueue(this._customEventNotification);
			collectionsQueue.Enqueue(this._dependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._disqualifiedTest);
			collectionsQueue.Enqueue(this._eventAccountTestHcpcsCode);
			collectionsQueue.Enqueue(this._eventAffiliateDetails);
			collectionsQueue.Enqueue(this._eventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._eventAppointmentChangeLog_);
			collectionsQueue.Enqueue(this._eventAppointmentChangeLog);
			collectionsQueue.Enqueue(this._eventCallDetails);
			collectionsQueue.Enqueue(this._eventChecklistTemplate);
			collectionsQueue.Enqueue(this._eventCoupons);
			collectionsQueue.Enqueue(this._eventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._eventCustomerResult);
			collectionsQueue.Enqueue(this._eventCustomers);
			collectionsQueue.Enqueue(this._eventFluConsentTemplate);
			collectionsQueue.Enqueue(this._eventHospitalFacility);
			collectionsQueue.Enqueue(this._eventHospitalPartner);
			collectionsQueue.Enqueue(this._eventHostPromotions);
			collectionsQueue.Enqueue(this._eventMarketingOffers);
			collectionsQueue.Enqueue(this._eventMeetingDetails);
			collectionsQueue.Enqueue(this._eventNotesLog);
			collectionsQueue.Enqueue(this._eventNotification);
			collectionsQueue.Enqueue(this._eventPackageDetails);
			collectionsQueue.Enqueue(this._eventPhysicianTest);
			collectionsQueue.Enqueue(this._eventPod);
			collectionsQueue.Enqueue(this._eventProductExclusion);
			collectionsQueue.Enqueue(this._eventProductType);
			collectionsQueue.Enqueue(this._eventPublication);
			collectionsQueue.Enqueue(this._eventScheduleTemplate);
			collectionsQueue.Enqueue(this._eventSchedulingSlot);
			collectionsQueue.Enqueue(this._eventStaffAssignment);
			collectionsQueue.Enqueue(this._eventSurveyTemplate);
			collectionsQueue.Enqueue(this._eventTaskDetails);
			collectionsQueue.Enqueue(this._eventTest);
			collectionsQueue.Enqueue(this._eventZip);
			collectionsQueue.Enqueue(this._healthPlanFillEventCallQueue);
			collectionsQueue.Enqueue(this._hospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._hospitalPartnerEventNotes);
			collectionsQueue.Enqueue(this._hostEventDetails);
			collectionsQueue.Enqueue(this._hostPayment);
			collectionsQueue.Enqueue(this._marketingPrintOrderEventMapping);
			collectionsQueue.Enqueue(this._physicianEventAssignment);
			collectionsQueue.Enqueue(this._physicianInvoiceItem);
			collectionsQueue.Enqueue(this._preQualificationResult);
			collectionsQueue.Enqueue(this._resultArchiveUpload);
			collectionsQueue.Enqueue(this._seminars);
			collectionsQueue.Enqueue(this._accountCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._accountCollectionViaCustomEventNotification);
			collectionsQueue.Enqueue(this._activityTypeCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._addressCollectionViaHostPayment);
			collectionsQueue.Enqueue(this._afaffiliateCampaignCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._affiliateProfileCollectionViaEventAffiliateDetails);
			collectionsQueue.Enqueue(this._afmarketingMaterialTypeCollectionViaAfmarketingMaterial);
			collectionsQueue.Enqueue(this._callQueueCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._callQueueCriteriaCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._callsCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._campaignCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._campaignCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._checkListTemplateCollectionViaEventChecklistTemplate);
			collectionsQueue.Enqueue(this._contactCallCollectionViaEventCallDetails);
			collectionsQueue.Enqueue(this._contactMeetingCollectionViaEventMeetingDetails);
			collectionsQueue.Enqueue(this._corporateUploadCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._couponsCollectionViaEventCoupons);
			collectionsQueue.Enqueue(this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaHospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaCustomerEventTestFinding);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._customerProfileCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._customerProfileHistoryCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._customerRegistrationNotesCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._customerRegistrationNotesCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._eventAppointmentCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaEventAppointmentChangeLog_);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._eventCustomersCollectionViaEventAppointmentChangeLog);
			collectionsQueue.Enqueue(this._eventNoteCollectionViaEventNotesLog);
			collectionsQueue.Enqueue(this._eventPackageDetailsCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._eventPodRoomCollectionViaEventSchedulingSlot);
			collectionsQueue.Enqueue(this._eventTestCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._fileCollectionViaResultArchiveUpload);
			collectionsQueue.Enqueue(this._fluConsentTemplateCollectionViaEventFluConsentTemplate);
			collectionsQueue.Enqueue(this._gcNotGivenReasonCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._hafTemplateCollectionViaEventPackageDetails);
			collectionsQueue.Enqueue(this._hafTemplateCollectionViaEventTest);
			collectionsQueue.Enqueue(this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue);
			collectionsQueue.Enqueue(this._hospitalFacilityCollectionViaEventHospitalFacility);
			collectionsQueue.Enqueue(this._hospitalFacilityCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._hospitalPartnerCollectionViaEventHospitalPartner);
			collectionsQueue.Enqueue(this._languageCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventSchedulingSlot);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventPackageDetails);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventTest);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventCustomers_);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventTest__);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventTest_);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_____);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomEventNotification);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerRegistrationNotes);
			collectionsQueue.Enqueue(this._lookupCollectionViaHostPayment_);
			collectionsQueue.Enqueue(this._lookupCollectionViaCustomerOrderHistory);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult__);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult___);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult____);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventAppointmentChangeLog_);
			collectionsQueue.Enqueue(this._lookupCollectionViaHostPayment);
			collectionsQueue.Enqueue(this._lookupCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventAppointmentChangeLog);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult_______);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult______);
			collectionsQueue.Enqueue(this._lookupCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._lookupCollectionViaPreQualificationResult________);
			collectionsQueue.Enqueue(this._marketingOffersCollectionViaEventMarketingOffers);
			collectionsQueue.Enqueue(this._marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping);
			collectionsQueue.Enqueue(this._notesDetailsCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._notificationCollectionViaEventNotification);
			collectionsQueue.Enqueue(this._organizationCollectionViaEventAccountTestHcpcsCode);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaSeminars);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventStaffAssignment_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHospitalPartnerCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventStaffAssignment__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventPhysicianTest__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventPhysicianTest_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaHostPayment);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventPhysicianTest);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventStaffAssignment);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventAppointmentChangeLog);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventAppointmentChangeLog_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaDisqualifiedTest_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCallQueueCustomer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomEventNotification);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaCustomerRegistrationNotes);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_____);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult________);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult___);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult__);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult______);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult____);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomers);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomers_);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_______);
			collectionsQueue.Enqueue(this._organizationRoleUserCollectionViaEventCustomerResult_);
			collectionsQueue.Enqueue(this._packageCollectionViaEventPackageDetails);
			collectionsQueue.Enqueue(this._physicianEvaluationCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._physicianInvoiceCollectionViaPhysicianInvoiceItem);
			collectionsQueue.Enqueue(this._physicianProfileCollectionViaPhysicianEventAssignment);
			collectionsQueue.Enqueue(this._physicianProfileCollectionViaPhysicianEventAssignment_);
			collectionsQueue.Enqueue(this._podDetailsCollectionViaEventStaffAssignment);
			collectionsQueue.Enqueue(this._podDetailsCollectionViaEventPod);
			collectionsQueue.Enqueue(this._podRoomCollectionViaEventPackageDetails);
			collectionsQueue.Enqueue(this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer);
			collectionsQueue.Enqueue(this._preQualificationQuestionCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._preQualificationTestTemplateCollectionViaEventTest);
			collectionsQueue.Enqueue(this._productCollectionViaEventProductExclusion);
			collectionsQueue.Enqueue(this._prospectCustomerCollectionViaCallQueueCustomer);
			collectionsQueue.Enqueue(this._prospectsCollectionViaHostPayment);
			collectionsQueue.Enqueue(this._prospectsCollectionViaHostEventDetails);
			collectionsQueue.Enqueue(this._refundRequestCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog);
			collectionsQueue.Enqueue(this._rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog);
			collectionsQueue.Enqueue(this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_);
			collectionsQueue.Enqueue(this._scheduleTemplateCollectionViaEventScheduleTemplate);
			collectionsQueue.Enqueue(this._staffEventRoleCollectionViaEventStaffAssignment);
			collectionsQueue.Enqueue(this._surveyTemplateCollectionViaEventSurveyTemplate);
			collectionsQueue.Enqueue(this._taskDetailsCollectionViaEventTaskDetails);
			collectionsQueue.Enqueue(this._tempCartCollectionViaPreQualificationResult);
			collectionsQueue.Enqueue(this._territoryCollectionViaEventPod);
			collectionsQueue.Enqueue(this._testCollectionViaEventPhysicianTest);
			collectionsQueue.Enqueue(this._testCollectionViaDisqualifiedTest);
			collectionsQueue.Enqueue(this._testCollectionViaEventTest);
			collectionsQueue.Enqueue(this._testCollectionViaCustomerEventTestFinding);
			collectionsQueue.Enqueue(this._testCollectionViaDependentDisqualifiedTest);
			collectionsQueue.Enqueue(this._testHcpcsCodeCollectionViaEventAccountTestHcpcsCode);
			collectionsQueue.Enqueue(this._zipCollectionViaEventZip);
		}
		
		/// <summary>Gets the member collections queue from the queue (base first)</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		protected override void GetFromMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue)
		{
			base.GetFromMemberEntityCollectionsQueue(collectionsQueue);
			this._afmarketingMaterial = (EntityCollection<AfmarketingMaterialEntity>) collectionsQueue.Dequeue();
			this._callDetails = (EntityCollection<CallDetailsEntity>) collectionsQueue.Dequeue();
			this._callQueueCustomer = (EntityCollection<CallQueueCustomerEntity>) collectionsQueue.Dequeue();
			this._customerClinicalQuestionAnswer = (EntityCollection<CustomerClinicalQuestionAnswerEntity>) collectionsQueue.Dequeue();
			this._customerEventTestFinding = (EntityCollection<CustomerEventTestFindingEntity>) collectionsQueue.Dequeue();
			this._customerOrderHistory = (EntityCollection<CustomerOrderHistoryEntity>) collectionsQueue.Dequeue();
			this._customerRegistrationNotes = (EntityCollection<CustomerRegistrationNotesEntity>) collectionsQueue.Dequeue();
			this._customEventNotification = (EntityCollection<CustomEventNotificationEntity>) collectionsQueue.Dequeue();
			this._dependentDisqualifiedTest = (EntityCollection<DependentDisqualifiedTestEntity>) collectionsQueue.Dequeue();
			this._disqualifiedTest = (EntityCollection<DisqualifiedTestEntity>) collectionsQueue.Dequeue();
			this._eventAccountTestHcpcsCode = (EntityCollection<EventAccountTestHcpcsCodeEntity>) collectionsQueue.Dequeue();
			this._eventAffiliateDetails = (EntityCollection<EventAffiliateDetailsEntity>) collectionsQueue.Dequeue();
			this._eventAppointmentCancellationLog = (EntityCollection<EventAppointmentCancellationLogEntity>) collectionsQueue.Dequeue();
			this._eventAppointmentChangeLog_ = (EntityCollection<EventAppointmentChangeLogEntity>) collectionsQueue.Dequeue();
			this._eventAppointmentChangeLog = (EntityCollection<EventAppointmentChangeLogEntity>) collectionsQueue.Dequeue();
			this._eventCallDetails = (EntityCollection<EventCallDetailsEntity>) collectionsQueue.Dequeue();
			this._eventChecklistTemplate = (EntityCollection<EventChecklistTemplateEntity>) collectionsQueue.Dequeue();
			this._eventCoupons = (EntityCollection<EventCouponsEntity>) collectionsQueue.Dequeue();
			this._eventCustomerQuestionAnswer = (EntityCollection<EventCustomerQuestionAnswerEntity>) collectionsQueue.Dequeue();
			this._eventCustomerResult = (EntityCollection<EventCustomerResultEntity>) collectionsQueue.Dequeue();
			this._eventCustomers = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventFluConsentTemplate = (EntityCollection<EventFluConsentTemplateEntity>) collectionsQueue.Dequeue();
			this._eventHospitalFacility = (EntityCollection<EventHospitalFacilityEntity>) collectionsQueue.Dequeue();
			this._eventHospitalPartner = (EntityCollection<EventHospitalPartnerEntity>) collectionsQueue.Dequeue();
			this._eventHostPromotions = (EntityCollection<EventHostPromotionsEntity>) collectionsQueue.Dequeue();
			this._eventMarketingOffers = (EntityCollection<EventMarketingOffersEntity>) collectionsQueue.Dequeue();
			this._eventMeetingDetails = (EntityCollection<EventMeetingDetailsEntity>) collectionsQueue.Dequeue();
			this._eventNotesLog = (EntityCollection<EventNotesLogEntity>) collectionsQueue.Dequeue();
			this._eventNotification = (EntityCollection<EventNotificationEntity>) collectionsQueue.Dequeue();
			this._eventPackageDetails = (EntityCollection<EventPackageDetailsEntity>) collectionsQueue.Dequeue();
			this._eventPhysicianTest = (EntityCollection<EventPhysicianTestEntity>) collectionsQueue.Dequeue();
			this._eventPod = (EntityCollection<EventPodEntity>) collectionsQueue.Dequeue();
			this._eventProductExclusion = (EntityCollection<EventProductExclusionEntity>) collectionsQueue.Dequeue();
			this._eventProductType = (EntityCollection<EventProductTypeEntity>) collectionsQueue.Dequeue();
			this._eventPublication = (EntityCollection<EventPublicationEntity>) collectionsQueue.Dequeue();
			this._eventScheduleTemplate = (EntityCollection<EventScheduleTemplateEntity>) collectionsQueue.Dequeue();
			this._eventSchedulingSlot = (EntityCollection<EventSchedulingSlotEntity>) collectionsQueue.Dequeue();
			this._eventStaffAssignment = (EntityCollection<EventStaffAssignmentEntity>) collectionsQueue.Dequeue();
			this._eventSurveyTemplate = (EntityCollection<EventSurveyTemplateEntity>) collectionsQueue.Dequeue();
			this._eventTaskDetails = (EntityCollection<EventTaskDetailsEntity>) collectionsQueue.Dequeue();
			this._eventTest = (EntityCollection<EventTestEntity>) collectionsQueue.Dequeue();
			this._eventZip = (EntityCollection<EventZipEntity>) collectionsQueue.Dequeue();
			this._healthPlanFillEventCallQueue = (EntityCollection<HealthPlanFillEventCallQueueEntity>) collectionsQueue.Dequeue();
			this._hospitalPartnerCustomer = (EntityCollection<HospitalPartnerCustomerEntity>) collectionsQueue.Dequeue();
			this._hospitalPartnerEventNotes = (EntityCollection<HospitalPartnerEventNotesEntity>) collectionsQueue.Dequeue();
			this._hostEventDetails = (EntityCollection<HostEventDetailsEntity>) collectionsQueue.Dequeue();
			this._hostPayment = (EntityCollection<HostPaymentEntity>) collectionsQueue.Dequeue();
			this._marketingPrintOrderEventMapping = (EntityCollection<MarketingPrintOrderEventMappingEntity>) collectionsQueue.Dequeue();
			this._physicianEventAssignment = (EntityCollection<PhysicianEventAssignmentEntity>) collectionsQueue.Dequeue();
			this._physicianInvoiceItem = (EntityCollection<PhysicianInvoiceItemEntity>) collectionsQueue.Dequeue();
			this._preQualificationResult = (EntityCollection<PreQualificationResultEntity>) collectionsQueue.Dequeue();
			this._resultArchiveUpload = (EntityCollection<ResultArchiveUploadEntity>) collectionsQueue.Dequeue();
			this._seminars = (EntityCollection<SeminarsEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaCallQueueCustomer = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._accountCollectionViaCustomEventNotification = (EntityCollection<AccountEntity>) collectionsQueue.Dequeue();
			this._activityTypeCollectionViaCallQueueCustomer = (EntityCollection<ActivityTypeEntity>) collectionsQueue.Dequeue();
			this._addressCollectionViaHostPayment = (EntityCollection<AddressEntity>) collectionsQueue.Dequeue();
			this._afaffiliateCampaignCollectionViaEventCustomers = (EntityCollection<AfaffiliateCampaignEntity>) collectionsQueue.Dequeue();
			this._affiliateProfileCollectionViaEventAffiliateDetails = (EntityCollection<AffiliateProfileEntity>) collectionsQueue.Dequeue();
			this._afmarketingMaterialTypeCollectionViaAfmarketingMaterial = (EntityCollection<AfmarketingMaterialTypeEntity>) collectionsQueue.Dequeue();
			this._callQueueCollectionViaCallQueueCustomer = (EntityCollection<CallQueueEntity>) collectionsQueue.Dequeue();
			this._callQueueCriteriaCollectionViaCallQueueCustomer = (EntityCollection<CallQueueCriteriaEntity>) collectionsQueue.Dequeue();
			this._callsCollectionViaPreQualificationResult = (EntityCollection<CallsEntity>) collectionsQueue.Dequeue();
			this._campaignCollectionViaCallQueueCustomer = (EntityCollection<CampaignEntity>) collectionsQueue.Dequeue();
			this._campaignCollectionViaEventCustomers = (EntityCollection<CampaignEntity>) collectionsQueue.Dequeue();
			this._checkListTemplateCollectionViaEventChecklistTemplate = (EntityCollection<CheckListTemplateEntity>) collectionsQueue.Dequeue();
			this._contactCallCollectionViaEventCallDetails = (EntityCollection<ContactCallEntity>) collectionsQueue.Dequeue();
			this._contactMeetingCollectionViaEventMeetingDetails = (EntityCollection<ContactMeetingEntity>) collectionsQueue.Dequeue();
			this._corporateUploadCollectionViaCustomerOrderHistory = (EntityCollection<CorporateUploadEntity>) collectionsQueue.Dequeue();
			this._couponsCollectionViaEventCoupons = (EntityCollection<CouponsEntity>) collectionsQueue.Dequeue();
			this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerHealthQuestionsEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaHospitalPartnerCustomer = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaEventCustomerQuestionAnswer = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaEventCustomerResult = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaDependentDisqualifiedTest = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaPhysicianInvoiceItem = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaEventCustomers = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaDisqualifiedTest = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaCustomerEventTestFinding = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaCustomerOrderHistory = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaPreQualificationResult = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileCollectionViaCallQueueCustomer = (EntityCollection<CustomerProfileEntity>) collectionsQueue.Dequeue();
			this._customerProfileHistoryCollectionViaEventCustomers = (EntityCollection<CustomerProfileHistoryEntity>) collectionsQueue.Dequeue();
			this._customerRegistrationNotesCollectionViaEventAppointmentCancellationLog = (EntityCollection<CustomerRegistrationNotesEntity>) collectionsQueue.Dequeue();
			this._customerRegistrationNotesCollectionViaEventCustomers = (EntityCollection<CustomerRegistrationNotesEntity>) collectionsQueue.Dequeue();
			this._eventAppointmentCollectionViaEventCustomers = (EntityCollection<EventAppointmentEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaEventAppointmentCancellationLog = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCallQueueCustomer = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaDisqualifiedTest = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaEventAppointmentChangeLog_ = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaEventCustomerQuestionAnswer = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaCustomerOrderHistory = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaDependentDisqualifiedTest = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventCustomersCollectionViaEventAppointmentChangeLog = (EntityCollection<EventCustomersEntity>) collectionsQueue.Dequeue();
			this._eventNoteCollectionViaEventNotesLog = (EntityCollection<EventNoteEntity>) collectionsQueue.Dequeue();
			this._eventPackageDetailsCollectionViaCustomerOrderHistory = (EntityCollection<EventPackageDetailsEntity>) collectionsQueue.Dequeue();
			this._eventPodRoomCollectionViaEventSchedulingSlot = (EntityCollection<EventPodRoomEntity>) collectionsQueue.Dequeue();
			this._eventTestCollectionViaCustomerOrderHistory = (EntityCollection<EventTestEntity>) collectionsQueue.Dequeue();
			this._fileCollectionViaResultArchiveUpload = (EntityCollection<FileEntity>) collectionsQueue.Dequeue();
			this._fluConsentTemplateCollectionViaEventFluConsentTemplate = (EntityCollection<FluConsentTemplateEntity>) collectionsQueue.Dequeue();
			this._gcNotGivenReasonCollectionViaEventCustomers = (EntityCollection<GcNotGivenReasonEntity>) collectionsQueue.Dequeue();
			this._hafTemplateCollectionViaEventPackageDetails = (EntityCollection<HafTemplateEntity>) collectionsQueue.Dequeue();
			this._hafTemplateCollectionViaEventTest = (EntityCollection<HafTemplateEntity>) collectionsQueue.Dequeue();
			this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<HafTemplateEntity>) collectionsQueue.Dequeue();
			this._healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue = (EntityCollection<HealthPlanCallQueueCriteriaEntity>) collectionsQueue.Dequeue();
			this._hospitalFacilityCollectionViaEventHospitalFacility = (EntityCollection<HospitalFacilityEntity>) collectionsQueue.Dequeue();
			this._hospitalFacilityCollectionViaEventCustomers = (EntityCollection<HospitalFacilityEntity>) collectionsQueue.Dequeue();
			this._hospitalPartnerCollectionViaEventHospitalPartner = (EntityCollection<HospitalPartnerEntity>) collectionsQueue.Dequeue();
			this._languageCollectionViaCallQueueCustomer = (EntityCollection<LanguageEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventSchedulingSlot = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventPackageDetails = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventTest = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomers = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomerResult = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventCustomers_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventTest__ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventTest_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_____ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomEventNotification = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerRegistrationNotes = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaHostPayment_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCustomerOrderHistory = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult__ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult___ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult____ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventAppointmentChangeLog_ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaHostPayment = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaCallQueueCustomer = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventAppointmentChangeLog = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult_______ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult______ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaEventAppointmentCancellationLog = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._lookupCollectionViaPreQualificationResult________ = (EntityCollection<LookupEntity>) collectionsQueue.Dequeue();
			this._marketingOffersCollectionViaEventMarketingOffers = (EntityCollection<MarketingOffersEntity>) collectionsQueue.Dequeue();
			this._marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping = (EntityCollection<MarketingPrintOrderEntity>) collectionsQueue.Dequeue();
			this._notesDetailsCollectionViaCallQueueCustomer = (EntityCollection<NotesDetailsEntity>) collectionsQueue.Dequeue();
			this._notificationCollectionViaEventNotification = (EntityCollection<NotificationEntity>) collectionsQueue.Dequeue();
			this._organizationCollectionViaEventAccountTestHcpcsCode = (EntityCollection<OrganizationEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaSeminars = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventStaffAssignment_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHospitalPartnerCustomer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventStaffAssignment__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventPhysicianTest__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventPhysicianTest_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaHostPayment = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventPhysicianTest = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventStaffAssignment = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventAppointmentCancellationLog = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventAppointmentChangeLog = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventAppointmentChangeLog_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaDisqualifiedTest_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCallQueueCustomer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomEventNotification = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaDisqualifiedTest = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaCustomerRegistrationNotes = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_____ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult________ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult___ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult__ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult______ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult____ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomers = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomers_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_______ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._organizationRoleUserCollectionViaEventCustomerResult_ = (EntityCollection<OrganizationRoleUserEntity>) collectionsQueue.Dequeue();
			this._packageCollectionViaEventPackageDetails = (EntityCollection<PackageEntity>) collectionsQueue.Dequeue();
			this._physicianEvaluationCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianEvaluationEntity>) collectionsQueue.Dequeue();
			this._physicianInvoiceCollectionViaPhysicianInvoiceItem = (EntityCollection<PhysicianInvoiceEntity>) collectionsQueue.Dequeue();
			this._physicianProfileCollectionViaPhysicianEventAssignment = (EntityCollection<PhysicianProfileEntity>) collectionsQueue.Dequeue();
			this._physicianProfileCollectionViaPhysicianEventAssignment_ = (EntityCollection<PhysicianProfileEntity>) collectionsQueue.Dequeue();
			this._podDetailsCollectionViaEventStaffAssignment = (EntityCollection<PodDetailsEntity>) collectionsQueue.Dequeue();
			this._podDetailsCollectionViaEventPod = (EntityCollection<PodDetailsEntity>) collectionsQueue.Dequeue();
			this._podRoomCollectionViaEventPackageDetails = (EntityCollection<PodRoomEntity>) collectionsQueue.Dequeue();
			this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = (EntityCollection<PreQualificationQuestionEntity>) collectionsQueue.Dequeue();
			this._preQualificationQuestionCollectionViaDisqualifiedTest = (EntityCollection<PreQualificationQuestionEntity>) collectionsQueue.Dequeue();
			this._preQualificationTestTemplateCollectionViaEventTest = (EntityCollection<PreQualificationTestTemplateEntity>) collectionsQueue.Dequeue();
			this._productCollectionViaEventProductExclusion = (EntityCollection<ProductEntity>) collectionsQueue.Dequeue();
			this._prospectCustomerCollectionViaCallQueueCustomer = (EntityCollection<ProspectCustomerEntity>) collectionsQueue.Dequeue();
			this._prospectsCollectionViaHostPayment = (EntityCollection<ProspectsEntity>) collectionsQueue.Dequeue();
			this._prospectsCollectionViaHostEventDetails = (EntityCollection<ProspectsEntity>) collectionsQueue.Dequeue();
			this._refundRequestCollectionViaEventAppointmentCancellationLog = (EntityCollection<RefundRequestEntity>) collectionsQueue.Dequeue();
			this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog = (EntityCollection<RescheduleCancelDispositionEntity>) collectionsQueue.Dequeue();
			this._rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog = (EntityCollection<RescheduleCancelDispositionEntity>) collectionsQueue.Dequeue();
			this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ = (EntityCollection<RescheduleCancelDispositionEntity>) collectionsQueue.Dequeue();
			this._scheduleTemplateCollectionViaEventScheduleTemplate = (EntityCollection<ScheduleTemplateEntity>) collectionsQueue.Dequeue();
			this._staffEventRoleCollectionViaEventStaffAssignment = (EntityCollection<StaffEventRoleEntity>) collectionsQueue.Dequeue();
			this._surveyTemplateCollectionViaEventSurveyTemplate = (EntityCollection<SurveyTemplateEntity>) collectionsQueue.Dequeue();
			this._taskDetailsCollectionViaEventTaskDetails = (EntityCollection<TaskDetailsEntity>) collectionsQueue.Dequeue();
			this._tempCartCollectionViaPreQualificationResult = (EntityCollection<TempCartEntity>) collectionsQueue.Dequeue();
			this._territoryCollectionViaEventPod = (EntityCollection<TerritoryEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaEventPhysicianTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaDisqualifiedTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaEventTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaCustomerEventTestFinding = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testCollectionViaDependentDisqualifiedTest = (EntityCollection<TestEntity>) collectionsQueue.Dequeue();
			this._testHcpcsCodeCollectionViaEventAccountTestHcpcsCode = (EntityCollection<TestHcpcsCodeEntity>) collectionsQueue.Dequeue();
			this._zipCollectionViaEventZip = (EntityCollection<ZipEntity>) collectionsQueue.Dequeue();
		}
		
		/// <summary>Determines whether the entity has populated member collections</summary>
		/// <returns>true if the entity has populated member collections.</returns>
		protected override bool HasPopulatedMemberEntityCollections()
		{
			if (this._afmarketingMaterial != null)
			{
				return true;
			}
			if (this._callDetails != null)
			{
				return true;
			}
			if (this._callQueueCustomer != null)
			{
				return true;
			}
			if (this._customerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerEventTestFinding != null)
			{
				return true;
			}
			if (this._customerOrderHistory != null)
			{
				return true;
			}
			if (this._customerRegistrationNotes != null)
			{
				return true;
			}
			if (this._customEventNotification != null)
			{
				return true;
			}
			if (this._dependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._disqualifiedTest != null)
			{
				return true;
			}
			if (this._eventAccountTestHcpcsCode != null)
			{
				return true;
			}
			if (this._eventAffiliateDetails != null)
			{
				return true;
			}
			if (this._eventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._eventAppointmentChangeLog_ != null)
			{
				return true;
			}
			if (this._eventAppointmentChangeLog != null)
			{
				return true;
			}
			if (this._eventCallDetails != null)
			{
				return true;
			}
			if (this._eventChecklistTemplate != null)
			{
				return true;
			}
			if (this._eventCoupons != null)
			{
				return true;
			}
			if (this._eventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventCustomerResult != null)
			{
				return true;
			}
			if (this._eventCustomers != null)
			{
				return true;
			}
			if (this._eventFluConsentTemplate != null)
			{
				return true;
			}
			if (this._eventHospitalFacility != null)
			{
				return true;
			}
			if (this._eventHospitalPartner != null)
			{
				return true;
			}
			if (this._eventHostPromotions != null)
			{
				return true;
			}
			if (this._eventMarketingOffers != null)
			{
				return true;
			}
			if (this._eventMeetingDetails != null)
			{
				return true;
			}
			if (this._eventNotesLog != null)
			{
				return true;
			}
			if (this._eventNotification != null)
			{
				return true;
			}
			if (this._eventPackageDetails != null)
			{
				return true;
			}
			if (this._eventPhysicianTest != null)
			{
				return true;
			}
			if (this._eventPod != null)
			{
				return true;
			}
			if (this._eventProductExclusion != null)
			{
				return true;
			}
			if (this._eventProductType != null)
			{
				return true;
			}
			if (this._eventPublication != null)
			{
				return true;
			}
			if (this._eventScheduleTemplate != null)
			{
				return true;
			}
			if (this._eventSchedulingSlot != null)
			{
				return true;
			}
			if (this._eventStaffAssignment != null)
			{
				return true;
			}
			if (this._eventSurveyTemplate != null)
			{
				return true;
			}
			if (this._eventTaskDetails != null)
			{
				return true;
			}
			if (this._eventTest != null)
			{
				return true;
			}
			if (this._eventZip != null)
			{
				return true;
			}
			if (this._healthPlanFillEventCallQueue != null)
			{
				return true;
			}
			if (this._hospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._hospitalPartnerEventNotes != null)
			{
				return true;
			}
			if (this._hostEventDetails != null)
			{
				return true;
			}
			if (this._hostPayment != null)
			{
				return true;
			}
			if (this._marketingPrintOrderEventMapping != null)
			{
				return true;
			}
			if (this._physicianEventAssignment != null)
			{
				return true;
			}
			if (this._physicianInvoiceItem != null)
			{
				return true;
			}
			if (this._preQualificationResult != null)
			{
				return true;
			}
			if (this._resultArchiveUpload != null)
			{
				return true;
			}
			if (this._seminars != null)
			{
				return true;
			}
			if (this._accountCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._accountCollectionViaCustomEventNotification != null)
			{
				return true;
			}
			if (this._activityTypeCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._addressCollectionViaHostPayment != null)
			{
				return true;
			}
			if (this._afaffiliateCampaignCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._affiliateProfileCollectionViaEventAffiliateDetails != null)
			{
				return true;
			}
			if (this._afmarketingMaterialTypeCollectionViaAfmarketingMaterial != null)
			{
				return true;
			}
			if (this._callQueueCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._callQueueCriteriaCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._callsCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._campaignCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._campaignCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._checkListTemplateCollectionViaEventChecklistTemplate != null)
			{
				return true;
			}
			if (this._contactCallCollectionViaEventCallDetails != null)
			{
				return true;
			}
			if (this._contactMeetingCollectionViaEventMeetingDetails != null)
			{
				return true;
			}
			if (this._corporateUploadCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._couponsCollectionViaEventCoupons != null)
			{
				return true;
			}
			if (this._customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaHospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaCustomerEventTestFinding != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._customerProfileCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._customerProfileHistoryCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._customerRegistrationNotesCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._customerRegistrationNotesCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._eventAppointmentCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaEventAppointmentChangeLog_ != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._eventCustomersCollectionViaEventAppointmentChangeLog != null)
			{
				return true;
			}
			if (this._eventNoteCollectionViaEventNotesLog != null)
			{
				return true;
			}
			if (this._eventPackageDetailsCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._eventPodRoomCollectionViaEventSchedulingSlot != null)
			{
				return true;
			}
			if (this._eventTestCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._fileCollectionViaResultArchiveUpload != null)
			{
				return true;
			}
			if (this._fluConsentTemplateCollectionViaEventFluConsentTemplate != null)
			{
				return true;
			}
			if (this._gcNotGivenReasonCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._hafTemplateCollectionViaEventPackageDetails != null)
			{
				return true;
			}
			if (this._hafTemplateCollectionViaEventTest != null)
			{
				return true;
			}
			if (this._hafTemplateCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue != null)
			{
				return true;
			}
			if (this._hospitalFacilityCollectionViaEventHospitalFacility != null)
			{
				return true;
			}
			if (this._hospitalFacilityCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._hospitalPartnerCollectionViaEventHospitalPartner != null)
			{
				return true;
			}
			if (this._languageCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventSchedulingSlot != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventPackageDetails != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventTest != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventCustomers_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventTest__ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventTest_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_____ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomEventNotification != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerRegistrationNotes != null)
			{
				return true;
			}
			if (this._lookupCollectionViaHostPayment_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCustomerOrderHistory != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult__ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult___ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult____ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventAppointmentChangeLog_ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaHostPayment != null)
			{
				return true;
			}
			if (this._lookupCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventAppointmentChangeLog != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult_______ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult______ != null)
			{
				return true;
			}
			if (this._lookupCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._lookupCollectionViaPreQualificationResult________ != null)
			{
				return true;
			}
			if (this._marketingOffersCollectionViaEventMarketingOffers != null)
			{
				return true;
			}
			if (this._marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping != null)
			{
				return true;
			}
			if (this._notesDetailsCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._notificationCollectionViaEventNotification != null)
			{
				return true;
			}
			if (this._organizationCollectionViaEventAccountTestHcpcsCode != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaSeminars != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventStaffAssignment_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHospitalPartnerCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventStaffAssignment__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventPhysicianTest__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventPhysicianTest_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaHostPayment != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventPhysicianTest != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventStaffAssignment != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventAppointmentChangeLog != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventAccountTestHcpcsCode_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventAppointmentChangeLog_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaDisqualifiedTest_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCallQueueCustomer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomEventNotification != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaCustomerRegistrationNotes != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_____ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult________ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult___ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult__ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult______ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult____ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomers != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomers_ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_______ != null)
			{
				return true;
			}
			if (this._organizationRoleUserCollectionViaEventCustomerResult_ != null)
			{
				return true;
			}
			if (this._packageCollectionViaEventPackageDetails != null)
			{
				return true;
			}
			if (this._physicianEvaluationCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._physicianInvoiceCollectionViaPhysicianInvoiceItem != null)
			{
				return true;
			}
			if (this._physicianProfileCollectionViaPhysicianEventAssignment != null)
			{
				return true;
			}
			if (this._physicianProfileCollectionViaPhysicianEventAssignment_ != null)
			{
				return true;
			}
			if (this._podDetailsCollectionViaEventStaffAssignment != null)
			{
				return true;
			}
			if (this._podDetailsCollectionViaEventPod != null)
			{
				return true;
			}
			if (this._podRoomCollectionViaEventPackageDetails != null)
			{
				return true;
			}
			if (this._preQualificationQuestionCollectionViaEventCustomerQuestionAnswer != null)
			{
				return true;
			}
			if (this._preQualificationQuestionCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._preQualificationTestTemplateCollectionViaEventTest != null)
			{
				return true;
			}
			if (this._productCollectionViaEventProductExclusion != null)
			{
				return true;
			}
			if (this._prospectCustomerCollectionViaCallQueueCustomer != null)
			{
				return true;
			}
			if (this._prospectsCollectionViaHostPayment != null)
			{
				return true;
			}
			if (this._prospectsCollectionViaHostEventDetails != null)
			{
				return true;
			}
			if (this._refundRequestCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog != null)
			{
				return true;
			}
			if (this._rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog != null)
			{
				return true;
			}
			if (this._rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ != null)
			{
				return true;
			}
			if (this._scheduleTemplateCollectionViaEventScheduleTemplate != null)
			{
				return true;
			}
			if (this._staffEventRoleCollectionViaEventStaffAssignment != null)
			{
				return true;
			}
			if (this._surveyTemplateCollectionViaEventSurveyTemplate != null)
			{
				return true;
			}
			if (this._taskDetailsCollectionViaEventTaskDetails != null)
			{
				return true;
			}
			if (this._tempCartCollectionViaPreQualificationResult != null)
			{
				return true;
			}
			if (this._territoryCollectionViaEventPod != null)
			{
				return true;
			}
			if (this._testCollectionViaEventPhysicianTest != null)
			{
				return true;
			}
			if (this._testCollectionViaDisqualifiedTest != null)
			{
				return true;
			}
			if (this._testCollectionViaEventTest != null)
			{
				return true;
			}
			if (this._testCollectionViaCustomerEventTestFinding != null)
			{
				return true;
			}
			if (this._testCollectionViaDependentDisqualifiedTest != null)
			{
				return true;
			}
			if (this._testHcpcsCodeCollectionViaEventAccountTestHcpcsCode != null)
			{
				return true;
			}
			if (this._zipCollectionViaEventZip != null)
			{
				return true;
			}
			return base.HasPopulatedMemberEntityCollections();
		}
		
		/// <summary>Creates the member entity collections queue.</summary>
		/// <param name="collectionsQueue">The collections queue.</param>
		/// <param name="requiredQueue">The required queue.</param>
		protected override void CreateMemberEntityCollectionsQueue(Queue<IEntityCollection2> collectionsQueue, Queue<bool> requiredQueue) 
		{
			base.CreateMemberEntityCollectionsQueue(collectionsQueue, requiredQueue);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AfmarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomEventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomEventNotificationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAccountTestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAccountTestHcpcsCodeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAffiliateDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAffiliateDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAppointmentCancellationLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentCancellationLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCallDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventChecklistTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventChecklistTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCouponsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventFluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventFluConsentTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventHospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalFacilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventHospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalPartnerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventHostPromotionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHostPromotionsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventMarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMarketingOffersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventMeetingDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMeetingDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventNotesLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotesLogEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotificationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPhysicianTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPhysicianTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPodEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventProductExclusionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductExclusionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventProductTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductTypeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPublicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPublicationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventScheduleTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventSchedulingSlotEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSchedulingSlotEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventStaffAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventStaffAssignmentEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventSurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSurveyTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventTaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTaskDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventZipEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HealthPlanFillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanFillEventCallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalPartnerEventNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEventNotesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HostEventDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostEventDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HostPaymentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostPaymentEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MarketingPrintOrderEventMappingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEventMappingEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianEventAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEventAssignmentEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<SeminarsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SeminarsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AffiliateProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AffiliateProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<AfmarketingMaterialTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialTypeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CheckListTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CheckListTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ContactCallEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactCallEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ContactMeetingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactMeetingEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CouponsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventNoteEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNoteEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventPodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodRoomEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<FluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FluConsentTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HealthPlanCallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanCallQueueCriteriaEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<HospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingOffersEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<MarketingPrintOrderEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<NotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotificationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PackageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PackageEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodRoomEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<PreQualificationTestTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationTestTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProductEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RefundRequestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RefundRequestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ScheduleTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<StaffEventRoleEntity>(EntityFactoryCache2.GetEntityFactory(typeof(StaffEventRoleEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<SurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SurveyTemplateEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TaskDetailsEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TerritoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TerritoryEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<TestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestHcpcsCodeEntityFactory))) : null);
			collectionsQueue.Enqueue(requiredQueue.Dequeue() ? new EntityCollection<ZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ZipEntityFactory))) : null);
		}
#endif
		/// <summary>
		/// Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element. 
		/// </summary>
		/// <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
		public override Dictionary<string, object> GetRelatedData()
		{
			Dictionary<string, object> toReturn = new Dictionary<string, object>();
			toReturn.Add("CommunicationMode", _communicationMode);
			toReturn.Add("EventType", _eventType);
			toReturn.Add("HafTemplate", _hafTemplate);
			toReturn.Add("Lookup", _lookup);
			toReturn.Add("Lookup____", _lookup____);
			toReturn.Add("Lookup___", _lookup___);
			toReturn.Add("Lookup__", _lookup__);
			toReturn.Add("Lookup_", _lookup_);
			toReturn.Add("NotesDetails", _notesDetails);
			toReturn.Add("OrganizationRoleUser_", _organizationRoleUser_);
			toReturn.Add("OrganizationRoleUser____", _organizationRoleUser____);
			toReturn.Add("OrganizationRoleUser__", _organizationRoleUser__);
			toReturn.Add("OrganizationRoleUser", _organizationRoleUser);
			toReturn.Add("OrganizationRoleUser___", _organizationRoleUser___);
			toReturn.Add("ScheduleMethod", _scheduleMethod);
			toReturn.Add("AfmarketingMaterial", _afmarketingMaterial);
			toReturn.Add("CallDetails", _callDetails);
			toReturn.Add("CallQueueCustomer", _callQueueCustomer);
			toReturn.Add("CustomerClinicalQuestionAnswer", _customerClinicalQuestionAnswer);
			toReturn.Add("CustomerEventTestFinding", _customerEventTestFinding);
			toReturn.Add("CustomerOrderHistory", _customerOrderHistory);
			toReturn.Add("CustomerRegistrationNotes", _customerRegistrationNotes);
			toReturn.Add("CustomEventNotification", _customEventNotification);
			toReturn.Add("DependentDisqualifiedTest", _dependentDisqualifiedTest);
			toReturn.Add("DisqualifiedTest", _disqualifiedTest);
			toReturn.Add("EventAccountTestHcpcsCode", _eventAccountTestHcpcsCode);
			toReturn.Add("EventAffiliateDetails", _eventAffiliateDetails);
			toReturn.Add("EventAppointmentCancellationLog", _eventAppointmentCancellationLog);
			toReturn.Add("EventAppointmentChangeLog_", _eventAppointmentChangeLog_);
			toReturn.Add("EventAppointmentChangeLog", _eventAppointmentChangeLog);
			toReturn.Add("EventCallDetails", _eventCallDetails);
			toReturn.Add("EventChecklistTemplate", _eventChecklistTemplate);
			toReturn.Add("EventCoupons", _eventCoupons);
			toReturn.Add("EventCustomerQuestionAnswer", _eventCustomerQuestionAnswer);
			toReturn.Add("EventCustomerResult", _eventCustomerResult);
			toReturn.Add("EventCustomers", _eventCustomers);
			toReturn.Add("EventFluConsentTemplate", _eventFluConsentTemplate);
			toReturn.Add("EventHospitalFacility", _eventHospitalFacility);
			toReturn.Add("EventHospitalPartner", _eventHospitalPartner);
			toReturn.Add("EventHostPromotions", _eventHostPromotions);
			toReturn.Add("EventMarketingOffers", _eventMarketingOffers);
			toReturn.Add("EventMeetingDetails", _eventMeetingDetails);
			toReturn.Add("EventNotesLog", _eventNotesLog);
			toReturn.Add("EventNotification", _eventNotification);
			toReturn.Add("EventPackageDetails", _eventPackageDetails);
			toReturn.Add("EventPhysicianTest", _eventPhysicianTest);
			toReturn.Add("EventPod", _eventPod);
			toReturn.Add("EventProductExclusion", _eventProductExclusion);
			toReturn.Add("EventProductType", _eventProductType);
			toReturn.Add("EventPublication", _eventPublication);
			toReturn.Add("EventScheduleTemplate", _eventScheduleTemplate);
			toReturn.Add("EventSchedulingSlot", _eventSchedulingSlot);
			toReturn.Add("EventStaffAssignment", _eventStaffAssignment);
			toReturn.Add("EventSurveyTemplate", _eventSurveyTemplate);
			toReturn.Add("EventTaskDetails", _eventTaskDetails);
			toReturn.Add("EventTest", _eventTest);
			toReturn.Add("EventZip", _eventZip);
			toReturn.Add("HealthPlanFillEventCallQueue", _healthPlanFillEventCallQueue);
			toReturn.Add("HospitalPartnerCustomer", _hospitalPartnerCustomer);
			toReturn.Add("HospitalPartnerEventNotes", _hospitalPartnerEventNotes);
			toReturn.Add("HostEventDetails", _hostEventDetails);
			toReturn.Add("HostPayment", _hostPayment);
			toReturn.Add("MarketingPrintOrderEventMapping", _marketingPrintOrderEventMapping);
			toReturn.Add("PhysicianEventAssignment", _physicianEventAssignment);
			toReturn.Add("PhysicianInvoiceItem", _physicianInvoiceItem);
			toReturn.Add("PreQualificationResult", _preQualificationResult);
			toReturn.Add("ResultArchiveUpload", _resultArchiveUpload);
			toReturn.Add("Seminars", _seminars);
			toReturn.Add("AccountCollectionViaCallQueueCustomer", _accountCollectionViaCallQueueCustomer);
			toReturn.Add("AccountCollectionViaCustomEventNotification", _accountCollectionViaCustomEventNotification);
			toReturn.Add("ActivityTypeCollectionViaCallQueueCustomer", _activityTypeCollectionViaCallQueueCustomer);
			toReturn.Add("AddressCollectionViaHostPayment", _addressCollectionViaHostPayment);
			toReturn.Add("AfaffiliateCampaignCollectionViaEventCustomers", _afaffiliateCampaignCollectionViaEventCustomers);
			toReturn.Add("AffiliateProfileCollectionViaEventAffiliateDetails", _affiliateProfileCollectionViaEventAffiliateDetails);
			toReturn.Add("AfmarketingMaterialTypeCollectionViaAfmarketingMaterial", _afmarketingMaterialTypeCollectionViaAfmarketingMaterial);
			toReturn.Add("CallQueueCollectionViaCallQueueCustomer", _callQueueCollectionViaCallQueueCustomer);
			toReturn.Add("CallQueueCriteriaCollectionViaCallQueueCustomer", _callQueueCriteriaCollectionViaCallQueueCustomer);
			toReturn.Add("CallsCollectionViaPreQualificationResult", _callsCollectionViaPreQualificationResult);
			toReturn.Add("CampaignCollectionViaCallQueueCustomer", _campaignCollectionViaCallQueueCustomer);
			toReturn.Add("CampaignCollectionViaEventCustomers", _campaignCollectionViaEventCustomers);
			toReturn.Add("CheckListTemplateCollectionViaEventChecklistTemplate", _checkListTemplateCollectionViaEventChecklistTemplate);
			toReturn.Add("ContactCallCollectionViaEventCallDetails", _contactCallCollectionViaEventCallDetails);
			toReturn.Add("ContactMeetingCollectionViaEventMeetingDetails", _contactMeetingCollectionViaEventMeetingDetails);
			toReturn.Add("CorporateUploadCollectionViaCustomerOrderHistory", _corporateUploadCollectionViaCustomerOrderHistory);
			toReturn.Add("CouponsCollectionViaEventCoupons", _couponsCollectionViaEventCoupons);
			toReturn.Add("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("CustomerProfileCollectionViaHospitalPartnerCustomer", _customerProfileCollectionViaHospitalPartnerCustomer);
			toReturn.Add("CustomerProfileCollectionViaEventCustomerQuestionAnswer", _customerProfileCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("CustomerProfileCollectionViaEventCustomerResult", _customerProfileCollectionViaEventCustomerResult);
			toReturn.Add("CustomerProfileCollectionViaDependentDisqualifiedTest", _customerProfileCollectionViaDependentDisqualifiedTest);
			toReturn.Add("CustomerProfileCollectionViaPhysicianInvoiceItem", _customerProfileCollectionViaPhysicianInvoiceItem);
			toReturn.Add("CustomerProfileCollectionViaEventCustomers", _customerProfileCollectionViaEventCustomers);
			toReturn.Add("CustomerProfileCollectionViaDisqualifiedTest", _customerProfileCollectionViaDisqualifiedTest);
			toReturn.Add("CustomerProfileCollectionViaCustomerEventTestFinding", _customerProfileCollectionViaCustomerEventTestFinding);
			toReturn.Add("CustomerProfileCollectionViaCustomerOrderHistory", _customerProfileCollectionViaCustomerOrderHistory);
			toReturn.Add("CustomerProfileCollectionViaPreQualificationResult", _customerProfileCollectionViaPreQualificationResult);
			toReturn.Add("CustomerProfileCollectionViaCustomerClinicalQuestionAnswer", _customerProfileCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("CustomerProfileCollectionViaCallQueueCustomer", _customerProfileCollectionViaCallQueueCustomer);
			toReturn.Add("CustomerProfileHistoryCollectionViaEventCustomers", _customerProfileHistoryCollectionViaEventCustomers);
			toReturn.Add("CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog", _customerRegistrationNotesCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("CustomerRegistrationNotesCollectionViaEventCustomers", _customerRegistrationNotesCollectionViaEventCustomers);
			toReturn.Add("EventAppointmentCollectionViaEventCustomers", _eventAppointmentCollectionViaEventCustomers);
			toReturn.Add("EventCustomersCollectionViaEventAppointmentCancellationLog", _eventCustomersCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("EventCustomersCollectionViaCallQueueCustomer", _eventCustomersCollectionViaCallQueueCustomer);
			toReturn.Add("EventCustomersCollectionViaDisqualifiedTest", _eventCustomersCollectionViaDisqualifiedTest);
			toReturn.Add("EventCustomersCollectionViaEventAppointmentChangeLog_", _eventCustomersCollectionViaEventAppointmentChangeLog_);
			toReturn.Add("EventCustomersCollectionViaEventCustomerQuestionAnswer", _eventCustomersCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("EventCustomersCollectionViaCustomerOrderHistory", _eventCustomersCollectionViaCustomerOrderHistory);
			toReturn.Add("EventCustomersCollectionViaDependentDisqualifiedTest", _eventCustomersCollectionViaDependentDisqualifiedTest);
			toReturn.Add("EventCustomersCollectionViaEventAppointmentChangeLog", _eventCustomersCollectionViaEventAppointmentChangeLog);
			toReturn.Add("EventNoteCollectionViaEventNotesLog", _eventNoteCollectionViaEventNotesLog);
			toReturn.Add("EventPackageDetailsCollectionViaCustomerOrderHistory", _eventPackageDetailsCollectionViaCustomerOrderHistory);
			toReturn.Add("EventPodRoomCollectionViaEventSchedulingSlot", _eventPodRoomCollectionViaEventSchedulingSlot);
			toReturn.Add("EventTestCollectionViaCustomerOrderHistory", _eventTestCollectionViaCustomerOrderHistory);
			toReturn.Add("FileCollectionViaResultArchiveUpload", _fileCollectionViaResultArchiveUpload);
			toReturn.Add("FluConsentTemplateCollectionViaEventFluConsentTemplate", _fluConsentTemplateCollectionViaEventFluConsentTemplate);
			toReturn.Add("GcNotGivenReasonCollectionViaEventCustomers", _gcNotGivenReasonCollectionViaEventCustomers);
			toReturn.Add("HafTemplateCollectionViaEventPackageDetails", _hafTemplateCollectionViaEventPackageDetails);
			toReturn.Add("HafTemplateCollectionViaEventTest", _hafTemplateCollectionViaEventTest);
			toReturn.Add("HafTemplateCollectionViaCustomerClinicalQuestionAnswer", _hafTemplateCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue", _healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue);
			toReturn.Add("HospitalFacilityCollectionViaEventHospitalFacility", _hospitalFacilityCollectionViaEventHospitalFacility);
			toReturn.Add("HospitalFacilityCollectionViaEventCustomers", _hospitalFacilityCollectionViaEventCustomers);
			toReturn.Add("HospitalPartnerCollectionViaEventHospitalPartner", _hospitalPartnerCollectionViaEventHospitalPartner);
			toReturn.Add("LanguageCollectionViaCallQueueCustomer", _languageCollectionViaCallQueueCustomer);
			toReturn.Add("LookupCollectionViaEventSchedulingSlot", _lookupCollectionViaEventSchedulingSlot);
			toReturn.Add("LookupCollectionViaEventPackageDetails", _lookupCollectionViaEventPackageDetails);
			toReturn.Add("LookupCollectionViaEventTest", _lookupCollectionViaEventTest);
			toReturn.Add("LookupCollectionViaEventCustomers", _lookupCollectionViaEventCustomers);
			toReturn.Add("LookupCollectionViaEventCustomerResult", _lookupCollectionViaEventCustomerResult);
			toReturn.Add("LookupCollectionViaEventCustomers_", _lookupCollectionViaEventCustomers_);
			toReturn.Add("LookupCollectionViaEventTest__", _lookupCollectionViaEventTest__);
			toReturn.Add("LookupCollectionViaEventTest_", _lookupCollectionViaEventTest_);
			toReturn.Add("LookupCollectionViaPreQualificationResult_____", _lookupCollectionViaPreQualificationResult_____);
			toReturn.Add("LookupCollectionViaCustomEventNotification", _lookupCollectionViaCustomEventNotification);
			toReturn.Add("LookupCollectionViaCustomerRegistrationNotes", _lookupCollectionViaCustomerRegistrationNotes);
			toReturn.Add("LookupCollectionViaHostPayment_", _lookupCollectionViaHostPayment_);
			toReturn.Add("LookupCollectionViaCustomerOrderHistory", _lookupCollectionViaCustomerOrderHistory);
			toReturn.Add("LookupCollectionViaPreQualificationResult__", _lookupCollectionViaPreQualificationResult__);
			toReturn.Add("LookupCollectionViaPreQualificationResult___", _lookupCollectionViaPreQualificationResult___);
			toReturn.Add("LookupCollectionViaPreQualificationResult_", _lookupCollectionViaPreQualificationResult_);
			toReturn.Add("LookupCollectionViaPreQualificationResult____", _lookupCollectionViaPreQualificationResult____);
			toReturn.Add("LookupCollectionViaPreQualificationResult", _lookupCollectionViaPreQualificationResult);
			toReturn.Add("LookupCollectionViaEventAppointmentChangeLog_", _lookupCollectionViaEventAppointmentChangeLog_);
			toReturn.Add("LookupCollectionViaHostPayment", _lookupCollectionViaHostPayment);
			toReturn.Add("LookupCollectionViaCallQueueCustomer", _lookupCollectionViaCallQueueCustomer);
			toReturn.Add("LookupCollectionViaEventAppointmentChangeLog", _lookupCollectionViaEventAppointmentChangeLog);
			toReturn.Add("LookupCollectionViaPreQualificationResult_______", _lookupCollectionViaPreQualificationResult_______);
			toReturn.Add("LookupCollectionViaPreQualificationResult______", _lookupCollectionViaPreQualificationResult______);
			toReturn.Add("LookupCollectionViaEventAppointmentCancellationLog", _lookupCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("LookupCollectionViaPreQualificationResult________", _lookupCollectionViaPreQualificationResult________);
			toReturn.Add("MarketingOffersCollectionViaEventMarketingOffers", _marketingOffersCollectionViaEventMarketingOffers);
			toReturn.Add("MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping", _marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping);
			toReturn.Add("NotesDetailsCollectionViaCallQueueCustomer", _notesDetailsCollectionViaCallQueueCustomer);
			toReturn.Add("NotificationCollectionViaEventNotification", _notificationCollectionViaEventNotification);
			toReturn.Add("OrganizationCollectionViaEventAccountTestHcpcsCode", _organizationCollectionViaEventAccountTestHcpcsCode);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__", _organizationRoleUserCollectionViaHospitalPartnerCustomer__);
			toReturn.Add("OrganizationRoleUserCollectionViaSeminars", _organizationRoleUserCollectionViaSeminars);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_", _organizationRoleUserCollectionViaHospitalPartnerCustomer_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventStaffAssignment_", _organizationRoleUserCollectionViaEventStaffAssignment_);
			toReturn.Add("OrganizationRoleUserCollectionViaHospitalPartnerCustomer", _organizationRoleUserCollectionViaHospitalPartnerCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaEventStaffAssignment__", _organizationRoleUserCollectionViaEventStaffAssignment__);
			toReturn.Add("OrganizationRoleUserCollectionViaEventPhysicianTest__", _organizationRoleUserCollectionViaEventPhysicianTest__);
			toReturn.Add("OrganizationRoleUserCollectionViaEventPhysicianTest_", _organizationRoleUserCollectionViaEventPhysicianTest_);
			toReturn.Add("OrganizationRoleUserCollectionViaHostPayment", _organizationRoleUserCollectionViaHostPayment);
			toReturn.Add("OrganizationRoleUserCollectionViaEventPhysicianTest", _organizationRoleUserCollectionViaEventPhysicianTest);
			toReturn.Add("OrganizationRoleUserCollectionViaEventStaffAssignment", _organizationRoleUserCollectionViaEventStaffAssignment);
			toReturn.Add("OrganizationRoleUserCollectionViaEventAppointmentCancellationLog", _organizationRoleUserCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("OrganizationRoleUserCollectionViaEventAppointmentChangeLog", _organizationRoleUserCollectionViaEventAppointmentChangeLog);
			toReturn.Add("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode", _organizationRoleUserCollectionViaEventAccountTestHcpcsCode);
			toReturn.Add("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_", _organizationRoleUserCollectionViaEventAccountTestHcpcsCode_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_", _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult", _organizationRoleUserCollectionViaEventCustomerResult);
			toReturn.Add("OrganizationRoleUserCollectionViaEventAppointmentChangeLog_", _organizationRoleUserCollectionViaEventAppointmentChangeLog_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer", _organizationRoleUserCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("OrganizationRoleUserCollectionViaDisqualifiedTest_", _organizationRoleUserCollectionViaDisqualifiedTest_);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer__", _organizationRoleUserCollectionViaCallQueueCustomer__);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer", _organizationRoleUserCollectionViaCallQueueCustomer);
			toReturn.Add("OrganizationRoleUserCollectionViaCallQueueCustomer_", _organizationRoleUserCollectionViaCallQueueCustomer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomEventNotification", _organizationRoleUserCollectionViaCustomEventNotification);
			toReturn.Add("OrganizationRoleUserCollectionViaDisqualifiedTest", _organizationRoleUserCollectionViaDisqualifiedTest);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_);
			toReturn.Add("OrganizationRoleUserCollectionViaCustomerRegistrationNotes", _organizationRoleUserCollectionViaCustomerRegistrationNotes);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_____", _organizationRoleUserCollectionViaEventCustomerResult_____);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult________", _organizationRoleUserCollectionViaEventCustomerResult________);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult___", _organizationRoleUserCollectionViaEventCustomerResult___);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult__", _organizationRoleUserCollectionViaEventCustomerResult__);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult______", _organizationRoleUserCollectionViaEventCustomerResult______);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult____", _organizationRoleUserCollectionViaEventCustomerResult____);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomers", _organizationRoleUserCollectionViaEventCustomers);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomers_", _organizationRoleUserCollectionViaEventCustomers_);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_______", _organizationRoleUserCollectionViaEventCustomerResult_______);
			toReturn.Add("OrganizationRoleUserCollectionViaEventCustomerResult_", _organizationRoleUserCollectionViaEventCustomerResult_);
			toReturn.Add("PackageCollectionViaEventPackageDetails", _packageCollectionViaEventPackageDetails);
			toReturn.Add("PhysicianEvaluationCollectionViaPhysicianInvoiceItem", _physicianEvaluationCollectionViaPhysicianInvoiceItem);
			toReturn.Add("PhysicianInvoiceCollectionViaPhysicianInvoiceItem", _physicianInvoiceCollectionViaPhysicianInvoiceItem);
			toReturn.Add("PhysicianProfileCollectionViaPhysicianEventAssignment", _physicianProfileCollectionViaPhysicianEventAssignment);
			toReturn.Add("PhysicianProfileCollectionViaPhysicianEventAssignment_", _physicianProfileCollectionViaPhysicianEventAssignment_);
			toReturn.Add("PodDetailsCollectionViaEventStaffAssignment", _podDetailsCollectionViaEventStaffAssignment);
			toReturn.Add("PodDetailsCollectionViaEventPod", _podDetailsCollectionViaEventPod);
			toReturn.Add("PodRoomCollectionViaEventPackageDetails", _podRoomCollectionViaEventPackageDetails);
			toReturn.Add("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer", _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer);
			toReturn.Add("PreQualificationQuestionCollectionViaDisqualifiedTest", _preQualificationQuestionCollectionViaDisqualifiedTest);
			toReturn.Add("PreQualificationTestTemplateCollectionViaEventTest", _preQualificationTestTemplateCollectionViaEventTest);
			toReturn.Add("ProductCollectionViaEventProductExclusion", _productCollectionViaEventProductExclusion);
			toReturn.Add("ProspectCustomerCollectionViaCallQueueCustomer", _prospectCustomerCollectionViaCallQueueCustomer);
			toReturn.Add("ProspectsCollectionViaHostPayment", _prospectsCollectionViaHostPayment);
			toReturn.Add("ProspectsCollectionViaHostEventDetails", _prospectsCollectionViaHostEventDetails);
			toReturn.Add("RefundRequestCollectionViaEventAppointmentCancellationLog", _refundRequestCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog", _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog);
			toReturn.Add("RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog", _rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog);
			toReturn.Add("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_", _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_);
			toReturn.Add("ScheduleTemplateCollectionViaEventScheduleTemplate", _scheduleTemplateCollectionViaEventScheduleTemplate);
			toReturn.Add("StaffEventRoleCollectionViaEventStaffAssignment", _staffEventRoleCollectionViaEventStaffAssignment);
			toReturn.Add("SurveyTemplateCollectionViaEventSurveyTemplate", _surveyTemplateCollectionViaEventSurveyTemplate);
			toReturn.Add("TaskDetailsCollectionViaEventTaskDetails", _taskDetailsCollectionViaEventTaskDetails);
			toReturn.Add("TempCartCollectionViaPreQualificationResult", _tempCartCollectionViaPreQualificationResult);
			toReturn.Add("TerritoryCollectionViaEventPod", _territoryCollectionViaEventPod);
			toReturn.Add("TestCollectionViaEventPhysicianTest", _testCollectionViaEventPhysicianTest);
			toReturn.Add("TestCollectionViaDisqualifiedTest", _testCollectionViaDisqualifiedTest);
			toReturn.Add("TestCollectionViaEventTest", _testCollectionViaEventTest);
			toReturn.Add("TestCollectionViaCustomerEventTestFinding", _testCollectionViaCustomerEventTestFinding);
			toReturn.Add("TestCollectionViaDependentDisqualifiedTest", _testCollectionViaDependentDisqualifiedTest);
			toReturn.Add("TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode", _testHcpcsCodeCollectionViaEventAccountTestHcpcsCode);
			toReturn.Add("ZipCollectionViaEventZip", _zipCollectionViaEventZip);
			toReturn.Add("EventAccount", _eventAccount);
			return toReturn;
		}
		
		/// <summary> Adds the internals to the active context. </summary>
		protected override void AddInternalsToContext()
		{
			if(_afmarketingMaterial!=null)
			{
				_afmarketingMaterial.ActiveContext = base.ActiveContext;
			}
			if(_callDetails!=null)
			{
				_callDetails.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCustomer!=null)
			{
				_callQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_customerClinicalQuestionAnswer!=null)
			{
				_customerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerEventTestFinding!=null)
			{
				_customerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_customerOrderHistory!=null)
			{
				_customerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_customerRegistrationNotes!=null)
			{
				_customerRegistrationNotes.ActiveContext = base.ActiveContext;
			}
			if(_customEventNotification!=null)
			{
				_customEventNotification.ActiveContext = base.ActiveContext;
			}
			if(_dependentDisqualifiedTest!=null)
			{
				_dependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_disqualifiedTest!=null)
			{
				_disqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventAccountTestHcpcsCode!=null)
			{
				_eventAccountTestHcpcsCode.ActiveContext = base.ActiveContext;
			}
			if(_eventAffiliateDetails!=null)
			{
				_eventAffiliateDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventAppointmentCancellationLog!=null)
			{
				_eventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_eventAppointmentChangeLog_!=null)
			{
				_eventAppointmentChangeLog_.ActiveContext = base.ActiveContext;
			}
			if(_eventAppointmentChangeLog!=null)
			{
				_eventAppointmentChangeLog.ActiveContext = base.ActiveContext;
			}
			if(_eventCallDetails!=null)
			{
				_eventCallDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventChecklistTemplate!=null)
			{
				_eventChecklistTemplate.ActiveContext = base.ActiveContext;
			}
			if(_eventCoupons!=null)
			{
				_eventCoupons.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomerQuestionAnswer!=null)
			{
				_eventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomerResult!=null)
			{
				_eventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomers!=null)
			{
				_eventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventFluConsentTemplate!=null)
			{
				_eventFluConsentTemplate.ActiveContext = base.ActiveContext;
			}
			if(_eventHospitalFacility!=null)
			{
				_eventHospitalFacility.ActiveContext = base.ActiveContext;
			}
			if(_eventHospitalPartner!=null)
			{
				_eventHospitalPartner.ActiveContext = base.ActiveContext;
			}
			if(_eventHostPromotions!=null)
			{
				_eventHostPromotions.ActiveContext = base.ActiveContext;
			}
			if(_eventMarketingOffers!=null)
			{
				_eventMarketingOffers.ActiveContext = base.ActiveContext;
			}
			if(_eventMeetingDetails!=null)
			{
				_eventMeetingDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventNotesLog!=null)
			{
				_eventNotesLog.ActiveContext = base.ActiveContext;
			}
			if(_eventNotification!=null)
			{
				_eventNotification.ActiveContext = base.ActiveContext;
			}
			if(_eventPackageDetails!=null)
			{
				_eventPackageDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventPhysicianTest!=null)
			{
				_eventPhysicianTest.ActiveContext = base.ActiveContext;
			}
			if(_eventPod!=null)
			{
				_eventPod.ActiveContext = base.ActiveContext;
			}
			if(_eventProductExclusion!=null)
			{
				_eventProductExclusion.ActiveContext = base.ActiveContext;
			}
			if(_eventProductType!=null)
			{
				_eventProductType.ActiveContext = base.ActiveContext;
			}
			if(_eventPublication!=null)
			{
				_eventPublication.ActiveContext = base.ActiveContext;
			}
			if(_eventScheduleTemplate!=null)
			{
				_eventScheduleTemplate.ActiveContext = base.ActiveContext;
			}
			if(_eventSchedulingSlot!=null)
			{
				_eventSchedulingSlot.ActiveContext = base.ActiveContext;
			}
			if(_eventStaffAssignment!=null)
			{
				_eventStaffAssignment.ActiveContext = base.ActiveContext;
			}
			if(_eventSurveyTemplate!=null)
			{
				_eventSurveyTemplate.ActiveContext = base.ActiveContext;
			}
			if(_eventTaskDetails!=null)
			{
				_eventTaskDetails.ActiveContext = base.ActiveContext;
			}
			if(_eventTest!=null)
			{
				_eventTest.ActiveContext = base.ActiveContext;
			}
			if(_eventZip!=null)
			{
				_eventZip.ActiveContext = base.ActiveContext;
			}
			if(_healthPlanFillEventCallQueue!=null)
			{
				_healthPlanFillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_hospitalPartnerCustomer!=null)
			{
				_hospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_hospitalPartnerEventNotes!=null)
			{
				_hospitalPartnerEventNotes.ActiveContext = base.ActiveContext;
			}
			if(_hostEventDetails!=null)
			{
				_hostEventDetails.ActiveContext = base.ActiveContext;
			}
			if(_hostPayment!=null)
			{
				_hostPayment.ActiveContext = base.ActiveContext;
			}
			if(_marketingPrintOrderEventMapping!=null)
			{
				_marketingPrintOrderEventMapping.ActiveContext = base.ActiveContext;
			}
			if(_physicianEventAssignment!=null)
			{
				_physicianEventAssignment.ActiveContext = base.ActiveContext;
			}
			if(_physicianInvoiceItem!=null)
			{
				_physicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationResult!=null)
			{
				_preQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_resultArchiveUpload!=null)
			{
				_resultArchiveUpload.ActiveContext = base.ActiveContext;
			}
			if(_seminars!=null)
			{
				_seminars.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaCallQueueCustomer!=null)
			{
				_accountCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_accountCollectionViaCustomEventNotification!=null)
			{
				_accountCollectionViaCustomEventNotification.ActiveContext = base.ActiveContext;
			}
			if(_activityTypeCollectionViaCallQueueCustomer!=null)
			{
				_activityTypeCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_addressCollectionViaHostPayment!=null)
			{
				_addressCollectionViaHostPayment.ActiveContext = base.ActiveContext;
			}
			if(_afaffiliateCampaignCollectionViaEventCustomers!=null)
			{
				_afaffiliateCampaignCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_affiliateProfileCollectionViaEventAffiliateDetails!=null)
			{
				_affiliateProfileCollectionViaEventAffiliateDetails.ActiveContext = base.ActiveContext;
			}
			if(_afmarketingMaterialTypeCollectionViaAfmarketingMaterial!=null)
			{
				_afmarketingMaterialTypeCollectionViaAfmarketingMaterial.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCollectionViaCallQueueCustomer!=null)
			{
				_callQueueCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_callQueueCriteriaCollectionViaCallQueueCustomer!=null)
			{
				_callQueueCriteriaCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_callsCollectionViaPreQualificationResult!=null)
			{
				_callsCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_campaignCollectionViaCallQueueCustomer!=null)
			{
				_campaignCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_campaignCollectionViaEventCustomers!=null)
			{
				_campaignCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_checkListTemplateCollectionViaEventChecklistTemplate!=null)
			{
				_checkListTemplateCollectionViaEventChecklistTemplate.ActiveContext = base.ActiveContext;
			}
			if(_contactCallCollectionViaEventCallDetails!=null)
			{
				_contactCallCollectionViaEventCallDetails.ActiveContext = base.ActiveContext;
			}
			if(_contactMeetingCollectionViaEventMeetingDetails!=null)
			{
				_contactMeetingCollectionViaEventMeetingDetails.ActiveContext = base.ActiveContext;
			}
			if(_corporateUploadCollectionViaCustomerOrderHistory!=null)
			{
				_corporateUploadCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_couponsCollectionViaEventCoupons!=null)
			{
				_couponsCollectionViaEventCoupons.ActiveContext = base.ActiveContext;
			}
			if(_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaHospitalPartnerCustomer!=null)
			{
				_customerProfileCollectionViaHospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_customerProfileCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaEventCustomerResult!=null)
			{
				_customerProfileCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaDependentDisqualifiedTest!=null)
			{
				_customerProfileCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaPhysicianInvoiceItem!=null)
			{
				_customerProfileCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaEventCustomers!=null)
			{
				_customerProfileCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaDisqualifiedTest!=null)
			{
				_customerProfileCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaCustomerEventTestFinding!=null)
			{
				_customerProfileCollectionViaCustomerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaCustomerOrderHistory!=null)
			{
				_customerProfileCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaPreQualificationResult!=null)
			{
				_customerProfileCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_customerProfileCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileCollectionViaCallQueueCustomer!=null)
			{
				_customerProfileCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_customerProfileHistoryCollectionViaEventCustomers!=null)
			{
				_customerProfileHistoryCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog!=null)
			{
				_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_customerRegistrationNotesCollectionViaEventCustomers!=null)
			{
				_customerRegistrationNotesCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventAppointmentCollectionViaEventCustomers!=null)
			{
				_eventAppointmentCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaEventAppointmentCancellationLog!=null)
			{
				_eventCustomersCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCallQueueCustomer!=null)
			{
				_eventCustomersCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaDisqualifiedTest!=null)
			{
				_eventCustomersCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaEventAppointmentChangeLog_!=null)
			{
				_eventCustomersCollectionViaEventAppointmentChangeLog_.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_eventCustomersCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaCustomerOrderHistory!=null)
			{
				_eventCustomersCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaDependentDisqualifiedTest!=null)
			{
				_eventCustomersCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_eventCustomersCollectionViaEventAppointmentChangeLog!=null)
			{
				_eventCustomersCollectionViaEventAppointmentChangeLog.ActiveContext = base.ActiveContext;
			}
			if(_eventNoteCollectionViaEventNotesLog!=null)
			{
				_eventNoteCollectionViaEventNotesLog.ActiveContext = base.ActiveContext;
			}
			if(_eventPackageDetailsCollectionViaCustomerOrderHistory!=null)
			{
				_eventPackageDetailsCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_eventPodRoomCollectionViaEventSchedulingSlot!=null)
			{
				_eventPodRoomCollectionViaEventSchedulingSlot.ActiveContext = base.ActiveContext;
			}
			if(_eventTestCollectionViaCustomerOrderHistory!=null)
			{
				_eventTestCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_fileCollectionViaResultArchiveUpload!=null)
			{
				_fileCollectionViaResultArchiveUpload.ActiveContext = base.ActiveContext;
			}
			if(_fluConsentTemplateCollectionViaEventFluConsentTemplate!=null)
			{
				_fluConsentTemplateCollectionViaEventFluConsentTemplate.ActiveContext = base.ActiveContext;
			}
			if(_gcNotGivenReasonCollectionViaEventCustomers!=null)
			{
				_gcNotGivenReasonCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_hafTemplateCollectionViaEventPackageDetails!=null)
			{
				_hafTemplateCollectionViaEventPackageDetails.ActiveContext = base.ActiveContext;
			}
			if(_hafTemplateCollectionViaEventTest!=null)
			{
				_hafTemplateCollectionViaEventTest.ActiveContext = base.ActiveContext;
			}
			if(_hafTemplateCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue!=null)
			{
				_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.ActiveContext = base.ActiveContext;
			}
			if(_hospitalFacilityCollectionViaEventHospitalFacility!=null)
			{
				_hospitalFacilityCollectionViaEventHospitalFacility.ActiveContext = base.ActiveContext;
			}
			if(_hospitalFacilityCollectionViaEventCustomers!=null)
			{
				_hospitalFacilityCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_hospitalPartnerCollectionViaEventHospitalPartner!=null)
			{
				_hospitalPartnerCollectionViaEventHospitalPartner.ActiveContext = base.ActiveContext;
			}
			if(_languageCollectionViaCallQueueCustomer!=null)
			{
				_languageCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventSchedulingSlot!=null)
			{
				_lookupCollectionViaEventSchedulingSlot.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventPackageDetails!=null)
			{
				_lookupCollectionViaEventPackageDetails.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventTest!=null)
			{
				_lookupCollectionViaEventTest.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomers!=null)
			{
				_lookupCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomerResult!=null)
			{
				_lookupCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventCustomers_!=null)
			{
				_lookupCollectionViaEventCustomers_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventTest__!=null)
			{
				_lookupCollectionViaEventTest__.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventTest_!=null)
			{
				_lookupCollectionViaEventTest_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_____!=null)
			{
				_lookupCollectionViaPreQualificationResult_____.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomEventNotification!=null)
			{
				_lookupCollectionViaCustomEventNotification.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerRegistrationNotes!=null)
			{
				_lookupCollectionViaCustomerRegistrationNotes.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaHostPayment_!=null)
			{
				_lookupCollectionViaHostPayment_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCustomerOrderHistory!=null)
			{
				_lookupCollectionViaCustomerOrderHistory.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult__!=null)
			{
				_lookupCollectionViaPreQualificationResult__.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult___!=null)
			{
				_lookupCollectionViaPreQualificationResult___.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_!=null)
			{
				_lookupCollectionViaPreQualificationResult_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult____!=null)
			{
				_lookupCollectionViaPreQualificationResult____.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult!=null)
			{
				_lookupCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventAppointmentChangeLog_!=null)
			{
				_lookupCollectionViaEventAppointmentChangeLog_.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaHostPayment!=null)
			{
				_lookupCollectionViaHostPayment.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaCallQueueCustomer!=null)
			{
				_lookupCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventAppointmentChangeLog!=null)
			{
				_lookupCollectionViaEventAppointmentChangeLog.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult_______!=null)
			{
				_lookupCollectionViaPreQualificationResult_______.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult______!=null)
			{
				_lookupCollectionViaPreQualificationResult______.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaEventAppointmentCancellationLog!=null)
			{
				_lookupCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_lookupCollectionViaPreQualificationResult________!=null)
			{
				_lookupCollectionViaPreQualificationResult________.ActiveContext = base.ActiveContext;
			}
			if(_marketingOffersCollectionViaEventMarketingOffers!=null)
			{
				_marketingOffersCollectionViaEventMarketingOffers.ActiveContext = base.ActiveContext;
			}
			if(_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping!=null)
			{
				_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.ActiveContext = base.ActiveContext;
			}
			if(_notesDetailsCollectionViaCallQueueCustomer!=null)
			{
				_notesDetailsCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_notificationCollectionViaEventNotification!=null)
			{
				_notificationCollectionViaEventNotification.ActiveContext = base.ActiveContext;
			}
			if(_organizationCollectionViaEventAccountTestHcpcsCode!=null)
			{
				_organizationCollectionViaEventAccountTestHcpcsCode.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer__!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaSeminars!=null)
			{
				_organizationRoleUserCollectionViaSeminars.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer_!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventStaffAssignment_!=null)
			{
				_organizationRoleUserCollectionViaEventStaffAssignment_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHospitalPartnerCustomer!=null)
			{
				_organizationRoleUserCollectionViaHospitalPartnerCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventStaffAssignment__!=null)
			{
				_organizationRoleUserCollectionViaEventStaffAssignment__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventPhysicianTest__!=null)
			{
				_organizationRoleUserCollectionViaEventPhysicianTest__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventPhysicianTest_!=null)
			{
				_organizationRoleUserCollectionViaEventPhysicianTest_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaHostPayment!=null)
			{
				_organizationRoleUserCollectionViaHostPayment.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventPhysicianTest!=null)
			{
				_organizationRoleUserCollectionViaEventPhysicianTest.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventStaffAssignment!=null)
			{
				_organizationRoleUserCollectionViaEventStaffAssignment.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventAppointmentCancellationLog!=null)
			{
				_organizationRoleUserCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventAppointmentChangeLog!=null)
			{
				_organizationRoleUserCollectionViaEventAppointmentChangeLog.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventAccountTestHcpcsCode!=null)
			{
				_organizationRoleUserCollectionViaEventAccountTestHcpcsCode.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_!=null)
			{
				_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventAppointmentChangeLog_!=null)
			{
				_organizationRoleUserCollectionViaEventAppointmentChangeLog_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaDisqualifiedTest_!=null)
			{
				_organizationRoleUserCollectionViaDisqualifiedTest_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer__!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer!=null)
			{
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCallQueueCustomer_!=null)
			{
				_organizationRoleUserCollectionViaCallQueueCustomer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomEventNotification!=null)
			{
				_organizationRoleUserCollectionViaCustomEventNotification.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaDisqualifiedTest!=null)
			{
				_organizationRoleUserCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_!=null)
			{
				_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaCustomerRegistrationNotes!=null)
			{
				_organizationRoleUserCollectionViaCustomerRegistrationNotes.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_____!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_____.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult________!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult________.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult___!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult___.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult__!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult______!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult______.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult____!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult____.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomers!=null)
			{
				_organizationRoleUserCollectionViaEventCustomers.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomers_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomers_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_______!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_______.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUserCollectionViaEventCustomerResult_!=null)
			{
				_organizationRoleUserCollectionViaEventCustomerResult_.ActiveContext = base.ActiveContext;
			}
			if(_packageCollectionViaEventPackageDetails!=null)
			{
				_packageCollectionViaEventPackageDetails.ActiveContext = base.ActiveContext;
			}
			if(_physicianEvaluationCollectionViaPhysicianInvoiceItem!=null)
			{
				_physicianEvaluationCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_physicianInvoiceCollectionViaPhysicianInvoiceItem!=null)
			{
				_physicianInvoiceCollectionViaPhysicianInvoiceItem.ActiveContext = base.ActiveContext;
			}
			if(_physicianProfileCollectionViaPhysicianEventAssignment!=null)
			{
				_physicianProfileCollectionViaPhysicianEventAssignment.ActiveContext = base.ActiveContext;
			}
			if(_physicianProfileCollectionViaPhysicianEventAssignment_!=null)
			{
				_physicianProfileCollectionViaPhysicianEventAssignment_.ActiveContext = base.ActiveContext;
			}
			if(_podDetailsCollectionViaEventStaffAssignment!=null)
			{
				_podDetailsCollectionViaEventStaffAssignment.ActiveContext = base.ActiveContext;
			}
			if(_podDetailsCollectionViaEventPod!=null)
			{
				_podDetailsCollectionViaEventPod.ActiveContext = base.ActiveContext;
			}
			if(_podRoomCollectionViaEventPackageDetails!=null)
			{
				_podRoomCollectionViaEventPackageDetails.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer!=null)
			{
				_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationQuestionCollectionViaDisqualifiedTest!=null)
			{
				_preQualificationQuestionCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_preQualificationTestTemplateCollectionViaEventTest!=null)
			{
				_preQualificationTestTemplateCollectionViaEventTest.ActiveContext = base.ActiveContext;
			}
			if(_productCollectionViaEventProductExclusion!=null)
			{
				_productCollectionViaEventProductExclusion.ActiveContext = base.ActiveContext;
			}
			if(_prospectCustomerCollectionViaCallQueueCustomer!=null)
			{
				_prospectCustomerCollectionViaCallQueueCustomer.ActiveContext = base.ActiveContext;
			}
			if(_prospectsCollectionViaHostPayment!=null)
			{
				_prospectsCollectionViaHostPayment.ActiveContext = base.ActiveContext;
			}
			if(_prospectsCollectionViaHostEventDetails!=null)
			{
				_prospectsCollectionViaHostEventDetails.ActiveContext = base.ActiveContext;
			}
			if(_refundRequestCollectionViaEventAppointmentCancellationLog!=null)
			{
				_refundRequestCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog!=null)
			{
				_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.ActiveContext = base.ActiveContext;
			}
			if(_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog!=null)
			{
				_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.ActiveContext = base.ActiveContext;
			}
			if(_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_!=null)
			{
				_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.ActiveContext = base.ActiveContext;
			}
			if(_scheduleTemplateCollectionViaEventScheduleTemplate!=null)
			{
				_scheduleTemplateCollectionViaEventScheduleTemplate.ActiveContext = base.ActiveContext;
			}
			if(_staffEventRoleCollectionViaEventStaffAssignment!=null)
			{
				_staffEventRoleCollectionViaEventStaffAssignment.ActiveContext = base.ActiveContext;
			}
			if(_surveyTemplateCollectionViaEventSurveyTemplate!=null)
			{
				_surveyTemplateCollectionViaEventSurveyTemplate.ActiveContext = base.ActiveContext;
			}
			if(_taskDetailsCollectionViaEventTaskDetails!=null)
			{
				_taskDetailsCollectionViaEventTaskDetails.ActiveContext = base.ActiveContext;
			}
			if(_tempCartCollectionViaPreQualificationResult!=null)
			{
				_tempCartCollectionViaPreQualificationResult.ActiveContext = base.ActiveContext;
			}
			if(_territoryCollectionViaEventPod!=null)
			{
				_territoryCollectionViaEventPod.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaEventPhysicianTest!=null)
			{
				_testCollectionViaEventPhysicianTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaDisqualifiedTest!=null)
			{
				_testCollectionViaDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaEventTest!=null)
			{
				_testCollectionViaEventTest.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaCustomerEventTestFinding!=null)
			{
				_testCollectionViaCustomerEventTestFinding.ActiveContext = base.ActiveContext;
			}
			if(_testCollectionViaDependentDisqualifiedTest!=null)
			{
				_testCollectionViaDependentDisqualifiedTest.ActiveContext = base.ActiveContext;
			}
			if(_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode!=null)
			{
				_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode.ActiveContext = base.ActiveContext;
			}
			if(_zipCollectionViaEventZip!=null)
			{
				_zipCollectionViaEventZip.ActiveContext = base.ActiveContext;
			}
			if(_communicationMode!=null)
			{
				_communicationMode.ActiveContext = base.ActiveContext;
			}
			if(_eventType!=null)
			{
				_eventType.ActiveContext = base.ActiveContext;
			}
			if(_hafTemplate!=null)
			{
				_hafTemplate.ActiveContext = base.ActiveContext;
			}
			if(_lookup!=null)
			{
				_lookup.ActiveContext = base.ActiveContext;
			}
			if(_lookup____!=null)
			{
				_lookup____.ActiveContext = base.ActiveContext;
			}
			if(_lookup___!=null)
			{
				_lookup___.ActiveContext = base.ActiveContext;
			}
			if(_lookup__!=null)
			{
				_lookup__.ActiveContext = base.ActiveContext;
			}
			if(_lookup_!=null)
			{
				_lookup_.ActiveContext = base.ActiveContext;
			}
			if(_notesDetails!=null)
			{
				_notesDetails.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser_!=null)
			{
				_organizationRoleUser_.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser____!=null)
			{
				_organizationRoleUser____.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser__!=null)
			{
				_organizationRoleUser__.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser!=null)
			{
				_organizationRoleUser.ActiveContext = base.ActiveContext;
			}
			if(_organizationRoleUser___!=null)
			{
				_organizationRoleUser___.ActiveContext = base.ActiveContext;
			}
			if(_scheduleMethod!=null)
			{
				_scheduleMethod.ActiveContext = base.ActiveContext;
			}
			if(_eventAccount!=null)
			{
				_eventAccount.ActiveContext = base.ActiveContext;
			}
		}

		/// <summary> Initializes the class members</summary>
		protected virtual void InitClassMembers()
		{

			_afmarketingMaterial = null;
			_callDetails = null;
			_callQueueCustomer = null;
			_customerClinicalQuestionAnswer = null;
			_customerEventTestFinding = null;
			_customerOrderHistory = null;
			_customerRegistrationNotes = null;
			_customEventNotification = null;
			_dependentDisqualifiedTest = null;
			_disqualifiedTest = null;
			_eventAccountTestHcpcsCode = null;
			_eventAffiliateDetails = null;
			_eventAppointmentCancellationLog = null;
			_eventAppointmentChangeLog_ = null;
			_eventAppointmentChangeLog = null;
			_eventCallDetails = null;
			_eventChecklistTemplate = null;
			_eventCoupons = null;
			_eventCustomerQuestionAnswer = null;
			_eventCustomerResult = null;
			_eventCustomers = null;
			_eventFluConsentTemplate = null;
			_eventHospitalFacility = null;
			_eventHospitalPartner = null;
			_eventHostPromotions = null;
			_eventMarketingOffers = null;
			_eventMeetingDetails = null;
			_eventNotesLog = null;
			_eventNotification = null;
			_eventPackageDetails = null;
			_eventPhysicianTest = null;
			_eventPod = null;
			_eventProductExclusion = null;
			_eventProductType = null;
			_eventPublication = null;
			_eventScheduleTemplate = null;
			_eventSchedulingSlot = null;
			_eventStaffAssignment = null;
			_eventSurveyTemplate = null;
			_eventTaskDetails = null;
			_eventTest = null;
			_eventZip = null;
			_healthPlanFillEventCallQueue = null;
			_hospitalPartnerCustomer = null;
			_hospitalPartnerEventNotes = null;
			_hostEventDetails = null;
			_hostPayment = null;
			_marketingPrintOrderEventMapping = null;
			_physicianEventAssignment = null;
			_physicianInvoiceItem = null;
			_preQualificationResult = null;
			_resultArchiveUpload = null;
			_seminars = null;
			_accountCollectionViaCallQueueCustomer = null;
			_accountCollectionViaCustomEventNotification = null;
			_activityTypeCollectionViaCallQueueCustomer = null;
			_addressCollectionViaHostPayment = null;
			_afaffiliateCampaignCollectionViaEventCustomers = null;
			_affiliateProfileCollectionViaEventAffiliateDetails = null;
			_afmarketingMaterialTypeCollectionViaAfmarketingMaterial = null;
			_callQueueCollectionViaCallQueueCustomer = null;
			_callQueueCriteriaCollectionViaCallQueueCustomer = null;
			_callsCollectionViaPreQualificationResult = null;
			_campaignCollectionViaCallQueueCustomer = null;
			_campaignCollectionViaEventCustomers = null;
			_checkListTemplateCollectionViaEventChecklistTemplate = null;
			_contactCallCollectionViaEventCallDetails = null;
			_contactMeetingCollectionViaEventMeetingDetails = null;
			_corporateUploadCollectionViaCustomerOrderHistory = null;
			_couponsCollectionViaEventCoupons = null;
			_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = null;
			_customerProfileCollectionViaHospitalPartnerCustomer = null;
			_customerProfileCollectionViaEventCustomerQuestionAnswer = null;
			_customerProfileCollectionViaEventCustomerResult = null;
			_customerProfileCollectionViaDependentDisqualifiedTest = null;
			_customerProfileCollectionViaPhysicianInvoiceItem = null;
			_customerProfileCollectionViaEventCustomers = null;
			_customerProfileCollectionViaDisqualifiedTest = null;
			_customerProfileCollectionViaCustomerEventTestFinding = null;
			_customerProfileCollectionViaCustomerOrderHistory = null;
			_customerProfileCollectionViaPreQualificationResult = null;
			_customerProfileCollectionViaCustomerClinicalQuestionAnswer = null;
			_customerProfileCollectionViaCallQueueCustomer = null;
			_customerProfileHistoryCollectionViaEventCustomers = null;
			_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog = null;
			_customerRegistrationNotesCollectionViaEventCustomers = null;
			_eventAppointmentCollectionViaEventCustomers = null;
			_eventCustomersCollectionViaEventAppointmentCancellationLog = null;
			_eventCustomersCollectionViaCallQueueCustomer = null;
			_eventCustomersCollectionViaDisqualifiedTest = null;
			_eventCustomersCollectionViaEventAppointmentChangeLog_ = null;
			_eventCustomersCollectionViaEventCustomerQuestionAnswer = null;
			_eventCustomersCollectionViaCustomerOrderHistory = null;
			_eventCustomersCollectionViaDependentDisqualifiedTest = null;
			_eventCustomersCollectionViaEventAppointmentChangeLog = null;
			_eventNoteCollectionViaEventNotesLog = null;
			_eventPackageDetailsCollectionViaCustomerOrderHistory = null;
			_eventPodRoomCollectionViaEventSchedulingSlot = null;
			_eventTestCollectionViaCustomerOrderHistory = null;
			_fileCollectionViaResultArchiveUpload = null;
			_fluConsentTemplateCollectionViaEventFluConsentTemplate = null;
			_gcNotGivenReasonCollectionViaEventCustomers = null;
			_hafTemplateCollectionViaEventPackageDetails = null;
			_hafTemplateCollectionViaEventTest = null;
			_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = null;
			_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue = null;
			_hospitalFacilityCollectionViaEventHospitalFacility = null;
			_hospitalFacilityCollectionViaEventCustomers = null;
			_hospitalPartnerCollectionViaEventHospitalPartner = null;
			_languageCollectionViaCallQueueCustomer = null;
			_lookupCollectionViaEventSchedulingSlot = null;
			_lookupCollectionViaEventPackageDetails = null;
			_lookupCollectionViaEventTest = null;
			_lookupCollectionViaEventCustomers = null;
			_lookupCollectionViaEventCustomerResult = null;
			_lookupCollectionViaEventCustomers_ = null;
			_lookupCollectionViaEventTest__ = null;
			_lookupCollectionViaEventTest_ = null;
			_lookupCollectionViaPreQualificationResult_____ = null;
			_lookupCollectionViaCustomEventNotification = null;
			_lookupCollectionViaCustomerRegistrationNotes = null;
			_lookupCollectionViaHostPayment_ = null;
			_lookupCollectionViaCustomerOrderHistory = null;
			_lookupCollectionViaPreQualificationResult__ = null;
			_lookupCollectionViaPreQualificationResult___ = null;
			_lookupCollectionViaPreQualificationResult_ = null;
			_lookupCollectionViaPreQualificationResult____ = null;
			_lookupCollectionViaPreQualificationResult = null;
			_lookupCollectionViaEventAppointmentChangeLog_ = null;
			_lookupCollectionViaHostPayment = null;
			_lookupCollectionViaCallQueueCustomer = null;
			_lookupCollectionViaEventAppointmentChangeLog = null;
			_lookupCollectionViaPreQualificationResult_______ = null;
			_lookupCollectionViaPreQualificationResult______ = null;
			_lookupCollectionViaEventAppointmentCancellationLog = null;
			_lookupCollectionViaPreQualificationResult________ = null;
			_marketingOffersCollectionViaEventMarketingOffers = null;
			_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping = null;
			_notesDetailsCollectionViaCallQueueCustomer = null;
			_notificationCollectionViaEventNotification = null;
			_organizationCollectionViaEventAccountTestHcpcsCode = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = null;
			_organizationRoleUserCollectionViaSeminars = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = null;
			_organizationRoleUserCollectionViaEventStaffAssignment_ = null;
			_organizationRoleUserCollectionViaHospitalPartnerCustomer = null;
			_organizationRoleUserCollectionViaEventStaffAssignment__ = null;
			_organizationRoleUserCollectionViaEventPhysicianTest__ = null;
			_organizationRoleUserCollectionViaEventPhysicianTest_ = null;
			_organizationRoleUserCollectionViaHostPayment = null;
			_organizationRoleUserCollectionViaEventPhysicianTest = null;
			_organizationRoleUserCollectionViaEventStaffAssignment = null;
			_organizationRoleUserCollectionViaEventAppointmentCancellationLog = null;
			_organizationRoleUserCollectionViaEventAppointmentChangeLog = null;
			_organizationRoleUserCollectionViaEventAccountTestHcpcsCode = null;
			_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_ = null;
			_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = null;
			_organizationRoleUserCollectionViaEventCustomerResult = null;
			_organizationRoleUserCollectionViaEventAppointmentChangeLog_ = null;
			_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = null;
			_organizationRoleUserCollectionViaDisqualifiedTest_ = null;
			_organizationRoleUserCollectionViaCallQueueCustomer__ = null;
			_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = null;
			_organizationRoleUserCollectionViaCallQueueCustomer = null;
			_organizationRoleUserCollectionViaCallQueueCustomer_ = null;
			_organizationRoleUserCollectionViaCustomEventNotification = null;
			_organizationRoleUserCollectionViaDisqualifiedTest = null;
			_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = null;
			_organizationRoleUserCollectionViaCustomerRegistrationNotes = null;
			_organizationRoleUserCollectionViaEventCustomerResult_____ = null;
			_organizationRoleUserCollectionViaEventCustomerResult________ = null;
			_organizationRoleUserCollectionViaEventCustomerResult___ = null;
			_organizationRoleUserCollectionViaEventCustomerResult__ = null;
			_organizationRoleUserCollectionViaEventCustomerResult______ = null;
			_organizationRoleUserCollectionViaEventCustomerResult____ = null;
			_organizationRoleUserCollectionViaEventCustomers = null;
			_organizationRoleUserCollectionViaEventCustomers_ = null;
			_organizationRoleUserCollectionViaEventCustomerResult_______ = null;
			_organizationRoleUserCollectionViaEventCustomerResult_ = null;
			_packageCollectionViaEventPackageDetails = null;
			_physicianEvaluationCollectionViaPhysicianInvoiceItem = null;
			_physicianInvoiceCollectionViaPhysicianInvoiceItem = null;
			_physicianProfileCollectionViaPhysicianEventAssignment = null;
			_physicianProfileCollectionViaPhysicianEventAssignment_ = null;
			_podDetailsCollectionViaEventStaffAssignment = null;
			_podDetailsCollectionViaEventPod = null;
			_podRoomCollectionViaEventPackageDetails = null;
			_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = null;
			_preQualificationQuestionCollectionViaDisqualifiedTest = null;
			_preQualificationTestTemplateCollectionViaEventTest = null;
			_productCollectionViaEventProductExclusion = null;
			_prospectCustomerCollectionViaCallQueueCustomer = null;
			_prospectsCollectionViaHostPayment = null;
			_prospectsCollectionViaHostEventDetails = null;
			_refundRequestCollectionViaEventAppointmentCancellationLog = null;
			_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog = null;
			_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog = null;
			_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ = null;
			_scheduleTemplateCollectionViaEventScheduleTemplate = null;
			_staffEventRoleCollectionViaEventStaffAssignment = null;
			_surveyTemplateCollectionViaEventSurveyTemplate = null;
			_taskDetailsCollectionViaEventTaskDetails = null;
			_tempCartCollectionViaPreQualificationResult = null;
			_territoryCollectionViaEventPod = null;
			_testCollectionViaEventPhysicianTest = null;
			_testCollectionViaDisqualifiedTest = null;
			_testCollectionViaEventTest = null;
			_testCollectionViaCustomerEventTestFinding = null;
			_testCollectionViaDependentDisqualifiedTest = null;
			_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode = null;
			_zipCollectionViaEventZip = null;
			_communicationMode = null;
			_eventType = null;
			_hafTemplate = null;
			_lookup = null;
			_lookup____ = null;
			_lookup___ = null;
			_lookup__ = null;
			_lookup_ = null;
			_notesDetails = null;
			_organizationRoleUser_ = null;
			_organizationRoleUser____ = null;
			_organizationRoleUser__ = null;
			_organizationRoleUser = null;
			_organizationRoleUser___ = null;
			_scheduleMethod = null;
			_eventAccount = null;
			PerformDependencyInjection();
			
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		#region Custom Property Hashtable Setup
		/// <summary> Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();

			Dictionary<string, string> fieldHashtable = null;
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventStartTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventEndTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("TimeZone", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventTypeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("ScheduleMethodId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsRescheduled", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("CosttoUseHostSite", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("CommunicationModeId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventNotes", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DateCreated", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("DateModified", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsActive", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("Googleuri", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventActivityTemplateId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("InvitationCode", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("TeamArrivalTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("TeamDepartureTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventStatus", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsSignoff", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("SignoffDatetime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("UpdatedByOrganizationRoleUser", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("CreatedByOrgRoleUserId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AssignedToOrgRoleUserId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventActivityOrgRoleUserId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("SignOffOrgRoleUserId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GenerateHealthAssesmentForm", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EmrNotesId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableAlaCarteOnline", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableAlaCarteCallCenter", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableAlaCarteTechnician", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsDynamicScheduling", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("SlotInterval", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("ServerRooms", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("LunchStartTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("LunchDuration", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("HafTemplateId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("NotifyResultReady", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("CaptureInsuranceId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("InsuranceIdRequired", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsFemaleOnly", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GenerateKynXml", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("RecommendPackage", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AskPreQualifierQuestion", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("FixedGroupScreeningTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("BloodPackageTracking", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("RecordsPackageTracking", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EventCancellationReasonId", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableForCallCenter", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("EnableForTechnician", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsLocked", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsPackageTimeOnly", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GenerateHkynXml", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GenerateMyBioCheckAssessment", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("UpdatedByAdmin", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("IsManual", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("GenerateHealthAssesmentFormStatus", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();

			_fieldsCustomProperties.Add("AllowNonMammoPatients", fieldHashtable);
		}
		#endregion

		/// <summary> Removes the sync logic for member _communicationMode</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncCommunicationMode(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _communicationMode, new PropertyChangedEventHandler( OnCommunicationModePropertyChanged ), "CommunicationMode", EventsEntity.Relations.CommunicationModeEntityUsingCommunicationModeId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.CommunicationModeId } );		
			_communicationMode = null;
		}

		/// <summary> setups the sync logic for member _communicationMode</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncCommunicationMode(IEntity2 relatedEntity)
		{
			if(_communicationMode!=relatedEntity)
			{
				DesetupSyncCommunicationMode(true, true);
				_communicationMode = (CommunicationModeEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _communicationMode, new PropertyChangedEventHandler( OnCommunicationModePropertyChanged ), "CommunicationMode", EventsEntity.Relations.CommunicationModeEntityUsingCommunicationModeId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCommunicationModePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _eventType</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncEventType(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _eventType, new PropertyChangedEventHandler( OnEventTypePropertyChanged ), "EventType", EventsEntity.Relations.EventTypeEntityUsingEventTypeId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.EventTypeId } );		
			_eventType = null;
		}

		/// <summary> setups the sync logic for member _eventType</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncEventType(IEntity2 relatedEntity)
		{
			if(_eventType!=relatedEntity)
			{
				DesetupSyncEventType(true, true);
				_eventType = (EventTypeEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _eventType, new PropertyChangedEventHandler( OnEventTypePropertyChanged ), "EventType", EventsEntity.Relations.EventTypeEntityUsingEventTypeId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnEventTypePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _hafTemplate</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncHafTemplate(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _hafTemplate, new PropertyChangedEventHandler( OnHafTemplatePropertyChanged ), "HafTemplate", EventsEntity.Relations.HafTemplateEntityUsingHafTemplateId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.HafTemplateId } );		
			_hafTemplate = null;
		}

		/// <summary> setups the sync logic for member _hafTemplate</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncHafTemplate(IEntity2 relatedEntity)
		{
			if(_hafTemplate!=relatedEntity)
			{
				DesetupSyncHafTemplate(true, true);
				_hafTemplate = (HafTemplateEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _hafTemplate, new PropertyChangedEventHandler( OnHafTemplatePropertyChanged ), "HafTemplate", EventsEntity.Relations.HafTemplateEntityUsingHafTemplateId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnHafTemplatePropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup, new PropertyChangedEventHandler( OnLookupPropertyChanged ), "Lookup", EventsEntity.Relations.LookupEntityUsingGenerateKynXml, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.GenerateKynXml } );		
			_lookup = null;
		}

		/// <summary> setups the sync logic for member _lookup</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup(IEntity2 relatedEntity)
		{
			if(_lookup!=relatedEntity)
			{
				DesetupSyncLookup(true, true);
				_lookup = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup, new PropertyChangedEventHandler( OnLookupPropertyChanged ), "Lookup", EventsEntity.Relations.LookupEntityUsingGenerateKynXml, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookupPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup____</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup____(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup____, new PropertyChangedEventHandler( OnLookup____PropertyChanged ), "Lookup____", EventsEntity.Relations.LookupEntityUsingGenerateHealthAssesmentFormStatus, true, signalRelatedEntity, "Events____", resetFKFields, new int[] { (int)EventsFieldIndex.GenerateHealthAssesmentFormStatus } );		
			_lookup____ = null;
		}

		/// <summary> setups the sync logic for member _lookup____</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup____(IEntity2 relatedEntity)
		{
			if(_lookup____!=relatedEntity)
			{
				DesetupSyncLookup____(true, true);
				_lookup____ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup____, new PropertyChangedEventHandler( OnLookup____PropertyChanged ), "Lookup____", EventsEntity.Relations.LookupEntityUsingGenerateHealthAssesmentFormStatus, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup____PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup___</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup___(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup___, new PropertyChangedEventHandler( OnLookup___PropertyChanged ), "Lookup___", EventsEntity.Relations.LookupEntityUsingGenerateMyBioCheckAssessment, true, signalRelatedEntity, "Events___", resetFKFields, new int[] { (int)EventsFieldIndex.GenerateMyBioCheckAssessment } );		
			_lookup___ = null;
		}

		/// <summary> setups the sync logic for member _lookup___</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup___(IEntity2 relatedEntity)
		{
			if(_lookup___!=relatedEntity)
			{
				DesetupSyncLookup___(true, true);
				_lookup___ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup___, new PropertyChangedEventHandler( OnLookup___PropertyChanged ), "Lookup___", EventsEntity.Relations.LookupEntityUsingGenerateMyBioCheckAssessment, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup___PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup__</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup__(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup__, new PropertyChangedEventHandler( OnLookup__PropertyChanged ), "Lookup__", EventsEntity.Relations.LookupEntityUsingGenerateHkynXml, true, signalRelatedEntity, "Events__", resetFKFields, new int[] { (int)EventsFieldIndex.GenerateHkynXml } );		
			_lookup__ = null;
		}

		/// <summary> setups the sync logic for member _lookup__</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup__(IEntity2 relatedEntity)
		{
			if(_lookup__!=relatedEntity)
			{
				DesetupSyncLookup__(true, true);
				_lookup__ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup__, new PropertyChangedEventHandler( OnLookup__PropertyChanged ), "Lookup__", EventsEntity.Relations.LookupEntityUsingGenerateHkynXml, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup__PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _lookup_</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncLookup_(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _lookup_, new PropertyChangedEventHandler( OnLookup_PropertyChanged ), "Lookup_", EventsEntity.Relations.LookupEntityUsingEventCancellationReasonId, true, signalRelatedEntity, "Events_", resetFKFields, new int[] { (int)EventsFieldIndex.EventCancellationReasonId } );		
			_lookup_ = null;
		}

		/// <summary> setups the sync logic for member _lookup_</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncLookup_(IEntity2 relatedEntity)
		{
			if(_lookup_!=relatedEntity)
			{
				DesetupSyncLookup_(true, true);
				_lookup_ = (LookupEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _lookup_, new PropertyChangedEventHandler( OnLookup_PropertyChanged ), "Lookup_", EventsEntity.Relations.LookupEntityUsingEventCancellationReasonId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnLookup_PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _notesDetails</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncNotesDetails(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _notesDetails, new PropertyChangedEventHandler( OnNotesDetailsPropertyChanged ), "NotesDetails", EventsEntity.Relations.NotesDetailsEntityUsingEmrNotesId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.EmrNotesId } );		
			_notesDetails = null;
		}

		/// <summary> setups the sync logic for member _notesDetails</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncNotesDetails(IEntity2 relatedEntity)
		{
			if(_notesDetails!=relatedEntity)
			{
				DesetupSyncNotesDetails(true, true);
				_notesDetails = (NotesDetailsEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _notesDetails, new PropertyChangedEventHandler( OnNotesDetailsPropertyChanged ), "NotesDetails", EventsEntity.Relations.NotesDetailsEntityUsingEmrNotesId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnNotesDetailsPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser_</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser_(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser_, new PropertyChangedEventHandler( OnOrganizationRoleUser_PropertyChanged ), "OrganizationRoleUser_", EventsEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, true, signalRelatedEntity, "Events_", resetFKFields, new int[] { (int)EventsFieldIndex.CreatedByOrgRoleUserId } );		
			_organizationRoleUser_ = null;
		}

		/// <summary> setups the sync logic for member _organizationRoleUser_</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser_(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser_!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser_(true, true);
				_organizationRoleUser_ = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser_, new PropertyChangedEventHandler( OnOrganizationRoleUser_PropertyChanged ), "OrganizationRoleUser_", EventsEntity.Relations.OrganizationRoleUserEntityUsingCreatedByOrgRoleUserId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUser_PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser____</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser____(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser____, new PropertyChangedEventHandler( OnOrganizationRoleUser____PropertyChanged ), "OrganizationRoleUser____", EventsEntity.Relations.OrganizationRoleUserEntityUsingUpdatedByAdmin, true, signalRelatedEntity, "Events____", resetFKFields, new int[] { (int)EventsFieldIndex.UpdatedByAdmin } );		
			_organizationRoleUser____ = null;
		}

		/// <summary> setups the sync logic for member _organizationRoleUser____</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser____(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser____!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser____(true, true);
				_organizationRoleUser____ = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser____, new PropertyChangedEventHandler( OnOrganizationRoleUser____PropertyChanged ), "OrganizationRoleUser____", EventsEntity.Relations.OrganizationRoleUserEntityUsingUpdatedByAdmin, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUser____PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser__</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser__(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser__, new PropertyChangedEventHandler( OnOrganizationRoleUser__PropertyChanged ), "OrganizationRoleUser__", EventsEntity.Relations.OrganizationRoleUserEntityUsingEventActivityOrgRoleUserId, true, signalRelatedEntity, "Events__", resetFKFields, new int[] { (int)EventsFieldIndex.EventActivityOrgRoleUserId } );		
			_organizationRoleUser__ = null;
		}

		/// <summary> setups the sync logic for member _organizationRoleUser__</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser__(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser__!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser__(true, true);
				_organizationRoleUser__ = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser__, new PropertyChangedEventHandler( OnOrganizationRoleUser__PropertyChanged ), "OrganizationRoleUser__", EventsEntity.Relations.OrganizationRoleUserEntityUsingEventActivityOrgRoleUserId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUser__PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser, new PropertyChangedEventHandler( OnOrganizationRoleUserPropertyChanged ), "OrganizationRoleUser", EventsEntity.Relations.OrganizationRoleUserEntityUsingAssignedToOrgRoleUserId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.AssignedToOrgRoleUserId } );		
			_organizationRoleUser = null;
		}

		/// <summary> setups the sync logic for member _organizationRoleUser</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser(true, true);
				_organizationRoleUser = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser, new PropertyChangedEventHandler( OnOrganizationRoleUserPropertyChanged ), "OrganizationRoleUser", EventsEntity.Relations.OrganizationRoleUserEntityUsingAssignedToOrgRoleUserId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUserPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _organizationRoleUser___</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncOrganizationRoleUser___(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _organizationRoleUser___, new PropertyChangedEventHandler( OnOrganizationRoleUser___PropertyChanged ), "OrganizationRoleUser___", EventsEntity.Relations.OrganizationRoleUserEntityUsingSignOffOrgRoleUserId, true, signalRelatedEntity, "Events___", resetFKFields, new int[] { (int)EventsFieldIndex.SignOffOrgRoleUserId } );		
			_organizationRoleUser___ = null;
		}

		/// <summary> setups the sync logic for member _organizationRoleUser___</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncOrganizationRoleUser___(IEntity2 relatedEntity)
		{
			if(_organizationRoleUser___!=relatedEntity)
			{
				DesetupSyncOrganizationRoleUser___(true, true);
				_organizationRoleUser___ = (OrganizationRoleUserEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _organizationRoleUser___, new PropertyChangedEventHandler( OnOrganizationRoleUser___PropertyChanged ), "OrganizationRoleUser___", EventsEntity.Relations.OrganizationRoleUserEntityUsingSignOffOrgRoleUserId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnOrganizationRoleUser___PropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _scheduleMethod</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncScheduleMethod(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _scheduleMethod, new PropertyChangedEventHandler( OnScheduleMethodPropertyChanged ), "ScheduleMethod", EventsEntity.Relations.ScheduleMethodEntityUsingScheduleMethodId, true, signalRelatedEntity, "Events", resetFKFields, new int[] { (int)EventsFieldIndex.ScheduleMethodId } );		
			_scheduleMethod = null;
		}

		/// <summary> setups the sync logic for member _scheduleMethod</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncScheduleMethod(IEntity2 relatedEntity)
		{
			if(_scheduleMethod!=relatedEntity)
			{
				DesetupSyncScheduleMethod(true, true);
				_scheduleMethod = (ScheduleMethodEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _scheduleMethod, new PropertyChangedEventHandler( OnScheduleMethodPropertyChanged ), "ScheduleMethod", EventsEntity.Relations.ScheduleMethodEntityUsingScheduleMethodId, true, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnScheduleMethodPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Removes the sync logic for member _eventAccount</summary>
		/// <param name="signalRelatedEntity">If set to true, it will call the related entity's UnsetRelatedEntity method</param>
		/// <param name="resetFKFields">if set to true it will also reset the FK fields pointing to the related entity</param>
		private void DesetupSyncEventAccount(bool signalRelatedEntity, bool resetFKFields)
		{
			base.PerformDesetupSyncRelatedEntity( _eventAccount, new PropertyChangedEventHandler( OnEventAccountPropertyChanged ), "EventAccount", EventsEntity.Relations.EventAccountEntityUsingEventId, false, signalRelatedEntity, "Events", false, new int[] { (int)EventsFieldIndex.EventId } );
			_eventAccount = null;
		}
		
		/// <summary> setups the sync logic for member _eventAccount</summary>
		/// <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
		private void SetupSyncEventAccount(IEntity2 relatedEntity)
		{
			if(_eventAccount!=relatedEntity)
			{
				DesetupSyncEventAccount(true, true);
				_eventAccount = (EventAccountEntity)relatedEntity;
				base.PerformSetupSyncRelatedEntity( _eventAccount, new PropertyChangedEventHandler( OnEventAccountPropertyChanged ), "EventAccount", EventsEntity.Relations.EventAccountEntityUsingEventId, false, new string[] {  } );
			}
		}
		
		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnEventAccountPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				default:
					break;
			}
		}

		/// <summary> Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this EventsEntity</param>
		/// <param name="fields">Fields of this entity</param>
		protected virtual void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			base.Fields = fields;
			base.IsNew=true;
			base.Validator = validator;
			InitClassMembers();

			
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		#region Class Property Declarations
		/// <summary> The relations object holding all relations of this entity with other entity classes.</summary>
		public  static EventsRelations Relations
		{
			get	{ return new EventsRelations(); }
		}
		
		/// <summary> The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties
		{
			get { return _customProperties;}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AfmarketingMaterial' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfmarketingMaterial
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<AfmarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialEntityFactory))),
					(IEntityRelation)GetRelationsForField("AfmarketingMaterial")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AfmarketingMaterialEntity, 0, null, null, null, null, "AfmarketingMaterial", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("CallDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CallDetailsEntity, 0, null, null, null, null, "CallDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueueCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCustomer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory))),
					(IEntityRelation)GetRelationsForField("CallQueueCustomer")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CallQueueCustomerEntity, 0, null, null, null, null, "CallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerClinicalQuestionAnswer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerClinicalQuestionAnswer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerClinicalQuestionAnswer")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerClinicalQuestionAnswerEntity, 0, null, null, null, null, "CustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerEventTestFinding' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerEventTestFinding
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerEventTestFinding")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerEventTestFindingEntity, 0, null, null, null, null, "CustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerOrderHistory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerOrderHistory
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerOrderHistory")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerOrderHistoryEntity, 0, null, null, null, null, "CustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerRegistrationNotes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerRegistrationNotes
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomerRegistrationNotes")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerRegistrationNotesEntity, 0, null, null, null, null, "CustomerRegistrationNotes", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomEventNotification' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomEventNotification
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<CustomEventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomEventNotificationEntityFactory))),
					(IEntityRelation)GetRelationsForField("CustomEventNotification")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomEventNotificationEntity, 0, null, null, null, null, "CustomEventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DependentDisqualifiedTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDependentDisqualifiedTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("DependentDisqualifiedTest")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.DependentDisqualifiedTestEntity, 0, null, null, null, null, "DependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'DisqualifiedTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDisqualifiedTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("DisqualifiedTest")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.DisqualifiedTestEntity, 0, null, null, null, null, "DisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAccountTestHcpcsCode' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAccountTestHcpcsCode
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventAccountTestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAccountTestHcpcsCodeEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAccountTestHcpcsCode")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAccountTestHcpcsCodeEntity, 0, null, null, null, null, "EventAccountTestHcpcsCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAffiliateDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAffiliateDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventAffiliateDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAffiliateDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAffiliateDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAffiliateDetailsEntity, 0, null, null, null, null, "EventAffiliateDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAppointmentCancellationLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAppointmentCancellationLog
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventAppointmentCancellationLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentCancellationLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAppointmentCancellationLog")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAppointmentCancellationLogEntity, 0, null, null, null, null, "EventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAppointmentChangeLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAppointmentChangeLog_
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAppointmentChangeLog_")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAppointmentChangeLogEntity, 0, null, null, null, null, "EventAppointmentChangeLog_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAppointmentChangeLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAppointmentChangeLog
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAppointmentChangeLog")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAppointmentChangeLogEntity, 0, null, null, null, null, "EventAppointmentChangeLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCallDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCallDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCallDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCallDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCallDetailsEntity, 0, null, null, null, null, "EventCallDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventChecklistTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventChecklistTemplate
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventChecklistTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventChecklistTemplateEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventChecklistTemplate")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventChecklistTemplateEntity, 0, null, null, null, null, "EventChecklistTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCoupons' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCoupons
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCouponsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCoupons")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCouponsEntity, 0, null, null, null, null, "EventCoupons", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomerQuestionAnswer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomerQuestionAnswer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomerQuestionAnswer")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomerQuestionAnswerEntity, 0, null, null, null, null, "EventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomerResult' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomerResult
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomerResult")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomerResultEntity, 0, null, null, null, null, "EventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomers
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventCustomers")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, null, null, "EventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventFluConsentTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventFluConsentTemplate
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventFluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventFluConsentTemplateEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventFluConsentTemplate")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventFluConsentTemplateEntity, 0, null, null, null, null, "EventFluConsentTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventHospitalFacility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventHospitalFacility
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventHospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalFacilityEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventHospitalFacility")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventHospitalFacilityEntity, 0, null, null, null, null, "EventHospitalFacility", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventHospitalPartner' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventHospitalPartner
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventHospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalPartnerEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventHospitalPartner")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventHospitalPartnerEntity, 0, null, null, null, null, "EventHospitalPartner", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventHostPromotions' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventHostPromotions
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventHostPromotionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHostPromotionsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventHostPromotions")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventHostPromotionsEntity, 0, null, null, null, null, "EventHostPromotions", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventMarketingOffers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventMarketingOffers
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventMarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMarketingOffersEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventMarketingOffers")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventMarketingOffersEntity, 0, null, null, null, null, "EventMarketingOffers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventMeetingDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventMeetingDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventMeetingDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMeetingDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventMeetingDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventMeetingDetailsEntity, 0, null, null, null, null, "EventMeetingDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventNotesLog' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventNotesLog
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventNotesLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotesLogEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventNotesLog")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventNotesLogEntity, 0, null, null, null, null, "EventNotesLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventNotification' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventNotification
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotificationEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventNotification")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventNotificationEntity, 0, null, null, null, null, "EventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPackageDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPackageDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventPackageDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPackageDetailsEntity, 0, null, null, null, null, "EventPackageDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPhysicianTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPhysicianTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventPhysicianTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPhysicianTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventPhysicianTest")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPhysicianTestEntity, 0, null, null, null, null, "EventPhysicianTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPod' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPod
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventPodEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventPod")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPodEntity, 0, null, null, null, null, "EventPod", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventProductExclusion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventProductExclusion
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventProductExclusionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductExclusionEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventProductExclusion")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventProductExclusionEntity, 0, null, null, null, null, "EventProductExclusion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventProductType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventProductType
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventProductTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductTypeEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventProductType")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventProductTypeEntity, 0, null, null, null, null, "EventProductType", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPublication' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPublication
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventPublicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPublicationEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventPublication")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPublicationEntity, 0, null, null, null, null, "EventPublication", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventScheduleTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventScheduleTemplate
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventScheduleTemplateEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventScheduleTemplate")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventScheduleTemplateEntity, 0, null, null, null, null, "EventScheduleTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventSchedulingSlot' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventSchedulingSlot
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventSchedulingSlotEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSchedulingSlotEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventSchedulingSlot")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventSchedulingSlotEntity, 0, null, null, null, null, "EventSchedulingSlot", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventStaffAssignment' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventStaffAssignment
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventStaffAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventStaffAssignmentEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventStaffAssignment")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventStaffAssignmentEntity, 0, null, null, null, null, "EventStaffAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventSurveyTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventSurveyTemplate
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventSurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSurveyTemplateEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventSurveyTemplate")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventSurveyTemplateEntity, 0, null, null, null, null, "EventSurveyTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventTaskDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventTaskDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventTaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTaskDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventTaskDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventTaskDetailsEntity, 0, null, null, null, null, "EventTaskDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventTest
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventTest")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventTestEntity, 0, null, null, null, null, "EventTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventZip' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventZip
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<EventZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventZipEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventZip")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventZipEntity, 0, null, null, null, null, "EventZip", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HealthPlanFillEventCallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHealthPlanFillEventCallQueue
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HealthPlanFillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanFillEventCallQueueEntityFactory))),
					(IEntityRelation)GetRelationsForField("HealthPlanFillEventCallQueue")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HealthPlanFillEventCallQueueEntity, 0, null, null, null, null, "HealthPlanFillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalPartnerCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalPartnerCustomer
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory))),
					(IEntityRelation)GetRelationsForField("HospitalPartnerCustomer")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HospitalPartnerCustomerEntity, 0, null, null, null, null, "HospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalPartnerEventNotes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalPartnerEventNotes
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HospitalPartnerEventNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEventNotesEntityFactory))),
					(IEntityRelation)GetRelationsForField("HospitalPartnerEventNotes")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HospitalPartnerEventNotesEntity, 0, null, null, null, null, "HospitalPartnerEventNotes", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HostEventDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHostEventDetails
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HostEventDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostEventDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("HostEventDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HostEventDetailsEntity, 0, null, null, null, null, "HostEventDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HostPayment' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHostPayment
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<HostPaymentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostPaymentEntityFactory))),
					(IEntityRelation)GetRelationsForField("HostPayment")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HostPaymentEntity, 0, null, null, null, null, "HostPayment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MarketingPrintOrderEventMapping' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMarketingPrintOrderEventMapping
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<MarketingPrintOrderEventMappingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEventMappingEntityFactory))),
					(IEntityRelation)GetRelationsForField("MarketingPrintOrderEventMapping")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.MarketingPrintOrderEventMappingEntity, 0, null, null, null, null, "MarketingPrintOrderEventMapping", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianEventAssignment' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianEventAssignment
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PhysicianEventAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEventAssignmentEntityFactory))),
					(IEntityRelation)GetRelationsForField("PhysicianEventAssignment")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianEventAssignmentEntity, 0, null, null, null, null, "PhysicianEventAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianInvoiceItem' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianInvoiceItem
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory))),
					(IEntityRelation)GetRelationsForField("PhysicianInvoiceItem")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianInvoiceItemEntity, 0, null, null, null, null, "PhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationResult' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationResult
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory))),
					(IEntityRelation)GetRelationsForField("PreQualificationResult")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PreQualificationResultEntity, 0, null, null, null, null, "PreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ResultArchiveUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathResultArchiveUpload
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory))),
					(IEntityRelation)GetRelationsForField("ResultArchiveUpload")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ResultArchiveUploadEntity, 0, null, null, null, null, "ResultArchiveUpload", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}
		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Seminars' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSeminars
		{
			get
			{
				return new PrefetchPathElement2( new EntityCollection<SeminarsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SeminarsEntityFactory))),
					(IEntityRelation)GetRelationsForField("Seminars")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.SeminarsEntity, 0, null, null, null, null, "Seminars", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaCallQueueCustomer"), null, "AccountCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Account' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAccountCollectionViaCustomEventNotification
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomEventNotificationEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomEventNotification_");
				return new PrefetchPathElement2(new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AccountEntity, 0, null, null, GetRelationsForField("AccountCollectionViaCustomEventNotification"), null, "AccountCollectionViaCustomEventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ActivityType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathActivityTypeCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ActivityTypeEntity, 0, null, null, GetRelationsForField("ActivityTypeCollectionViaCallQueueCustomer"), null, "ActivityTypeCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddressCollectionViaHostPayment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostPaymentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostPayment_");
				return new PrefetchPathElement2(new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AddressEntity, 0, null, null, GetRelationsForField("AddressCollectionViaHostPayment"), null, "AddressCollectionViaHostPayment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AfaffiliateCampaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfaffiliateCampaignCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AfaffiliateCampaignEntity, 0, null, null, GetRelationsForField("AfaffiliateCampaignCollectionViaEventCustomers"), null, "AfaffiliateCampaignCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AffiliateProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAffiliateProfileCollectionViaEventAffiliateDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAffiliateDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAffiliateDetails_");
				return new PrefetchPathElement2(new EntityCollection<AffiliateProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AffiliateProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AffiliateProfileEntity, 0, null, null, GetRelationsForField("AffiliateProfileCollectionViaEventAffiliateDetails"), null, "AffiliateProfileCollectionViaEventAffiliateDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AfmarketingMaterialType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAfmarketingMaterialTypeCollectionViaAfmarketingMaterial
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.AfmarketingMaterialEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "AfmarketingMaterial_");
				return new PrefetchPathElement2(new EntityCollection<AfmarketingMaterialTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialTypeEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.AfmarketingMaterialTypeEntity, 0, null, null, GetRelationsForField("AfmarketingMaterialTypeCollectionViaAfmarketingMaterial"), null, "AfmarketingMaterialTypeCollectionViaAfmarketingMaterial", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueue' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CallQueueEntity, 0, null, null, GetRelationsForField("CallQueueCollectionViaCallQueueCustomer"), null, "CallQueueCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CallQueueCriteria' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallQueueCriteriaCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CallQueueCriteriaEntity, 0, null, null, GetRelationsForField("CallQueueCriteriaCollectionViaCallQueueCustomer"), null, "CallQueueCriteriaCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Calls' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCallsCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CallsEntity, 0, null, null, GetRelationsForField("CallsCollectionViaPreQualificationResult"), null, "CallsCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Campaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCampaignCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CampaignEntity, 0, null, null, GetRelationsForField("CampaignCollectionViaCallQueueCustomer"), null, "CampaignCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Campaign' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCampaignCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CampaignEntity, 0, null, null, GetRelationsForField("CampaignCollectionViaEventCustomers"), null, "CampaignCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CheckListTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCheckListTemplateCollectionViaEventChecklistTemplate
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventChecklistTemplateEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventChecklistTemplate_");
				return new PrefetchPathElement2(new EntityCollection<CheckListTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CheckListTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CheckListTemplateEntity, 0, null, null, GetRelationsForField("CheckListTemplateCollectionViaEventChecklistTemplate"), null, "CheckListTemplateCollectionViaEventChecklistTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ContactCall' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContactCallCollectionViaEventCallDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCallDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCallDetails_");
				return new PrefetchPathElement2(new EntityCollection<ContactCallEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactCallEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ContactCallEntity, 0, null, null, GetRelationsForField("ContactCallCollectionViaEventCallDetails"), null, "ContactCallCollectionViaEventCallDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ContactMeeting' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContactMeetingCollectionViaEventMeetingDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventMeetingDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventMeetingDetails_");
				return new PrefetchPathElement2(new EntityCollection<ContactMeetingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactMeetingEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ContactMeetingEntity, 0, null, null, GetRelationsForField("ContactMeetingCollectionViaEventMeetingDetails"), null, "ContactMeetingCollectionViaEventMeetingDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CorporateUpload' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCorporateUploadCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CorporateUploadEntity, 0, null, null, GetRelationsForField("CorporateUploadCollectionViaCustomerOrderHistory"), null, "CorporateUploadCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Coupons' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCouponsCollectionViaEventCoupons
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCouponsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCoupons_");
				return new PrefetchPathElement2(new EntityCollection<CouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CouponsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CouponsEntity, 0, null, null, GetRelationsForField("CouponsCollectionViaEventCoupons"), null, "CouponsCollectionViaEventCoupons", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerHealthQuestions' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerHealthQuestionsEntity, 0, null, null, GetRelationsForField("CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer"), null, "CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaHospitalPartnerCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaHospitalPartnerCustomer"), null, "CustomerProfileCollectionViaHospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaEventCustomerQuestionAnswer"), null, "CustomerProfileCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaEventCustomerResult"), null, "CustomerProfileCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaDependentDisqualifiedTest"), null, "CustomerProfileCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaPhysicianInvoiceItem"), null, "CustomerProfileCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaEventCustomers"), null, "CustomerProfileCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaDisqualifiedTest"), null, "CustomerProfileCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaCustomerEventTestFinding
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerEventTestFindingEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEventTestFinding_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaCustomerEventTestFinding"), null, "CustomerProfileCollectionViaCustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaCustomerOrderHistory"), null, "CustomerProfileCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaPreQualificationResult"), null, "CustomerProfileCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaCustomerClinicalQuestionAnswer"), null, "CustomerProfileCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileEntity, 0, null, null, GetRelationsForField("CustomerProfileCollectionViaCallQueueCustomer"), null, "CustomerProfileCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerProfileHistory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerProfileHistoryCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerProfileHistoryEntity, 0, null, null, GetRelationsForField("CustomerProfileHistoryCollectionViaEventCustomers"), null, "CustomerProfileHistoryCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerRegistrationNotes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerRegistrationNotesEntity, 0, null, null, GetRelationsForField("CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog"), null, "CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerRegistrationNotes' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerRegistrationNotesCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CustomerRegistrationNotesEntity, 0, null, null, GetRelationsForField("CustomerRegistrationNotesCollectionViaEventCustomers"), null, "CustomerRegistrationNotesCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAppointment' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAppointmentCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAppointmentEntity, 0, null, null, GetRelationsForField("EventAppointmentCollectionViaEventCustomers"), null, "EventAppointmentCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaEventAppointmentCancellationLog"), null, "EventCustomersCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCallQueueCustomer"), null, "EventCustomersCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaDisqualifiedTest"), null, "EventCustomersCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaEventAppointmentChangeLog_"), null, "EventCustomersCollectionViaEventAppointmentChangeLog_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaEventCustomerQuestionAnswer"), null, "EventCustomersCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaCustomerOrderHistory"), null, "EventCustomersCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaDependentDisqualifiedTest"), null, "EventCustomersCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventCustomers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventCustomersCollectionViaEventAppointmentChangeLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventCustomersEntity, 0, null, null, GetRelationsForField("EventCustomersCollectionViaEventAppointmentChangeLog"), null, "EventCustomersCollectionViaEventAppointmentChangeLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventNote' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventNoteCollectionViaEventNotesLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventNotesLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventNotesLog_");
				return new PrefetchPathElement2(new EntityCollection<EventNoteEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNoteEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventNoteEntity, 0, null, null, GetRelationsForField("EventNoteCollectionViaEventNotesLog"), null, "EventNoteCollectionViaEventNotesLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPackageDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPackageDetailsCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPackageDetailsEntity, 0, null, null, GetRelationsForField("EventPackageDetailsCollectionViaCustomerOrderHistory"), null, "EventPackageDetailsCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventPodRoom' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventPodRoomCollectionViaEventSchedulingSlot
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventSchedulingSlotEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventSchedulingSlot_");
				return new PrefetchPathElement2(new EntityCollection<EventPodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodRoomEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventPodRoomEntity, 0, null, null, GetRelationsForField("EventPodRoomCollectionViaEventSchedulingSlot"), null, "EventPodRoomCollectionViaEventSchedulingSlot", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventTest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventTestCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventTestEntity, 0, null, null, GetRelationsForField("EventTestCollectionViaCustomerOrderHistory"), null, "EventTestCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'File' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFileCollectionViaResultArchiveUpload
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.ResultArchiveUploadEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "ResultArchiveUpload_");
				return new PrefetchPathElement2(new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.FileEntity, 0, null, null, GetRelationsForField("FileCollectionViaResultArchiveUpload"), null, "FileCollectionViaResultArchiveUpload", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'FluConsentTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathFluConsentTemplateCollectionViaEventFluConsentTemplate
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventFluConsentTemplateEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventFluConsentTemplate_");
				return new PrefetchPathElement2(new EntityCollection<FluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FluConsentTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.FluConsentTemplateEntity, 0, null, null, GetRelationsForField("FluConsentTemplateCollectionViaEventFluConsentTemplate"), null, "FluConsentTemplateCollectionViaEventFluConsentTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'GcNotGivenReason' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGcNotGivenReasonCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.GcNotGivenReasonEntity, 0, null, null, GetRelationsForField("GcNotGivenReasonCollectionViaEventCustomers"), null, "GcNotGivenReasonCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HafTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHafTemplateCollectionViaEventPackageDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPackageDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPackageDetails_");
				return new PrefetchPathElement2(new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HafTemplateEntity, 0, null, null, GetRelationsForField("HafTemplateCollectionViaEventPackageDetails"), null, "HafTemplateCollectionViaEventPackageDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HafTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHafTemplateCollectionViaEventTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HafTemplateEntity, 0, null, null, GetRelationsForField("HafTemplateCollectionViaEventTest"), null, "HafTemplateCollectionViaEventTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HafTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHafTemplateCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HafTemplateEntity, 0, null, null, GetRelationsForField("HafTemplateCollectionViaCustomerClinicalQuestionAnswer"), null, "HafTemplateCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HealthPlanCallQueueCriteria' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HealthPlanFillEventCallQueueEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HealthPlanFillEventCallQueue_");
				return new PrefetchPathElement2(new EntityCollection<HealthPlanCallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanCallQueueCriteriaEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HealthPlanCallQueueCriteriaEntity, 0, null, null, GetRelationsForField("HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue"), null, "HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalFacility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalFacilityCollectionViaEventHospitalFacility
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventHospitalFacilityEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventHospitalFacility_");
				return new PrefetchPathElement2(new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HospitalFacilityEntity, 0, null, null, GetRelationsForField("HospitalFacilityCollectionViaEventHospitalFacility"), null, "HospitalFacilityCollectionViaEventHospitalFacility", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalFacility' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalFacilityCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HospitalFacilityEntity, 0, null, null, GetRelationsForField("HospitalFacilityCollectionViaEventCustomers"), null, "HospitalFacilityCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HospitalPartner' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHospitalPartnerCollectionViaEventHospitalPartner
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventHospitalPartnerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventHospitalPartner_");
				return new PrefetchPathElement2(new EntityCollection<HospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HospitalPartnerEntity, 0, null, null, GetRelationsForField("HospitalPartnerCollectionViaEventHospitalPartner"), null, "HospitalPartnerCollectionViaEventHospitalPartner", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Language' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLanguageCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LanguageEntity, 0, null, null, GetRelationsForField("LanguageCollectionViaCallQueueCustomer"), null, "LanguageCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventSchedulingSlot
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventSchedulingSlotEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventSchedulingSlot_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventSchedulingSlot"), null, "LookupCollectionViaEventSchedulingSlot", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventPackageDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPackageDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPackageDetails_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventPackageDetails"), null, "LookupCollectionViaEventPackageDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventTest"), null, "LookupCollectionViaEventTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomers"), null, "LookupCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomerResult"), null, "LookupCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventCustomers_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventCustomers_"), null, "LookupCollectionViaEventCustomers_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventTest__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventTest__"), null, "LookupCollectionViaEventTest__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventTest_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventTest_"), null, "LookupCollectionViaEventTest_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_____
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_____"), null, "LookupCollectionViaPreQualificationResult_____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomEventNotification
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomEventNotificationEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomEventNotification_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomEventNotification"), null, "LookupCollectionViaCustomEventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerRegistrationNotes
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerRegistrationNotesEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerRegistrationNotes_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerRegistrationNotes"), null, "LookupCollectionViaCustomerRegistrationNotes", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaHostPayment_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostPaymentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostPayment_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaHostPayment_"), null, "LookupCollectionViaHostPayment_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCustomerOrderHistory
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerOrderHistoryEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerOrderHistory_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCustomerOrderHistory"), null, "LookupCollectionViaCustomerOrderHistory", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult__"), null, "LookupCollectionViaPreQualificationResult__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult___
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult___"), null, "LookupCollectionViaPreQualificationResult___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_"), null, "LookupCollectionViaPreQualificationResult_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult____
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult____"), null, "LookupCollectionViaPreQualificationResult____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult"), null, "LookupCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventAppointmentChangeLog_"), null, "LookupCollectionViaEventAppointmentChangeLog_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaHostPayment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostPaymentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostPayment_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaHostPayment"), null, "LookupCollectionViaHostPayment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaCallQueueCustomer"), null, "LookupCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventAppointmentChangeLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventAppointmentChangeLog"), null, "LookupCollectionViaEventAppointmentChangeLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult_______
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult_______"), null, "LookupCollectionViaPreQualificationResult_______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult______
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult______"), null, "LookupCollectionViaPreQualificationResult______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaEventAppointmentCancellationLog"), null, "LookupCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookupCollectionViaPreQualificationResult________
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, GetRelationsForField("LookupCollectionViaPreQualificationResult________"), null, "LookupCollectionViaPreQualificationResult________", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MarketingOffers' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMarketingOffersCollectionViaEventMarketingOffers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventMarketingOffersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventMarketingOffers_");
				return new PrefetchPathElement2(new EntityCollection<MarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingOffersEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.MarketingOffersEntity, 0, null, null, GetRelationsForField("MarketingOffersCollectionViaEventMarketingOffers"), null, "MarketingOffersCollectionViaEventMarketingOffers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MarketingPrintOrder' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.MarketingPrintOrderEventMappingEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "MarketingPrintOrderEventMapping_");
				return new PrefetchPathElement2(new EntityCollection<MarketingPrintOrderEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.MarketingPrintOrderEntity, 0, null, null, GetRelationsForField("MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping"), null, "MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'NotesDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNotesDetailsCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.NotesDetailsEntity, 0, null, null, GetRelationsForField("NotesDetailsCollectionViaCallQueueCustomer"), null, "NotesDetailsCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Notification' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNotificationCollectionViaEventNotification
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventNotificationEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventNotification_");
				return new PrefetchPathElement2(new EntityCollection<NotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotificationEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.NotificationEntity, 0, null, null, GetRelationsForField("NotificationCollectionViaEventNotification"), null, "NotificationCollectionViaEventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Organization' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAccountTestHcpcsCode_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationEntity, 0, null, null, GetRelationsForField("OrganizationCollectionViaEventAccountTestHcpcsCode"), null, "OrganizationCollectionViaEventAccountTestHcpcsCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer__"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaSeminars
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.SeminarsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "Seminars_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaSeminars"), null, "OrganizationRoleUserCollectionViaSeminars", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer_"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventStaffAssignment_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventStaffAssignment_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventStaffAssignment_"), null, "OrganizationRoleUserCollectionViaEventStaffAssignment_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHospitalPartnerCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HospitalPartnerCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HospitalPartnerCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHospitalPartnerCustomer"), null, "OrganizationRoleUserCollectionViaHospitalPartnerCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventStaffAssignment__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventStaffAssignment_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventStaffAssignment__"), null, "OrganizationRoleUserCollectionViaEventStaffAssignment__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventPhysicianTest__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPhysicianTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPhysicianTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventPhysicianTest__"), null, "OrganizationRoleUserCollectionViaEventPhysicianTest__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventPhysicianTest_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPhysicianTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPhysicianTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventPhysicianTest_"), null, "OrganizationRoleUserCollectionViaEventPhysicianTest_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaHostPayment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostPaymentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostPayment_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaHostPayment"), null, "OrganizationRoleUserCollectionViaHostPayment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventPhysicianTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPhysicianTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPhysicianTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventPhysicianTest"), null, "OrganizationRoleUserCollectionViaEventPhysicianTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventStaffAssignment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventStaffAssignment_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventStaffAssignment"), null, "OrganizationRoleUserCollectionViaEventStaffAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventAppointmentCancellationLog"), null, "OrganizationRoleUserCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventAppointmentChangeLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventAppointmentChangeLog"), null, "OrganizationRoleUserCollectionViaEventAppointmentChangeLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAccountTestHcpcsCode_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode"), null, "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAccountTestHcpcsCode_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_"), null, "OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_"), null, "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult"), null, "OrganizationRoleUserCollectionViaEventCustomerResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventAppointmentChangeLog_"), null, "OrganizationRoleUserCollectionViaEventAppointmentChangeLog_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer"), null, "OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaDisqualifiedTest_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaDisqualifiedTest_"), null, "OrganizationRoleUserCollectionViaDisqualifiedTest_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer__"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer"), null, "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCallQueueCustomer_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCallQueueCustomer_"), null, "OrganizationRoleUserCollectionViaCallQueueCustomer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomEventNotification
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomEventNotificationEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomEventNotification_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomEventNotification"), null, "OrganizationRoleUserCollectionViaCustomEventNotification", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaDisqualifiedTest"), null, "OrganizationRoleUserCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerClinicalQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerClinicalQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_"), null, "OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaCustomerRegistrationNotes
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerRegistrationNotesEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerRegistrationNotes_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaCustomerRegistrationNotes"), null, "OrganizationRoleUserCollectionViaCustomerRegistrationNotes", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_____
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_____"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult________
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult________"), null, "OrganizationRoleUserCollectionViaEventCustomerResult________", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult___
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult___"), null, "OrganizationRoleUserCollectionViaEventCustomerResult___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult__
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult__"), null, "OrganizationRoleUserCollectionViaEventCustomerResult__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult______
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult______"), null, "OrganizationRoleUserCollectionViaEventCustomerResult______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult____
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult____"), null, "OrganizationRoleUserCollectionViaEventCustomerResult____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomers
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomers"), null, "OrganizationRoleUserCollectionViaEventCustomers", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomers_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomersEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomers_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomers_"), null, "OrganizationRoleUserCollectionViaEventCustomers_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_______
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_______"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_______", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUserCollectionViaEventCustomerResult_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerResult_");
				return new PrefetchPathElement2(new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, GetRelationsForField("OrganizationRoleUserCollectionViaEventCustomerResult_"), null, "OrganizationRoleUserCollectionViaEventCustomerResult_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Package' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPackageCollectionViaEventPackageDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPackageDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPackageDetails_");
				return new PrefetchPathElement2(new EntityCollection<PackageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PackageEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PackageEntity, 0, null, null, GetRelationsForField("PackageCollectionViaEventPackageDetails"), null, "PackageCollectionViaEventPackageDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianEvaluation' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianEvaluationCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianEvaluationEntity, 0, null, null, GetRelationsForField("PhysicianEvaluationCollectionViaPhysicianInvoiceItem"), null, "PhysicianEvaluationCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianInvoice' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianInvoiceCollectionViaPhysicianInvoiceItem
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PhysicianInvoiceItemEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianInvoiceItem_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianInvoiceEntity, 0, null, null, GetRelationsForField("PhysicianInvoiceCollectionViaPhysicianInvoiceItem"), null, "PhysicianInvoiceCollectionViaPhysicianInvoiceItem", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianProfileCollectionViaPhysicianEventAssignment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PhysicianEventAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianEventAssignment_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianProfileEntity, 0, null, null, GetRelationsForField("PhysicianProfileCollectionViaPhysicianEventAssignment"), null, "PhysicianProfileCollectionViaPhysicianEventAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PhysicianProfile' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPhysicianProfileCollectionViaPhysicianEventAssignment_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PhysicianEventAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PhysicianEventAssignment_");
				return new PrefetchPathElement2(new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PhysicianProfileEntity, 0, null, null, GetRelationsForField("PhysicianProfileCollectionViaPhysicianEventAssignment_"), null, "PhysicianProfileCollectionViaPhysicianEventAssignment_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PodDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPodDetailsCollectionViaEventStaffAssignment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventStaffAssignment_");
				return new PrefetchPathElement2(new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PodDetailsEntity, 0, null, null, GetRelationsForField("PodDetailsCollectionViaEventStaffAssignment"), null, "PodDetailsCollectionViaEventStaffAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PodDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPodDetailsCollectionViaEventPod
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPodEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPod_");
				return new PrefetchPathElement2(new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PodDetailsEntity, 0, null, null, GetRelationsForField("PodDetailsCollectionViaEventPod"), null, "PodDetailsCollectionViaEventPod", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PodRoom' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPodRoomCollectionViaEventPackageDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPackageDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPackageDetails_");
				return new PrefetchPathElement2(new EntityCollection<PodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodRoomEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PodRoomEntity, 0, null, null, GetRelationsForField("PodRoomCollectionViaEventPackageDetails"), null, "PodRoomCollectionViaEventPackageDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationQuestion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationQuestionCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventCustomerQuestionAnswerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventCustomerQuestionAnswer_");
				return new PrefetchPathElement2(new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PreQualificationQuestionEntity, 0, null, null, GetRelationsForField("PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer"), null, "PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationQuestion' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationQuestionCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PreQualificationQuestionEntity, 0, null, null, GetRelationsForField("PreQualificationQuestionCollectionViaDisqualifiedTest"), null, "PreQualificationQuestionCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PreQualificationTestTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreQualificationTestTemplateCollectionViaEventTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<PreQualificationTestTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationTestTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.PreQualificationTestTemplateEntity, 0, null, null, GetRelationsForField("PreQualificationTestTemplateCollectionViaEventTest"), null, "PreQualificationTestTemplateCollectionViaEventTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductCollectionViaEventProductExclusion
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventProductExclusionEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventProductExclusion_");
				return new PrefetchPathElement2(new EntityCollection<ProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProductEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ProductEntity, 0, null, null, GetRelationsForField("ProductCollectionViaEventProductExclusion"), null, "ProductCollectionViaEventProductExclusion", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProspectCustomer' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectCustomerCollectionViaCallQueueCustomer
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CallQueueCustomerEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CallQueueCustomer_");
				return new PrefetchPathElement2(new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ProspectCustomerEntity, 0, null, null, GetRelationsForField("ProspectCustomerCollectionViaCallQueueCustomer"), null, "ProspectCustomerCollectionViaCallQueueCustomer", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Prospects' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectsCollectionViaHostPayment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostPaymentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostPayment_");
				return new PrefetchPathElement2(new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ProspectsEntity, 0, null, null, GetRelationsForField("ProspectsCollectionViaHostPayment"), null, "ProspectsCollectionViaHostPayment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Prospects' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProspectsCollectionViaHostEventDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.HostEventDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "HostEventDetails_");
				return new PrefetchPathElement2(new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ProspectsEntity, 0, null, null, GetRelationsForField("ProspectsCollectionViaHostEventDetails"), null, "ProspectsCollectionViaHostEventDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RefundRequest' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRefundRequestCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<RefundRequestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RefundRequestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.RefundRequestEntity, 0, null, null, GetRelationsForField("RefundRequestCollectionViaEventAppointmentCancellationLog"), null, "RefundRequestCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RescheduleCancelDisposition' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRescheduleCancelDispositionCollectionViaEventAppointmentChangeLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingNewEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.RescheduleCancelDispositionEntity, 0, null, null, GetRelationsForField("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog"), null, "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RescheduleCancelDisposition' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentCancellationLogEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentCancellationLog_");
				return new PrefetchPathElement2(new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.RescheduleCancelDispositionEntity, 0, null, null, GetRelationsForField("RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog"), null, "RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RescheduleCancelDisposition' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAppointmentChangeLogEntityUsingOldEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAppointmentChangeLog_");
				return new PrefetchPathElement2(new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.RescheduleCancelDispositionEntity, 0, null, null, GetRelationsForField("RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_"), null, "RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ScheduleTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathScheduleTemplateCollectionViaEventScheduleTemplate
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventScheduleTemplateEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventScheduleTemplate_");
				return new PrefetchPathElement2(new EntityCollection<ScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ScheduleTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ScheduleTemplateEntity, 0, null, null, GetRelationsForField("ScheduleTemplateCollectionViaEventScheduleTemplate"), null, "ScheduleTemplateCollectionViaEventScheduleTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StaffEventRole' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStaffEventRoleCollectionViaEventStaffAssignment
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventStaffAssignmentEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventStaffAssignment_");
				return new PrefetchPathElement2(new EntityCollection<StaffEventRoleEntity>(EntityFactoryCache2.GetEntityFactory(typeof(StaffEventRoleEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.StaffEventRoleEntity, 0, null, null, GetRelationsForField("StaffEventRoleCollectionViaEventStaffAssignment"), null, "StaffEventRoleCollectionViaEventStaffAssignment", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SurveyTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSurveyTemplateCollectionViaEventSurveyTemplate
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventSurveyTemplateEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventSurveyTemplate_");
				return new PrefetchPathElement2(new EntityCollection<SurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SurveyTemplateEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.SurveyTemplateEntity, 0, null, null, GetRelationsForField("SurveyTemplateCollectionViaEventSurveyTemplate"), null, "SurveyTemplateCollectionViaEventSurveyTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TaskDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTaskDetailsCollectionViaEventTaskDetails
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTaskDetailsEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTaskDetails_");
				return new PrefetchPathElement2(new EntityCollection<TaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TaskDetailsEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TaskDetailsEntity, 0, null, null, GetRelationsForField("TaskDetailsCollectionViaEventTaskDetails"), null, "TaskDetailsCollectionViaEventTaskDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TempCart' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTempCartCollectionViaPreQualificationResult
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.PreQualificationResultEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "PreQualificationResult_");
				return new PrefetchPathElement2(new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TempCartEntity, 0, null, null, GetRelationsForField("TempCartCollectionViaPreQualificationResult"), null, "TempCartCollectionViaPreQualificationResult", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Territory' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTerritoryCollectionViaEventPod
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPodEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPod_");
				return new PrefetchPathElement2(new EntityCollection<TerritoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TerritoryEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TerritoryEntity, 0, null, null, GetRelationsForField("TerritoryCollectionViaEventPod"), null, "TerritoryCollectionViaEventPod", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaEventPhysicianTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventPhysicianTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventPhysicianTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaEventPhysicianTest"), null, "TestCollectionViaEventPhysicianTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaDisqualifiedTest"), null, "TestCollectionViaDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaEventTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaEventTest"), null, "TestCollectionViaEventTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaCustomerEventTestFinding
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.CustomerEventTestFindingEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "CustomerEventTestFinding_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaCustomerEventTestFinding"), null, "TestCollectionViaCustomerEventTestFinding", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Test' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestCollectionViaDependentDisqualifiedTest
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.DependentDisqualifiedTestEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "DependentDisqualifiedTest_");
				return new PrefetchPathElement2(new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestEntity, 0, null, null, GetRelationsForField("TestCollectionViaDependentDisqualifiedTest"), null, "TestCollectionViaDependentDisqualifiedTest", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TestHcpcsCode' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTestHcpcsCodeCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventAccountTestHcpcsCodeEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventAccountTestHcpcsCode_");
				return new PrefetchPathElement2(new EntityCollection<TestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestHcpcsCodeEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.TestHcpcsCodeEntity, 0, null, null, GetRelationsForField("TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode"), null, "TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Zip' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathZipCollectionViaEventZip
		{
			get
			{
				IEntityRelation intermediateRelation = EventsEntity.Relations.EventZipEntityUsingEventId;
				intermediateRelation.SetAliases(string.Empty, "EventZip_");
				return new PrefetchPathElement2(new EntityCollection<ZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ZipEntityFactory))), intermediateRelation,
					(int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ZipEntity, 0, null, null, GetRelationsForField("ZipCollectionViaEventZip"), null, "ZipCollectionViaEventZip", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CommunicationMode' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCommunicationMode
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(CommunicationModeEntityFactory))),
					(IEntityRelation)GetRelationsForField("CommunicationMode")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.CommunicationModeEntity, 0, null, null, null, null, "CommunicationMode", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventType' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventType
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(EventTypeEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventType")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventTypeEntity, 0, null, null, null, null, "EventType", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'HafTemplate' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHafTemplate
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory))),
					(IEntityRelation)GetRelationsForField("HafTemplate")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.HafTemplateEntity, 0, null, null, null, null, "HafTemplate", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup____
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup____")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup___
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup___")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup__
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup__")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Lookup' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLookup_
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory))),
					(IEntityRelation)GetRelationsForField("Lookup_")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.LookupEntity, 0, null, null, null, null, "Lookup_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'NotesDetails' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNotesDetails
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory))),
					(IEntityRelation)GetRelationsForField("NotesDetails")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.NotesDetailsEntity, 0, null, null, null, null, "NotesDetails", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser_
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser_")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser_", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser____
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser____")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser____", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser__
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser__")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser__", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrganizationRoleUser' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrganizationRoleUser___
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory))),
					(IEntityRelation)GetRelationsForField("OrganizationRoleUser___")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.OrganizationRoleUserEntity, 0, null, null, null, null, "OrganizationRoleUser___", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ScheduleMethod' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathScheduleMethod
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(ScheduleMethodEntityFactory))),
					(IEntityRelation)GetRelationsForField("ScheduleMethod")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.ScheduleMethodEntity, 0, null, null, null, null, "ScheduleMethod", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne);
			}
		}

		/// <summary> Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EventAccount' 
		/// for this entity. Add the object returned by this property to an existing PrefetchPath2 instance.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEventAccount
		{
			get
			{
				return new PrefetchPathElement2(new EntityCollection(EntityFactoryCache2.GetEntityFactory(typeof(EventAccountEntityFactory))),
					(IEntityRelation)GetRelationsForField("EventAccount")[0], (int)Falcon.Data.EntityType.EventsEntity, (int)Falcon.Data.EntityType.EventAccountEntity, 0, null, null, null, null, "EventAccount", SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne);
			}
		}

		/// <summary> The custom properties for the type of this entity instance.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		public override Dictionary<string, string> CustomPropertiesOfType
		{
			get { return EventsEntity.CustomProperties;}
		}

		/// <summary> The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value
		/// pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties
		{
			get { return _fieldsCustomProperties;}
		}

		/// <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[Browsable(false), XmlIgnore]
		public override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType
		{
			get { return EventsEntity.FieldsCustomProperties;}
		}

		/// <summary> The EventId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 EventId
		{
			get { return (System.Int64)GetValue((int)EventsFieldIndex.EventId, true); }
			set	{ SetValue((int)EventsFieldIndex.EventId, value); }
		}

		/// <summary> The EventName property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventName"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String EventName
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.EventName, true); }
			set	{ SetValue((int)EventsFieldIndex.EventName, value); }
		}

		/// <summary> The EventDate property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime EventDate
		{
			get { return (System.DateTime)GetValue((int)EventsFieldIndex.EventDate, true); }
			set	{ SetValue((int)EventsFieldIndex.EventDate, value); }
		}

		/// <summary> The EventStartTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventStartTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime EventStartTime
		{
			get { return (System.DateTime)GetValue((int)EventsFieldIndex.EventStartTime, true); }
			set	{ SetValue((int)EventsFieldIndex.EventStartTime, value); }
		}

		/// <summary> The EventEndTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventEndTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime EventEndTime
		{
			get { return (System.DateTime)GetValue((int)EventsFieldIndex.EventEndTime, true); }
			set	{ SetValue((int)EventsFieldIndex.EventEndTime, value); }
		}

		/// <summary> The TimeZone property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."TimeZone"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TimeZone
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.TimeZone, true); }
			set	{ SetValue((int)EventsFieldIndex.TimeZone, value); }
		}

		/// <summary> The EventTypeId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventTypeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 EventTypeId
		{
			get { return (System.Int64)GetValue((int)EventsFieldIndex.EventTypeId, true); }
			set	{ SetValue((int)EventsFieldIndex.EventTypeId, value); }
		}

		/// <summary> The ScheduleMethodId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."ScheduleMethodID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> ScheduleMethodId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.ScheduleMethodId, false); }
			set	{ SetValue((int)EventsFieldIndex.ScheduleMethodId, value); }
		}

		/// <summary> The IsRescheduled property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsRescheduled"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsRescheduled
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsRescheduled, true); }
			set	{ SetValue((int)EventsFieldIndex.IsRescheduled, value); }
		}

		/// <summary> The CosttoUseHostSite property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."CosttoUseHostSite"<br/>
		/// Table field type characteristics (type, precision, scale, length): Decimal, 18, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal CosttoUseHostSite
		{
			get { return (System.Decimal)GetValue((int)EventsFieldIndex.CosttoUseHostSite, true); }
			set	{ SetValue((int)EventsFieldIndex.CosttoUseHostSite, value); }
		}

		/// <summary> The CommunicationModeId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."CommunicationModeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> CommunicationModeId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.CommunicationModeId, false); }
			set	{ SetValue((int)EventsFieldIndex.CommunicationModeId, value); }
		}

		/// <summary> The EventNotes property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventNotes"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 5000<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String EventNotes
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.EventNotes, true); }
			set	{ SetValue((int)EventsFieldIndex.EventNotes, value); }
		}

		/// <summary> The DateCreated property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."DateCreated"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreated
		{
			get { return (System.DateTime)GetValue((int)EventsFieldIndex.DateCreated, true); }
			set	{ SetValue((int)EventsFieldIndex.DateCreated, value); }
		}

		/// <summary> The DateModified property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."DateModified"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateModified
		{
			get { return (System.DateTime)GetValue((int)EventsFieldIndex.DateModified, true); }
			set	{ SetValue((int)EventsFieldIndex.DateModified, value); }
		}

		/// <summary> The IsActive property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsActive"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsActive
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsActive, true); }
			set	{ SetValue((int)EventsFieldIndex.IsActive, value); }
		}

		/// <summary> The Googleuri property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."Googleuri"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 1000<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Googleuri
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.Googleuri, true); }
			set	{ SetValue((int)EventsFieldIndex.Googleuri, value); }
		}

		/// <summary> The EventActivityTemplateId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventActivityTemplateID"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> EventActivityTemplateId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.EventActivityTemplateId, false); }
			set	{ SetValue((int)EventsFieldIndex.EventActivityTemplateId, value); }
		}

		/// <summary> The InvitationCode property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."InvitationCode"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String InvitationCode
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.InvitationCode, true); }
			set	{ SetValue((int)EventsFieldIndex.InvitationCode, value); }
		}

		/// <summary> The TeamArrivalTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."TeamArrivalTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> TeamArrivalTime
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EventsFieldIndex.TeamArrivalTime, false); }
			set	{ SetValue((int)EventsFieldIndex.TeamArrivalTime, value); }
		}

		/// <summary> The TeamDepartureTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."TeamDepartureTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> TeamDepartureTime
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EventsFieldIndex.TeamDepartureTime, false); }
			set	{ SetValue((int)EventsFieldIndex.TeamDepartureTime, value); }
		}

		/// <summary> The EventStatus property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventStatus"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> EventStatus
		{
			get { return (Nullable<System.Int32>)GetValue((int)EventsFieldIndex.EventStatus, false); }
			set	{ SetValue((int)EventsFieldIndex.EventStatus, value); }
		}

		/// <summary> The IsSignoff property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsSignoff"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsSignoff
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsSignoff, true); }
			set	{ SetValue((int)EventsFieldIndex.IsSignoff, value); }
		}

		/// <summary> The SignoffDatetime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."SignoffDatetime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> SignoffDatetime
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EventsFieldIndex.SignoffDatetime, false); }
			set	{ SetValue((int)EventsFieldIndex.SignoffDatetime, value); }
		}

		/// <summary> The UpdatedByOrganizationRoleUser property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."UpdatedByOrganizationRoleUser"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> UpdatedByOrganizationRoleUser
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.UpdatedByOrganizationRoleUser, false); }
			set	{ SetValue((int)EventsFieldIndex.UpdatedByOrganizationRoleUser, value); }
		}

		/// <summary> The CreatedByOrgRoleUserId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."CreatedByOrgRoleUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 CreatedByOrgRoleUserId
		{
			get { return (System.Int64)GetValue((int)EventsFieldIndex.CreatedByOrgRoleUserId, true); }
			set	{ SetValue((int)EventsFieldIndex.CreatedByOrgRoleUserId, value); }
		}

		/// <summary> The AssignedToOrgRoleUserId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."AssignedToOrgRoleUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 AssignedToOrgRoleUserId
		{
			get { return (System.Int64)GetValue((int)EventsFieldIndex.AssignedToOrgRoleUserId, true); }
			set	{ SetValue((int)EventsFieldIndex.AssignedToOrgRoleUserId, value); }
		}

		/// <summary> The EventActivityOrgRoleUserId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventActivityOrgRoleUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> EventActivityOrgRoleUserId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.EventActivityOrgRoleUserId, false); }
			set	{ SetValue((int)EventsFieldIndex.EventActivityOrgRoleUserId, value); }
		}

		/// <summary> The SignOffOrgRoleUserId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."SignOffOrgRoleUserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> SignOffOrgRoleUserId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.SignOffOrgRoleUserId, false); }
			set	{ SetValue((int)EventsFieldIndex.SignOffOrgRoleUserId, value); }
		}

		/// <summary> The GenerateHealthAssesmentForm property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."GenerateHealthAssesmentForm"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean GenerateHealthAssesmentForm
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.GenerateHealthAssesmentForm, true); }
			set	{ SetValue((int)EventsFieldIndex.GenerateHealthAssesmentForm, value); }
		}

		/// <summary> The EmrNotesId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EmrNotesId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> EmrNotesId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.EmrNotesId, false); }
			set	{ SetValue((int)EventsFieldIndex.EmrNotesId, value); }
		}

		/// <summary> The EnableAlaCarteOnline property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EnableAlaCarteOnline"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableAlaCarteOnline
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.EnableAlaCarteOnline, true); }
			set	{ SetValue((int)EventsFieldIndex.EnableAlaCarteOnline, value); }
		}

		/// <summary> The EnableAlaCarteCallCenter property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EnableAlaCarteCallCenter"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableAlaCarteCallCenter
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.EnableAlaCarteCallCenter, true); }
			set	{ SetValue((int)EventsFieldIndex.EnableAlaCarteCallCenter, value); }
		}

		/// <summary> The EnableAlaCarteTechnician property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EnableAlaCarteTechnician"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableAlaCarteTechnician
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.EnableAlaCarteTechnician, true); }
			set	{ SetValue((int)EventsFieldIndex.EnableAlaCarteTechnician, value); }
		}

		/// <summary> The IsDynamicScheduling property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsDynamicScheduling"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsDynamicScheduling
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsDynamicScheduling, true); }
			set	{ SetValue((int)EventsFieldIndex.IsDynamicScheduling, value); }
		}

		/// <summary> The SlotInterval property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."SlotInterval"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SlotInterval
		{
			get { return (Nullable<System.Int32>)GetValue((int)EventsFieldIndex.SlotInterval, false); }
			set	{ SetValue((int)EventsFieldIndex.SlotInterval, value); }
		}

		/// <summary> The ServerRooms property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."ServerRooms"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ServerRooms
		{
			get { return (Nullable<System.Int32>)GetValue((int)EventsFieldIndex.ServerRooms, false); }
			set	{ SetValue((int)EventsFieldIndex.ServerRooms, value); }
		}

		/// <summary> The LunchStartTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."LunchStartTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LunchStartTime
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EventsFieldIndex.LunchStartTime, false); }
			set	{ SetValue((int)EventsFieldIndex.LunchStartTime, value); }
		}

		/// <summary> The LunchDuration property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."LunchDuration"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> LunchDuration
		{
			get { return (Nullable<System.Int32>)GetValue((int)EventsFieldIndex.LunchDuration, false); }
			set	{ SetValue((int)EventsFieldIndex.LunchDuration, value); }
		}

		/// <summary> The HafTemplateId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."HAFTemplateId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> HafTemplateId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.HafTemplateId, false); }
			set	{ SetValue((int)EventsFieldIndex.HafTemplateId, value); }
		}

		/// <summary> The NotifyResultReady property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."NotifyResultReady"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean NotifyResultReady
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.NotifyResultReady, true); }
			set	{ SetValue((int)EventsFieldIndex.NotifyResultReady, value); }
		}

		/// <summary> The CaptureInsuranceId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."CaptureInsuranceId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean CaptureInsuranceId
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.CaptureInsuranceId, true); }
			set	{ SetValue((int)EventsFieldIndex.CaptureInsuranceId, value); }
		}

		/// <summary> The InsuranceIdRequired property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."InsuranceIdRequired"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean InsuranceIdRequired
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.InsuranceIdRequired, true); }
			set	{ SetValue((int)EventsFieldIndex.InsuranceIdRequired, value); }
		}

		/// <summary> The IsFemaleOnly property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsFemaleOnly"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsFemaleOnly
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsFemaleOnly, true); }
			set	{ SetValue((int)EventsFieldIndex.IsFemaleOnly, value); }
		}

		/// <summary> The GenerateKynXml property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."GenerateKynXml"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> GenerateKynXml
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.GenerateKynXml, false); }
			set	{ SetValue((int)EventsFieldIndex.GenerateKynXml, value); }
		}

		/// <summary> The RecommendPackage property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."RecommendPackage"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean RecommendPackage
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.RecommendPackage, true); }
			set	{ SetValue((int)EventsFieldIndex.RecommendPackage, value); }
		}

		/// <summary> The AskPreQualifierQuestion property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."AskPreQualifierQuestion"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean AskPreQualifierQuestion
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.AskPreQualifierQuestion, true); }
			set	{ SetValue((int)EventsFieldIndex.AskPreQualifierQuestion, value); }
		}

		/// <summary> The FixedGroupScreeningTime property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."FixedGroupScreeningTime"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> FixedGroupScreeningTime
		{
			get { return (Nullable<System.Int32>)GetValue((int)EventsFieldIndex.FixedGroupScreeningTime, false); }
			set	{ SetValue((int)EventsFieldIndex.FixedGroupScreeningTime, value); }
		}

		/// <summary> The BloodPackageTracking property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."BloodPackageTracking"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String BloodPackageTracking
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.BloodPackageTracking, true); }
			set	{ SetValue((int)EventsFieldIndex.BloodPackageTracking, value); }
		}

		/// <summary> The RecordsPackageTracking property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."RecordsPackageTracking"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 500<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String RecordsPackageTracking
		{
			get { return (System.String)GetValue((int)EventsFieldIndex.RecordsPackageTracking, true); }
			set	{ SetValue((int)EventsFieldIndex.RecordsPackageTracking, value); }
		}

		/// <summary> The EventCancellationReasonId property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EventCancellationReasonId"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> EventCancellationReasonId
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.EventCancellationReasonId, false); }
			set	{ SetValue((int)EventsFieldIndex.EventCancellationReasonId, value); }
		}

		/// <summary> The EnableForCallCenter property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EnableForCallCenter"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableForCallCenter
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.EnableForCallCenter, true); }
			set	{ SetValue((int)EventsFieldIndex.EnableForCallCenter, value); }
		}

		/// <summary> The EnableForTechnician property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."EnableForTechnician"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EnableForTechnician
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.EnableForTechnician, true); }
			set	{ SetValue((int)EventsFieldIndex.EnableForTechnician, value); }
		}

		/// <summary> The IsLocked property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsLocked"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsLocked
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsLocked, true); }
			set	{ SetValue((int)EventsFieldIndex.IsLocked, value); }
		}

		/// <summary> The IsPackageTimeOnly property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsPackageTimeOnly"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsPackageTimeOnly
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsPackageTimeOnly, true); }
			set	{ SetValue((int)EventsFieldIndex.IsPackageTimeOnly, value); }
		}

		/// <summary> The GenerateHkynXml property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."GenerateHkynXml"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> GenerateHkynXml
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.GenerateHkynXml, false); }
			set	{ SetValue((int)EventsFieldIndex.GenerateHkynXml, value); }
		}

		/// <summary> The GenerateMyBioCheckAssessment property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."GenerateMyBioCheckAssessment"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> GenerateMyBioCheckAssessment
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.GenerateMyBioCheckAssessment, false); }
			set	{ SetValue((int)EventsFieldIndex.GenerateMyBioCheckAssessment, value); }
		}

		/// <summary> The UpdatedByAdmin property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."UpdatedByAdmin"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> UpdatedByAdmin
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.UpdatedByAdmin, false); }
			set	{ SetValue((int)EventsFieldIndex.UpdatedByAdmin, value); }
		}

		/// <summary> The IsManual property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."IsManual"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsManual
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.IsManual, true); }
			set	{ SetValue((int)EventsFieldIndex.IsManual, value); }
		}

		/// <summary> The GenerateHealthAssesmentFormStatus property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."GenerateHealthAssesmentFormStatus"<br/>
		/// Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> GenerateHealthAssesmentFormStatus
		{
			get { return (Nullable<System.Int64>)GetValue((int)EventsFieldIndex.GenerateHealthAssesmentFormStatus, false); }
			set	{ SetValue((int)EventsFieldIndex.GenerateHealthAssesmentFormStatus, value); }
		}

		/// <summary> The AllowNonMammoPatients property of the Entity Events<br/><br/>
		/// </summary>
		/// <remarks>Mapped on  table field: "TblEvents"."AllowNonMammoPatients"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean AllowNonMammoPatients
		{
			get { return (System.Boolean)GetValue((int)EventsFieldIndex.AllowNonMammoPatients, true); }
			set	{ SetValue((int)EventsFieldIndex.AllowNonMammoPatients, value); }
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AfmarketingMaterialEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AfmarketingMaterialEntity))]
		public virtual EntityCollection<AfmarketingMaterialEntity> AfmarketingMaterial
		{
			get
			{
				if(_afmarketingMaterial==null)
				{
					_afmarketingMaterial = new EntityCollection<AfmarketingMaterialEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialEntityFactory)));
					_afmarketingMaterial.SetContainingEntityInfo(this, "Events");
				}
				return _afmarketingMaterial;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallDetailsEntity))]
		public virtual EntityCollection<CallDetailsEntity> CallDetails
		{
			get
			{
				if(_callDetails==null)
				{
					_callDetails = new EntityCollection<CallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallDetailsEntityFactory)));
					_callDetails.SetContainingEntityInfo(this, "Events");
				}
				return _callDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueCustomerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueCustomerEntity))]
		public virtual EntityCollection<CallQueueCustomerEntity> CallQueueCustomer
		{
			get
			{
				if(_callQueueCustomer==null)
				{
					_callQueueCustomer = new EntityCollection<CallQueueCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCustomerEntityFactory)));
					_callQueueCustomer.SetContainingEntityInfo(this, "Events");
				}
				return _callQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerClinicalQuestionAnswerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerClinicalQuestionAnswerEntity))]
		public virtual EntityCollection<CustomerClinicalQuestionAnswerEntity> CustomerClinicalQuestionAnswer
		{
			get
			{
				if(_customerClinicalQuestionAnswer==null)
				{
					_customerClinicalQuestionAnswer = new EntityCollection<CustomerClinicalQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerClinicalQuestionAnswerEntityFactory)));
					_customerClinicalQuestionAnswer.SetContainingEntityInfo(this, "Events");
				}
				return _customerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerEventTestFindingEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerEventTestFindingEntity))]
		public virtual EntityCollection<CustomerEventTestFindingEntity> CustomerEventTestFinding
		{
			get
			{
				if(_customerEventTestFinding==null)
				{
					_customerEventTestFinding = new EntityCollection<CustomerEventTestFindingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerEventTestFindingEntityFactory)));
					_customerEventTestFinding.SetContainingEntityInfo(this, "Events");
				}
				return _customerEventTestFinding;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerOrderHistoryEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerOrderHistoryEntity))]
		public virtual EntityCollection<CustomerOrderHistoryEntity> CustomerOrderHistory
		{
			get
			{
				if(_customerOrderHistory==null)
				{
					_customerOrderHistory = new EntityCollection<CustomerOrderHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerOrderHistoryEntityFactory)));
					_customerOrderHistory.SetContainingEntityInfo(this, "Events");
				}
				return _customerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerRegistrationNotesEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerRegistrationNotesEntity))]
		public virtual EntityCollection<CustomerRegistrationNotesEntity> CustomerRegistrationNotes
		{
			get
			{
				if(_customerRegistrationNotes==null)
				{
					_customerRegistrationNotes = new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory)));
					_customerRegistrationNotes.SetContainingEntityInfo(this, "Events");
				}
				return _customerRegistrationNotes;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomEventNotificationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomEventNotificationEntity))]
		public virtual EntityCollection<CustomEventNotificationEntity> CustomEventNotification
		{
			get
			{
				if(_customEventNotification==null)
				{
					_customEventNotification = new EntityCollection<CustomEventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomEventNotificationEntityFactory)));
					_customEventNotification.SetContainingEntityInfo(this, "Events");
				}
				return _customEventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DependentDisqualifiedTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DependentDisqualifiedTestEntity))]
		public virtual EntityCollection<DependentDisqualifiedTestEntity> DependentDisqualifiedTest
		{
			get
			{
				if(_dependentDisqualifiedTest==null)
				{
					_dependentDisqualifiedTest = new EntityCollection<DependentDisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DependentDisqualifiedTestEntityFactory)));
					_dependentDisqualifiedTest.SetContainingEntityInfo(this, "Events");
				}
				return _dependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'DisqualifiedTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(DisqualifiedTestEntity))]
		public virtual EntityCollection<DisqualifiedTestEntity> DisqualifiedTest
		{
			get
			{
				if(_disqualifiedTest==null)
				{
					_disqualifiedTest = new EntityCollection<DisqualifiedTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(DisqualifiedTestEntityFactory)));
					_disqualifiedTest.SetContainingEntityInfo(this, "Events");
				}
				return _disqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAccountTestHcpcsCodeEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAccountTestHcpcsCodeEntity))]
		public virtual EntityCollection<EventAccountTestHcpcsCodeEntity> EventAccountTestHcpcsCode
		{
			get
			{
				if(_eventAccountTestHcpcsCode==null)
				{
					_eventAccountTestHcpcsCode = new EntityCollection<EventAccountTestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAccountTestHcpcsCodeEntityFactory)));
					_eventAccountTestHcpcsCode.SetContainingEntityInfo(this, "Events");
				}
				return _eventAccountTestHcpcsCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAffiliateDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAffiliateDetailsEntity))]
		public virtual EntityCollection<EventAffiliateDetailsEntity> EventAffiliateDetails
		{
			get
			{
				if(_eventAffiliateDetails==null)
				{
					_eventAffiliateDetails = new EntityCollection<EventAffiliateDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAffiliateDetailsEntityFactory)));
					_eventAffiliateDetails.SetContainingEntityInfo(this, "Events");
				}
				return _eventAffiliateDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAppointmentCancellationLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAppointmentCancellationLogEntity))]
		public virtual EntityCollection<EventAppointmentCancellationLogEntity> EventAppointmentCancellationLog
		{
			get
			{
				if(_eventAppointmentCancellationLog==null)
				{
					_eventAppointmentCancellationLog = new EntityCollection<EventAppointmentCancellationLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentCancellationLogEntityFactory)));
					_eventAppointmentCancellationLog.SetContainingEntityInfo(this, "Events");
				}
				return _eventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAppointmentChangeLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAppointmentChangeLogEntity))]
		public virtual EntityCollection<EventAppointmentChangeLogEntity> EventAppointmentChangeLog_
		{
			get
			{
				if(_eventAppointmentChangeLog_==null)
				{
					_eventAppointmentChangeLog_ = new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory)));
					_eventAppointmentChangeLog_.SetContainingEntityInfo(this, "Events_");
				}
				return _eventAppointmentChangeLog_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAppointmentChangeLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAppointmentChangeLogEntity))]
		public virtual EntityCollection<EventAppointmentChangeLogEntity> EventAppointmentChangeLog
		{
			get
			{
				if(_eventAppointmentChangeLog==null)
				{
					_eventAppointmentChangeLog = new EntityCollection<EventAppointmentChangeLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentChangeLogEntityFactory)));
					_eventAppointmentChangeLog.SetContainingEntityInfo(this, "Events");
				}
				return _eventAppointmentChangeLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCallDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCallDetailsEntity))]
		public virtual EntityCollection<EventCallDetailsEntity> EventCallDetails
		{
			get
			{
				if(_eventCallDetails==null)
				{
					_eventCallDetails = new EntityCollection<EventCallDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCallDetailsEntityFactory)));
					_eventCallDetails.SetContainingEntityInfo(this, "Events");
				}
				return _eventCallDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventChecklistTemplateEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventChecklistTemplateEntity))]
		public virtual EntityCollection<EventChecklistTemplateEntity> EventChecklistTemplate
		{
			get
			{
				if(_eventChecklistTemplate==null)
				{
					_eventChecklistTemplate = new EntityCollection<EventChecklistTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventChecklistTemplateEntityFactory)));
					_eventChecklistTemplate.SetContainingEntityInfo(this, "Events");
				}
				return _eventChecklistTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCouponsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCouponsEntity))]
		public virtual EntityCollection<EventCouponsEntity> EventCoupons
		{
			get
			{
				if(_eventCoupons==null)
				{
					_eventCoupons = new EntityCollection<EventCouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCouponsEntityFactory)));
					_eventCoupons.SetContainingEntityInfo(this, "Events");
				}
				return _eventCoupons;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomerQuestionAnswerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomerQuestionAnswerEntity))]
		public virtual EntityCollection<EventCustomerQuestionAnswerEntity> EventCustomerQuestionAnswer
		{
			get
			{
				if(_eventCustomerQuestionAnswer==null)
				{
					_eventCustomerQuestionAnswer = new EntityCollection<EventCustomerQuestionAnswerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerQuestionAnswerEntityFactory)));
					_eventCustomerQuestionAnswer.SetContainingEntityInfo(this, "Events");
				}
				return _eventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomerResultEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomerResultEntity))]
		public virtual EntityCollection<EventCustomerResultEntity> EventCustomerResult
		{
			get
			{
				if(_eventCustomerResult==null)
				{
					_eventCustomerResult = new EntityCollection<EventCustomerResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomerResultEntityFactory)));
					_eventCustomerResult.SetContainingEntityInfo(this, "Events");
				}
				return _eventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomers
		{
			get
			{
				if(_eventCustomers==null)
				{
					_eventCustomers = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomers.SetContainingEntityInfo(this, "Events");
				}
				return _eventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventFluConsentTemplateEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventFluConsentTemplateEntity))]
		public virtual EntityCollection<EventFluConsentTemplateEntity> EventFluConsentTemplate
		{
			get
			{
				if(_eventFluConsentTemplate==null)
				{
					_eventFluConsentTemplate = new EntityCollection<EventFluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventFluConsentTemplateEntityFactory)));
					_eventFluConsentTemplate.SetContainingEntityInfo(this, "Events");
				}
				return _eventFluConsentTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventHospitalFacilityEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventHospitalFacilityEntity))]
		public virtual EntityCollection<EventHospitalFacilityEntity> EventHospitalFacility
		{
			get
			{
				if(_eventHospitalFacility==null)
				{
					_eventHospitalFacility = new EntityCollection<EventHospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalFacilityEntityFactory)));
					_eventHospitalFacility.SetContainingEntityInfo(this, "Events");
				}
				return _eventHospitalFacility;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventHospitalPartnerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventHospitalPartnerEntity))]
		public virtual EntityCollection<EventHospitalPartnerEntity> EventHospitalPartner
		{
			get
			{
				if(_eventHospitalPartner==null)
				{
					_eventHospitalPartner = new EntityCollection<EventHospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHospitalPartnerEntityFactory)));
					_eventHospitalPartner.SetContainingEntityInfo(this, "Events");
				}
				return _eventHospitalPartner;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventHostPromotionsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventHostPromotionsEntity))]
		public virtual EntityCollection<EventHostPromotionsEntity> EventHostPromotions
		{
			get
			{
				if(_eventHostPromotions==null)
				{
					_eventHostPromotions = new EntityCollection<EventHostPromotionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventHostPromotionsEntityFactory)));
					_eventHostPromotions.SetContainingEntityInfo(this, "Events");
				}
				return _eventHostPromotions;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventMarketingOffersEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventMarketingOffersEntity))]
		public virtual EntityCollection<EventMarketingOffersEntity> EventMarketingOffers
		{
			get
			{
				if(_eventMarketingOffers==null)
				{
					_eventMarketingOffers = new EntityCollection<EventMarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMarketingOffersEntityFactory)));
					_eventMarketingOffers.SetContainingEntityInfo(this, "Events");
				}
				return _eventMarketingOffers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventMeetingDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventMeetingDetailsEntity))]
		public virtual EntityCollection<EventMeetingDetailsEntity> EventMeetingDetails
		{
			get
			{
				if(_eventMeetingDetails==null)
				{
					_eventMeetingDetails = new EntityCollection<EventMeetingDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventMeetingDetailsEntityFactory)));
					_eventMeetingDetails.SetContainingEntityInfo(this, "Events");
				}
				return _eventMeetingDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventNotesLogEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventNotesLogEntity))]
		public virtual EntityCollection<EventNotesLogEntity> EventNotesLog
		{
			get
			{
				if(_eventNotesLog==null)
				{
					_eventNotesLog = new EntityCollection<EventNotesLogEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotesLogEntityFactory)));
					_eventNotesLog.SetContainingEntityInfo(this, "Events");
				}
				return _eventNotesLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventNotificationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventNotificationEntity))]
		public virtual EntityCollection<EventNotificationEntity> EventNotification
		{
			get
			{
				if(_eventNotification==null)
				{
					_eventNotification = new EntityCollection<EventNotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNotificationEntityFactory)));
					_eventNotification.SetContainingEntityInfo(this, "Events");
				}
				return _eventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPackageDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPackageDetailsEntity))]
		public virtual EntityCollection<EventPackageDetailsEntity> EventPackageDetails
		{
			get
			{
				if(_eventPackageDetails==null)
				{
					_eventPackageDetails = new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory)));
					_eventPackageDetails.SetContainingEntityInfo(this, "Events");
				}
				return _eventPackageDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPhysicianTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPhysicianTestEntity))]
		public virtual EntityCollection<EventPhysicianTestEntity> EventPhysicianTest
		{
			get
			{
				if(_eventPhysicianTest==null)
				{
					_eventPhysicianTest = new EntityCollection<EventPhysicianTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPhysicianTestEntityFactory)));
					_eventPhysicianTest.SetContainingEntityInfo(this, "Events");
				}
				return _eventPhysicianTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPodEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPodEntity))]
		public virtual EntityCollection<EventPodEntity> EventPod
		{
			get
			{
				if(_eventPod==null)
				{
					_eventPod = new EntityCollection<EventPodEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodEntityFactory)));
					_eventPod.SetContainingEntityInfo(this, "Events");
				}
				return _eventPod;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventProductExclusionEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventProductExclusionEntity))]
		public virtual EntityCollection<EventProductExclusionEntity> EventProductExclusion
		{
			get
			{
				if(_eventProductExclusion==null)
				{
					_eventProductExclusion = new EntityCollection<EventProductExclusionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductExclusionEntityFactory)));
					_eventProductExclusion.SetContainingEntityInfo(this, "Events");
				}
				return _eventProductExclusion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventProductTypeEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventProductTypeEntity))]
		public virtual EntityCollection<EventProductTypeEntity> EventProductType
		{
			get
			{
				if(_eventProductType==null)
				{
					_eventProductType = new EntityCollection<EventProductTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventProductTypeEntityFactory)));
					_eventProductType.SetContainingEntityInfo(this, "Events");
				}
				return _eventProductType;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPublicationEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPublicationEntity))]
		public virtual EntityCollection<EventPublicationEntity> EventPublication
		{
			get
			{
				if(_eventPublication==null)
				{
					_eventPublication = new EntityCollection<EventPublicationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPublicationEntityFactory)));
					_eventPublication.SetContainingEntityInfo(this, "Events");
				}
				return _eventPublication;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventScheduleTemplateEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventScheduleTemplateEntity))]
		public virtual EntityCollection<EventScheduleTemplateEntity> EventScheduleTemplate
		{
			get
			{
				if(_eventScheduleTemplate==null)
				{
					_eventScheduleTemplate = new EntityCollection<EventScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventScheduleTemplateEntityFactory)));
					_eventScheduleTemplate.SetContainingEntityInfo(this, "Events");
				}
				return _eventScheduleTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventSchedulingSlotEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventSchedulingSlotEntity))]
		public virtual EntityCollection<EventSchedulingSlotEntity> EventSchedulingSlot
		{
			get
			{
				if(_eventSchedulingSlot==null)
				{
					_eventSchedulingSlot = new EntityCollection<EventSchedulingSlotEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSchedulingSlotEntityFactory)));
					_eventSchedulingSlot.SetContainingEntityInfo(this, "Events");
				}
				return _eventSchedulingSlot;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventStaffAssignmentEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventStaffAssignmentEntity))]
		public virtual EntityCollection<EventStaffAssignmentEntity> EventStaffAssignment
		{
			get
			{
				if(_eventStaffAssignment==null)
				{
					_eventStaffAssignment = new EntityCollection<EventStaffAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventStaffAssignmentEntityFactory)));
					_eventStaffAssignment.SetContainingEntityInfo(this, "Events");
				}
				return _eventStaffAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventSurveyTemplateEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventSurveyTemplateEntity))]
		public virtual EntityCollection<EventSurveyTemplateEntity> EventSurveyTemplate
		{
			get
			{
				if(_eventSurveyTemplate==null)
				{
					_eventSurveyTemplate = new EntityCollection<EventSurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventSurveyTemplateEntityFactory)));
					_eventSurveyTemplate.SetContainingEntityInfo(this, "Events");
				}
				return _eventSurveyTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventTaskDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventTaskDetailsEntity))]
		public virtual EntityCollection<EventTaskDetailsEntity> EventTaskDetails
		{
			get
			{
				if(_eventTaskDetails==null)
				{
					_eventTaskDetails = new EntityCollection<EventTaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTaskDetailsEntityFactory)));
					_eventTaskDetails.SetContainingEntityInfo(this, "Events");
				}
				return _eventTaskDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventTestEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventTestEntity))]
		public virtual EntityCollection<EventTestEntity> EventTest
		{
			get
			{
				if(_eventTest==null)
				{
					_eventTest = new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory)));
					_eventTest.SetContainingEntityInfo(this, "Events");
				}
				return _eventTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventZipEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventZipEntity))]
		public virtual EntityCollection<EventZipEntity> EventZip
		{
			get
			{
				if(_eventZip==null)
				{
					_eventZip = new EntityCollection<EventZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventZipEntityFactory)));
					_eventZip.SetContainingEntityInfo(this, "Events");
				}
				return _eventZip;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HealthPlanFillEventCallQueueEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HealthPlanFillEventCallQueueEntity))]
		public virtual EntityCollection<HealthPlanFillEventCallQueueEntity> HealthPlanFillEventCallQueue
		{
			get
			{
				if(_healthPlanFillEventCallQueue==null)
				{
					_healthPlanFillEventCallQueue = new EntityCollection<HealthPlanFillEventCallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanFillEventCallQueueEntityFactory)));
					_healthPlanFillEventCallQueue.SetContainingEntityInfo(this, "Events");
				}
				return _healthPlanFillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalPartnerCustomerEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalPartnerCustomerEntity))]
		public virtual EntityCollection<HospitalPartnerCustomerEntity> HospitalPartnerCustomer
		{
			get
			{
				if(_hospitalPartnerCustomer==null)
				{
					_hospitalPartnerCustomer = new EntityCollection<HospitalPartnerCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerCustomerEntityFactory)));
					_hospitalPartnerCustomer.SetContainingEntityInfo(this, "Events");
				}
				return _hospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalPartnerEventNotesEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalPartnerEventNotesEntity))]
		public virtual EntityCollection<HospitalPartnerEventNotesEntity> HospitalPartnerEventNotes
		{
			get
			{
				if(_hospitalPartnerEventNotes==null)
				{
					_hospitalPartnerEventNotes = new EntityCollection<HospitalPartnerEventNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEventNotesEntityFactory)));
					_hospitalPartnerEventNotes.SetContainingEntityInfo(this, "Events");
				}
				return _hospitalPartnerEventNotes;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HostEventDetailsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HostEventDetailsEntity))]
		public virtual EntityCollection<HostEventDetailsEntity> HostEventDetails
		{
			get
			{
				if(_hostEventDetails==null)
				{
					_hostEventDetails = new EntityCollection<HostEventDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostEventDetailsEntityFactory)));
					_hostEventDetails.SetContainingEntityInfo(this, "Events");
				}
				return _hostEventDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HostPaymentEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HostPaymentEntity))]
		public virtual EntityCollection<HostPaymentEntity> HostPayment
		{
			get
			{
				if(_hostPayment==null)
				{
					_hostPayment = new EntityCollection<HostPaymentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HostPaymentEntityFactory)));
					_hostPayment.SetContainingEntityInfo(this, "Events");
				}
				return _hostPayment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MarketingPrintOrderEventMappingEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MarketingPrintOrderEventMappingEntity))]
		public virtual EntityCollection<MarketingPrintOrderEventMappingEntity> MarketingPrintOrderEventMapping
		{
			get
			{
				if(_marketingPrintOrderEventMapping==null)
				{
					_marketingPrintOrderEventMapping = new EntityCollection<MarketingPrintOrderEventMappingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEventMappingEntityFactory)));
					_marketingPrintOrderEventMapping.SetContainingEntityInfo(this, "Events");
				}
				return _marketingPrintOrderEventMapping;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianEventAssignmentEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianEventAssignmentEntity))]
		public virtual EntityCollection<PhysicianEventAssignmentEntity> PhysicianEventAssignment
		{
			get
			{
				if(_physicianEventAssignment==null)
				{
					_physicianEventAssignment = new EntityCollection<PhysicianEventAssignmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEventAssignmentEntityFactory)));
					_physicianEventAssignment.SetContainingEntityInfo(this, "Events");
				}
				return _physicianEventAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianInvoiceItemEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianInvoiceItemEntity))]
		public virtual EntityCollection<PhysicianInvoiceItemEntity> PhysicianInvoiceItem
		{
			get
			{
				if(_physicianInvoiceItem==null)
				{
					_physicianInvoiceItem = new EntityCollection<PhysicianInvoiceItemEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceItemEntityFactory)));
					_physicianInvoiceItem.SetContainingEntityInfo(this, "Events");
				}
				return _physicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationResultEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationResultEntity))]
		public virtual EntityCollection<PreQualificationResultEntity> PreQualificationResult
		{
			get
			{
				if(_preQualificationResult==null)
				{
					_preQualificationResult = new EntityCollection<PreQualificationResultEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationResultEntityFactory)));
					_preQualificationResult.SetContainingEntityInfo(this, "Events");
				}
				return _preQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ResultArchiveUploadEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ResultArchiveUploadEntity))]
		public virtual EntityCollection<ResultArchiveUploadEntity> ResultArchiveUpload
		{
			get
			{
				if(_resultArchiveUpload==null)
				{
					_resultArchiveUpload = new EntityCollection<ResultArchiveUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ResultArchiveUploadEntityFactory)));
					_resultArchiveUpload.SetContainingEntityInfo(this, "Events");
				}
				return _resultArchiveUpload;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'SeminarsEntity' which are related to this entity via a relation of type '1:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(SeminarsEntity))]
		public virtual EntityCollection<SeminarsEntity> Seminars
		{
			get
			{
				if(_seminars==null)
				{
					_seminars = new EntityCollection<SeminarsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SeminarsEntityFactory)));
					_seminars.SetContainingEntityInfo(this, "Events");
				}
				return _seminars;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaCallQueueCustomer
		{
			get
			{
				if(_accountCollectionViaCallQueueCustomer==null)
				{
					_accountCollectionViaCallQueueCustomer = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _accountCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AccountEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AccountEntity))]
		public virtual EntityCollection<AccountEntity> AccountCollectionViaCustomEventNotification
		{
			get
			{
				if(_accountCollectionViaCustomEventNotification==null)
				{
					_accountCollectionViaCustomEventNotification = new EntityCollection<AccountEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AccountEntityFactory)));
					_accountCollectionViaCustomEventNotification.IsReadOnly=true;
				}
				return _accountCollectionViaCustomEventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ActivityTypeEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ActivityTypeEntity))]
		public virtual EntityCollection<ActivityTypeEntity> ActivityTypeCollectionViaCallQueueCustomer
		{
			get
			{
				if(_activityTypeCollectionViaCallQueueCustomer==null)
				{
					_activityTypeCollectionViaCallQueueCustomer = new EntityCollection<ActivityTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ActivityTypeEntityFactory)));
					_activityTypeCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _activityTypeCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AddressEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AddressEntity))]
		public virtual EntityCollection<AddressEntity> AddressCollectionViaHostPayment
		{
			get
			{
				if(_addressCollectionViaHostPayment==null)
				{
					_addressCollectionViaHostPayment = new EntityCollection<AddressEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AddressEntityFactory)));
					_addressCollectionViaHostPayment.IsReadOnly=true;
				}
				return _addressCollectionViaHostPayment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AfaffiliateCampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AfaffiliateCampaignEntity))]
		public virtual EntityCollection<AfaffiliateCampaignEntity> AfaffiliateCampaignCollectionViaEventCustomers
		{
			get
			{
				if(_afaffiliateCampaignCollectionViaEventCustomers==null)
				{
					_afaffiliateCampaignCollectionViaEventCustomers = new EntityCollection<AfaffiliateCampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfaffiliateCampaignEntityFactory)));
					_afaffiliateCampaignCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _afaffiliateCampaignCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AffiliateProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AffiliateProfileEntity))]
		public virtual EntityCollection<AffiliateProfileEntity> AffiliateProfileCollectionViaEventAffiliateDetails
		{
			get
			{
				if(_affiliateProfileCollectionViaEventAffiliateDetails==null)
				{
					_affiliateProfileCollectionViaEventAffiliateDetails = new EntityCollection<AffiliateProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AffiliateProfileEntityFactory)));
					_affiliateProfileCollectionViaEventAffiliateDetails.IsReadOnly=true;
				}
				return _affiliateProfileCollectionViaEventAffiliateDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'AfmarketingMaterialTypeEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(AfmarketingMaterialTypeEntity))]
		public virtual EntityCollection<AfmarketingMaterialTypeEntity> AfmarketingMaterialTypeCollectionViaAfmarketingMaterial
		{
			get
			{
				if(_afmarketingMaterialTypeCollectionViaAfmarketingMaterial==null)
				{
					_afmarketingMaterialTypeCollectionViaAfmarketingMaterial = new EntityCollection<AfmarketingMaterialTypeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(AfmarketingMaterialTypeEntityFactory)));
					_afmarketingMaterialTypeCollectionViaAfmarketingMaterial.IsReadOnly=true;
				}
				return _afmarketingMaterialTypeCollectionViaAfmarketingMaterial;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueEntity))]
		public virtual EntityCollection<CallQueueEntity> CallQueueCollectionViaCallQueueCustomer
		{
			get
			{
				if(_callQueueCollectionViaCallQueueCustomer==null)
				{
					_callQueueCollectionViaCallQueueCustomer = new EntityCollection<CallQueueEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueEntityFactory)));
					_callQueueCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _callQueueCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallQueueCriteriaEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallQueueCriteriaEntity))]
		public virtual EntityCollection<CallQueueCriteriaEntity> CallQueueCriteriaCollectionViaCallQueueCustomer
		{
			get
			{
				if(_callQueueCriteriaCollectionViaCallQueueCustomer==null)
				{
					_callQueueCriteriaCollectionViaCallQueueCustomer = new EntityCollection<CallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallQueueCriteriaEntityFactory)));
					_callQueueCriteriaCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _callQueueCriteriaCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CallsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CallsEntity))]
		public virtual EntityCollection<CallsEntity> CallsCollectionViaPreQualificationResult
		{
			get
			{
				if(_callsCollectionViaPreQualificationResult==null)
				{
					_callsCollectionViaPreQualificationResult = new EntityCollection<CallsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CallsEntityFactory)));
					_callsCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _callsCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CampaignEntity))]
		public virtual EntityCollection<CampaignEntity> CampaignCollectionViaCallQueueCustomer
		{
			get
			{
				if(_campaignCollectionViaCallQueueCustomer==null)
				{
					_campaignCollectionViaCallQueueCustomer = new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory)));
					_campaignCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _campaignCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CampaignEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CampaignEntity))]
		public virtual EntityCollection<CampaignEntity> CampaignCollectionViaEventCustomers
		{
			get
			{
				if(_campaignCollectionViaEventCustomers==null)
				{
					_campaignCollectionViaEventCustomers = new EntityCollection<CampaignEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CampaignEntityFactory)));
					_campaignCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _campaignCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CheckListTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CheckListTemplateEntity))]
		public virtual EntityCollection<CheckListTemplateEntity> CheckListTemplateCollectionViaEventChecklistTemplate
		{
			get
			{
				if(_checkListTemplateCollectionViaEventChecklistTemplate==null)
				{
					_checkListTemplateCollectionViaEventChecklistTemplate = new EntityCollection<CheckListTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CheckListTemplateEntityFactory)));
					_checkListTemplateCollectionViaEventChecklistTemplate.IsReadOnly=true;
				}
				return _checkListTemplateCollectionViaEventChecklistTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ContactCallEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ContactCallEntity))]
		public virtual EntityCollection<ContactCallEntity> ContactCallCollectionViaEventCallDetails
		{
			get
			{
				if(_contactCallCollectionViaEventCallDetails==null)
				{
					_contactCallCollectionViaEventCallDetails = new EntityCollection<ContactCallEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactCallEntityFactory)));
					_contactCallCollectionViaEventCallDetails.IsReadOnly=true;
				}
				return _contactCallCollectionViaEventCallDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ContactMeetingEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ContactMeetingEntity))]
		public virtual EntityCollection<ContactMeetingEntity> ContactMeetingCollectionViaEventMeetingDetails
		{
			get
			{
				if(_contactMeetingCollectionViaEventMeetingDetails==null)
				{
					_contactMeetingCollectionViaEventMeetingDetails = new EntityCollection<ContactMeetingEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ContactMeetingEntityFactory)));
					_contactMeetingCollectionViaEventMeetingDetails.IsReadOnly=true;
				}
				return _contactMeetingCollectionViaEventMeetingDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CorporateUploadEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CorporateUploadEntity))]
		public virtual EntityCollection<CorporateUploadEntity> CorporateUploadCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_corporateUploadCollectionViaCustomerOrderHistory==null)
				{
					_corporateUploadCollectionViaCustomerOrderHistory = new EntityCollection<CorporateUploadEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CorporateUploadEntityFactory)));
					_corporateUploadCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _corporateUploadCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CouponsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CouponsEntity))]
		public virtual EntityCollection<CouponsEntity> CouponsCollectionViaEventCoupons
		{
			get
			{
				if(_couponsCollectionViaEventCoupons==null)
				{
					_couponsCollectionViaEventCoupons = new EntityCollection<CouponsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CouponsEntityFactory)));
					_couponsCollectionViaEventCoupons.IsReadOnly=true;
				}
				return _couponsCollectionViaEventCoupons;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerHealthQuestionsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerHealthQuestionsEntity))]
		public virtual EntityCollection<CustomerHealthQuestionsEntity> CustomerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<CustomerHealthQuestionsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerHealthQuestionsEntityFactory)));
					_customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _customerHealthQuestionsCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaHospitalPartnerCustomer
		{
			get
			{
				if(_customerProfileCollectionViaHospitalPartnerCustomer==null)
				{
					_customerProfileCollectionViaHospitalPartnerCustomer = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaHospitalPartnerCustomer.IsReadOnly=true;
				}
				return _customerProfileCollectionViaHospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_customerProfileCollectionViaEventCustomerQuestionAnswer==null)
				{
					_customerProfileCollectionViaEventCustomerQuestionAnswer = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _customerProfileCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaEventCustomerResult
		{
			get
			{
				if(_customerProfileCollectionViaEventCustomerResult==null)
				{
					_customerProfileCollectionViaEventCustomerResult = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _customerProfileCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_customerProfileCollectionViaDependentDisqualifiedTest==null)
				{
					_customerProfileCollectionViaDependentDisqualifiedTest = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _customerProfileCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_customerProfileCollectionViaPhysicianInvoiceItem==null)
				{
					_customerProfileCollectionViaPhysicianInvoiceItem = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _customerProfileCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaEventCustomers
		{
			get
			{
				if(_customerProfileCollectionViaEventCustomers==null)
				{
					_customerProfileCollectionViaEventCustomers = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _customerProfileCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaDisqualifiedTest
		{
			get
			{
				if(_customerProfileCollectionViaDisqualifiedTest==null)
				{
					_customerProfileCollectionViaDisqualifiedTest = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _customerProfileCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaCustomerEventTestFinding
		{
			get
			{
				if(_customerProfileCollectionViaCustomerEventTestFinding==null)
				{
					_customerProfileCollectionViaCustomerEventTestFinding = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaCustomerEventTestFinding.IsReadOnly=true;
				}
				return _customerProfileCollectionViaCustomerEventTestFinding;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_customerProfileCollectionViaCustomerOrderHistory==null)
				{
					_customerProfileCollectionViaCustomerOrderHistory = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _customerProfileCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaPreQualificationResult
		{
			get
			{
				if(_customerProfileCollectionViaPreQualificationResult==null)
				{
					_customerProfileCollectionViaPreQualificationResult = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _customerProfileCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_customerProfileCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_customerProfileCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _customerProfileCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileEntity))]
		public virtual EntityCollection<CustomerProfileEntity> CustomerProfileCollectionViaCallQueueCustomer
		{
			get
			{
				if(_customerProfileCollectionViaCallQueueCustomer==null)
				{
					_customerProfileCollectionViaCallQueueCustomer = new EntityCollection<CustomerProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileEntityFactory)));
					_customerProfileCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _customerProfileCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerProfileHistoryEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerProfileHistoryEntity))]
		public virtual EntityCollection<CustomerProfileHistoryEntity> CustomerProfileHistoryCollectionViaEventCustomers
		{
			get
			{
				if(_customerProfileHistoryCollectionViaEventCustomers==null)
				{
					_customerProfileHistoryCollectionViaEventCustomers = new EntityCollection<CustomerProfileHistoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerProfileHistoryEntityFactory)));
					_customerProfileHistoryCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _customerProfileHistoryCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerRegistrationNotesEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerRegistrationNotesEntity))]
		public virtual EntityCollection<CustomerRegistrationNotesEntity> CustomerRegistrationNotesCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog==null)
				{
					_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog = new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory)));
					_customerRegistrationNotesCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _customerRegistrationNotesCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'CustomerRegistrationNotesEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(CustomerRegistrationNotesEntity))]
		public virtual EntityCollection<CustomerRegistrationNotesEntity> CustomerRegistrationNotesCollectionViaEventCustomers
		{
			get
			{
				if(_customerRegistrationNotesCollectionViaEventCustomers==null)
				{
					_customerRegistrationNotesCollectionViaEventCustomers = new EntityCollection<CustomerRegistrationNotesEntity>(EntityFactoryCache2.GetEntityFactory(typeof(CustomerRegistrationNotesEntityFactory)));
					_customerRegistrationNotesCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _customerRegistrationNotesCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventAppointmentEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventAppointmentEntity))]
		public virtual EntityCollection<EventAppointmentEntity> EventAppointmentCollectionViaEventCustomers
		{
			get
			{
				if(_eventAppointmentCollectionViaEventCustomers==null)
				{
					_eventAppointmentCollectionViaEventCustomers = new EntityCollection<EventAppointmentEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventAppointmentEntityFactory)));
					_eventAppointmentCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _eventAppointmentCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_eventCustomersCollectionViaEventAppointmentCancellationLog==null)
				{
					_eventCustomersCollectionViaEventAppointmentCancellationLog = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCallQueueCustomer
		{
			get
			{
				if(_eventCustomersCollectionViaCallQueueCustomer==null)
				{
					_eventCustomersCollectionViaCallQueueCustomer = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaDisqualifiedTest
		{
			get
			{
				if(_eventCustomersCollectionViaDisqualifiedTest==null)
				{
					_eventCustomersCollectionViaDisqualifiedTest = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				if(_eventCustomersCollectionViaEventAppointmentChangeLog_==null)
				{
					_eventCustomersCollectionViaEventAppointmentChangeLog_ = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaEventAppointmentChangeLog_.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaEventAppointmentChangeLog_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_eventCustomersCollectionViaEventCustomerQuestionAnswer==null)
				{
					_eventCustomersCollectionViaEventCustomerQuestionAnswer = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventCustomersCollectionViaCustomerOrderHistory==null)
				{
					_eventCustomersCollectionViaCustomerOrderHistory = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_eventCustomersCollectionViaDependentDisqualifiedTest==null)
				{
					_eventCustomersCollectionViaDependentDisqualifiedTest = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventCustomersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventCustomersEntity))]
		public virtual EntityCollection<EventCustomersEntity> EventCustomersCollectionViaEventAppointmentChangeLog
		{
			get
			{
				if(_eventCustomersCollectionViaEventAppointmentChangeLog==null)
				{
					_eventCustomersCollectionViaEventAppointmentChangeLog = new EntityCollection<EventCustomersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventCustomersEntityFactory)));
					_eventCustomersCollectionViaEventAppointmentChangeLog.IsReadOnly=true;
				}
				return _eventCustomersCollectionViaEventAppointmentChangeLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventNoteEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventNoteEntity))]
		public virtual EntityCollection<EventNoteEntity> EventNoteCollectionViaEventNotesLog
		{
			get
			{
				if(_eventNoteCollectionViaEventNotesLog==null)
				{
					_eventNoteCollectionViaEventNotesLog = new EntityCollection<EventNoteEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventNoteEntityFactory)));
					_eventNoteCollectionViaEventNotesLog.IsReadOnly=true;
				}
				return _eventNoteCollectionViaEventNotesLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPackageDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPackageDetailsEntity))]
		public virtual EntityCollection<EventPackageDetailsEntity> EventPackageDetailsCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventPackageDetailsCollectionViaCustomerOrderHistory==null)
				{
					_eventPackageDetailsCollectionViaCustomerOrderHistory = new EntityCollection<EventPackageDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPackageDetailsEntityFactory)));
					_eventPackageDetailsCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventPackageDetailsCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventPodRoomEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventPodRoomEntity))]
		public virtual EntityCollection<EventPodRoomEntity> EventPodRoomCollectionViaEventSchedulingSlot
		{
			get
			{
				if(_eventPodRoomCollectionViaEventSchedulingSlot==null)
				{
					_eventPodRoomCollectionViaEventSchedulingSlot = new EntityCollection<EventPodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventPodRoomEntityFactory)));
					_eventPodRoomCollectionViaEventSchedulingSlot.IsReadOnly=true;
				}
				return _eventPodRoomCollectionViaEventSchedulingSlot;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'EventTestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(EventTestEntity))]
		public virtual EntityCollection<EventTestEntity> EventTestCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_eventTestCollectionViaCustomerOrderHistory==null)
				{
					_eventTestCollectionViaCustomerOrderHistory = new EntityCollection<EventTestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(EventTestEntityFactory)));
					_eventTestCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _eventTestCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'FileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(FileEntity))]
		public virtual EntityCollection<FileEntity> FileCollectionViaResultArchiveUpload
		{
			get
			{
				if(_fileCollectionViaResultArchiveUpload==null)
				{
					_fileCollectionViaResultArchiveUpload = new EntityCollection<FileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FileEntityFactory)));
					_fileCollectionViaResultArchiveUpload.IsReadOnly=true;
				}
				return _fileCollectionViaResultArchiveUpload;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'FluConsentTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(FluConsentTemplateEntity))]
		public virtual EntityCollection<FluConsentTemplateEntity> FluConsentTemplateCollectionViaEventFluConsentTemplate
		{
			get
			{
				if(_fluConsentTemplateCollectionViaEventFluConsentTemplate==null)
				{
					_fluConsentTemplateCollectionViaEventFluConsentTemplate = new EntityCollection<FluConsentTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(FluConsentTemplateEntityFactory)));
					_fluConsentTemplateCollectionViaEventFluConsentTemplate.IsReadOnly=true;
				}
				return _fluConsentTemplateCollectionViaEventFluConsentTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'GcNotGivenReasonEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(GcNotGivenReasonEntity))]
		public virtual EntityCollection<GcNotGivenReasonEntity> GcNotGivenReasonCollectionViaEventCustomers
		{
			get
			{
				if(_gcNotGivenReasonCollectionViaEventCustomers==null)
				{
					_gcNotGivenReasonCollectionViaEventCustomers = new EntityCollection<GcNotGivenReasonEntity>(EntityFactoryCache2.GetEntityFactory(typeof(GcNotGivenReasonEntityFactory)));
					_gcNotGivenReasonCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _gcNotGivenReasonCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HafTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HafTemplateEntity))]
		public virtual EntityCollection<HafTemplateEntity> HafTemplateCollectionViaEventPackageDetails
		{
			get
			{
				if(_hafTemplateCollectionViaEventPackageDetails==null)
				{
					_hafTemplateCollectionViaEventPackageDetails = new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory)));
					_hafTemplateCollectionViaEventPackageDetails.IsReadOnly=true;
				}
				return _hafTemplateCollectionViaEventPackageDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HafTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HafTemplateEntity))]
		public virtual EntityCollection<HafTemplateEntity> HafTemplateCollectionViaEventTest
		{
			get
			{
				if(_hafTemplateCollectionViaEventTest==null)
				{
					_hafTemplateCollectionViaEventTest = new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory)));
					_hafTemplateCollectionViaEventTest.IsReadOnly=true;
				}
				return _hafTemplateCollectionViaEventTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HafTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HafTemplateEntity))]
		public virtual EntityCollection<HafTemplateEntity> HafTemplateCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_hafTemplateCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_hafTemplateCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<HafTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HafTemplateEntityFactory)));
					_hafTemplateCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _hafTemplateCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HealthPlanCallQueueCriteriaEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HealthPlanCallQueueCriteriaEntity))]
		public virtual EntityCollection<HealthPlanCallQueueCriteriaEntity> HealthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue
		{
			get
			{
				if(_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue==null)
				{
					_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue = new EntityCollection<HealthPlanCallQueueCriteriaEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HealthPlanCallQueueCriteriaEntityFactory)));
					_healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue.IsReadOnly=true;
				}
				return _healthPlanCallQueueCriteriaCollectionViaHealthPlanFillEventCallQueue;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalFacilityEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalFacilityEntity))]
		public virtual EntityCollection<HospitalFacilityEntity> HospitalFacilityCollectionViaEventHospitalFacility
		{
			get
			{
				if(_hospitalFacilityCollectionViaEventHospitalFacility==null)
				{
					_hospitalFacilityCollectionViaEventHospitalFacility = new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory)));
					_hospitalFacilityCollectionViaEventHospitalFacility.IsReadOnly=true;
				}
				return _hospitalFacilityCollectionViaEventHospitalFacility;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalFacilityEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalFacilityEntity))]
		public virtual EntityCollection<HospitalFacilityEntity> HospitalFacilityCollectionViaEventCustomers
		{
			get
			{
				if(_hospitalFacilityCollectionViaEventCustomers==null)
				{
					_hospitalFacilityCollectionViaEventCustomers = new EntityCollection<HospitalFacilityEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalFacilityEntityFactory)));
					_hospitalFacilityCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _hospitalFacilityCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'HospitalPartnerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(HospitalPartnerEntity))]
		public virtual EntityCollection<HospitalPartnerEntity> HospitalPartnerCollectionViaEventHospitalPartner
		{
			get
			{
				if(_hospitalPartnerCollectionViaEventHospitalPartner==null)
				{
					_hospitalPartnerCollectionViaEventHospitalPartner = new EntityCollection<HospitalPartnerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(HospitalPartnerEntityFactory)));
					_hospitalPartnerCollectionViaEventHospitalPartner.IsReadOnly=true;
				}
				return _hospitalPartnerCollectionViaEventHospitalPartner;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LanguageEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LanguageEntity))]
		public virtual EntityCollection<LanguageEntity> LanguageCollectionViaCallQueueCustomer
		{
			get
			{
				if(_languageCollectionViaCallQueueCustomer==null)
				{
					_languageCollectionViaCallQueueCustomer = new EntityCollection<LanguageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LanguageEntityFactory)));
					_languageCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _languageCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventSchedulingSlot
		{
			get
			{
				if(_lookupCollectionViaEventSchedulingSlot==null)
				{
					_lookupCollectionViaEventSchedulingSlot = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventSchedulingSlot.IsReadOnly=true;
				}
				return _lookupCollectionViaEventSchedulingSlot;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventPackageDetails
		{
			get
			{
				if(_lookupCollectionViaEventPackageDetails==null)
				{
					_lookupCollectionViaEventPackageDetails = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventPackageDetails.IsReadOnly=true;
				}
				return _lookupCollectionViaEventPackageDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventTest
		{
			get
			{
				if(_lookupCollectionViaEventTest==null)
				{
					_lookupCollectionViaEventTest = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventTest.IsReadOnly=true;
				}
				return _lookupCollectionViaEventTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomers
		{
			get
			{
				if(_lookupCollectionViaEventCustomers==null)
				{
					_lookupCollectionViaEventCustomers = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomerResult
		{
			get
			{
				if(_lookupCollectionViaEventCustomerResult==null)
				{
					_lookupCollectionViaEventCustomerResult = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventCustomers_
		{
			get
			{
				if(_lookupCollectionViaEventCustomers_==null)
				{
					_lookupCollectionViaEventCustomers_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventCustomers_.IsReadOnly=true;
				}
				return _lookupCollectionViaEventCustomers_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventTest__
		{
			get
			{
				if(_lookupCollectionViaEventTest__==null)
				{
					_lookupCollectionViaEventTest__ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventTest__.IsReadOnly=true;
				}
				return _lookupCollectionViaEventTest__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventTest_
		{
			get
			{
				if(_lookupCollectionViaEventTest_==null)
				{
					_lookupCollectionViaEventTest_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventTest_.IsReadOnly=true;
				}
				return _lookupCollectionViaEventTest_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_____
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_____==null)
				{
					_lookupCollectionViaPreQualificationResult_____ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_____.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomEventNotification
		{
			get
			{
				if(_lookupCollectionViaCustomEventNotification==null)
				{
					_lookupCollectionViaCustomEventNotification = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomEventNotification.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomEventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerRegistrationNotes
		{
			get
			{
				if(_lookupCollectionViaCustomerRegistrationNotes==null)
				{
					_lookupCollectionViaCustomerRegistrationNotes = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerRegistrationNotes.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerRegistrationNotes;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaHostPayment_
		{
			get
			{
				if(_lookupCollectionViaHostPayment_==null)
				{
					_lookupCollectionViaHostPayment_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaHostPayment_.IsReadOnly=true;
				}
				return _lookupCollectionViaHostPayment_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCustomerOrderHistory
		{
			get
			{
				if(_lookupCollectionViaCustomerOrderHistory==null)
				{
					_lookupCollectionViaCustomerOrderHistory = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCustomerOrderHistory.IsReadOnly=true;
				}
				return _lookupCollectionViaCustomerOrderHistory;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult__
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult__==null)
				{
					_lookupCollectionViaPreQualificationResult__ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult__.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult___
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult___==null)
				{
					_lookupCollectionViaPreQualificationResult___ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult___.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult___;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_==null)
				{
					_lookupCollectionViaPreQualificationResult_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult____
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult____==null)
				{
					_lookupCollectionViaPreQualificationResult____ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult____.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult==null)
				{
					_lookupCollectionViaPreQualificationResult = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				if(_lookupCollectionViaEventAppointmentChangeLog_==null)
				{
					_lookupCollectionViaEventAppointmentChangeLog_ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventAppointmentChangeLog_.IsReadOnly=true;
				}
				return _lookupCollectionViaEventAppointmentChangeLog_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaHostPayment
		{
			get
			{
				if(_lookupCollectionViaHostPayment==null)
				{
					_lookupCollectionViaHostPayment = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaHostPayment.IsReadOnly=true;
				}
				return _lookupCollectionViaHostPayment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaCallQueueCustomer
		{
			get
			{
				if(_lookupCollectionViaCallQueueCustomer==null)
				{
					_lookupCollectionViaCallQueueCustomer = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _lookupCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventAppointmentChangeLog
		{
			get
			{
				if(_lookupCollectionViaEventAppointmentChangeLog==null)
				{
					_lookupCollectionViaEventAppointmentChangeLog = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventAppointmentChangeLog.IsReadOnly=true;
				}
				return _lookupCollectionViaEventAppointmentChangeLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult_______
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult_______==null)
				{
					_lookupCollectionViaPreQualificationResult_______ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult_______.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult_______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult______
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult______==null)
				{
					_lookupCollectionViaPreQualificationResult______ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult______.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_lookupCollectionViaEventAppointmentCancellationLog==null)
				{
					_lookupCollectionViaEventAppointmentCancellationLog = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _lookupCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'LookupEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(LookupEntity))]
		public virtual EntityCollection<LookupEntity> LookupCollectionViaPreQualificationResult________
		{
			get
			{
				if(_lookupCollectionViaPreQualificationResult________==null)
				{
					_lookupCollectionViaPreQualificationResult________ = new EntityCollection<LookupEntity>(EntityFactoryCache2.GetEntityFactory(typeof(LookupEntityFactory)));
					_lookupCollectionViaPreQualificationResult________.IsReadOnly=true;
				}
				return _lookupCollectionViaPreQualificationResult________;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MarketingOffersEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MarketingOffersEntity))]
		public virtual EntityCollection<MarketingOffersEntity> MarketingOffersCollectionViaEventMarketingOffers
		{
			get
			{
				if(_marketingOffersCollectionViaEventMarketingOffers==null)
				{
					_marketingOffersCollectionViaEventMarketingOffers = new EntityCollection<MarketingOffersEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingOffersEntityFactory)));
					_marketingOffersCollectionViaEventMarketingOffers.IsReadOnly=true;
				}
				return _marketingOffersCollectionViaEventMarketingOffers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'MarketingPrintOrderEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(MarketingPrintOrderEntity))]
		public virtual EntityCollection<MarketingPrintOrderEntity> MarketingPrintOrderCollectionViaMarketingPrintOrderEventMapping
		{
			get
			{
				if(_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping==null)
				{
					_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping = new EntityCollection<MarketingPrintOrderEntity>(EntityFactoryCache2.GetEntityFactory(typeof(MarketingPrintOrderEntityFactory)));
					_marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping.IsReadOnly=true;
				}
				return _marketingPrintOrderCollectionViaMarketingPrintOrderEventMapping;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'NotesDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(NotesDetailsEntity))]
		public virtual EntityCollection<NotesDetailsEntity> NotesDetailsCollectionViaCallQueueCustomer
		{
			get
			{
				if(_notesDetailsCollectionViaCallQueueCustomer==null)
				{
					_notesDetailsCollectionViaCallQueueCustomer = new EntityCollection<NotesDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotesDetailsEntityFactory)));
					_notesDetailsCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _notesDetailsCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'NotificationEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(NotificationEntity))]
		public virtual EntityCollection<NotificationEntity> NotificationCollectionViaEventNotification
		{
			get
			{
				if(_notificationCollectionViaEventNotification==null)
				{
					_notificationCollectionViaEventNotification = new EntityCollection<NotificationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(NotificationEntityFactory)));
					_notificationCollectionViaEventNotification.IsReadOnly=true;
				}
				return _notificationCollectionViaEventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationEntity))]
		public virtual EntityCollection<OrganizationEntity> OrganizationCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				if(_organizationCollectionViaEventAccountTestHcpcsCode==null)
				{
					_organizationCollectionViaEventAccountTestHcpcsCode = new EntityCollection<OrganizationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationEntityFactory)));
					_organizationCollectionViaEventAccountTestHcpcsCode.IsReadOnly=true;
				}
				return _organizationCollectionViaEventAccountTestHcpcsCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer__
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer__==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaSeminars
		{
			get
			{
				if(_organizationRoleUserCollectionViaSeminars==null)
				{
					_organizationRoleUserCollectionViaSeminars = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaSeminars.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaSeminars;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer_==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventStaffAssignment_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventStaffAssignment_==null)
				{
					_organizationRoleUserCollectionViaEventStaffAssignment_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventStaffAssignment_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventStaffAssignment_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHospitalPartnerCustomer
		{
			get
			{
				if(_organizationRoleUserCollectionViaHospitalPartnerCustomer==null)
				{
					_organizationRoleUserCollectionViaHospitalPartnerCustomer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHospitalPartnerCustomer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHospitalPartnerCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventStaffAssignment__
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventStaffAssignment__==null)
				{
					_organizationRoleUserCollectionViaEventStaffAssignment__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventStaffAssignment__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventStaffAssignment__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventPhysicianTest__
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventPhysicianTest__==null)
				{
					_organizationRoleUserCollectionViaEventPhysicianTest__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventPhysicianTest__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventPhysicianTest__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventPhysicianTest_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventPhysicianTest_==null)
				{
					_organizationRoleUserCollectionViaEventPhysicianTest_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventPhysicianTest_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventPhysicianTest_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaHostPayment
		{
			get
			{
				if(_organizationRoleUserCollectionViaHostPayment==null)
				{
					_organizationRoleUserCollectionViaHostPayment = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaHostPayment.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaHostPayment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventPhysicianTest
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventPhysicianTest==null)
				{
					_organizationRoleUserCollectionViaEventPhysicianTest = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventPhysicianTest.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventPhysicianTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventStaffAssignment
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventStaffAssignment==null)
				{
					_organizationRoleUserCollectionViaEventStaffAssignment = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventStaffAssignment.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventStaffAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventAppointmentCancellationLog==null)
				{
					_organizationRoleUserCollectionViaEventAppointmentCancellationLog = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventAppointmentChangeLog
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventAppointmentChangeLog==null)
				{
					_organizationRoleUserCollectionViaEventAppointmentChangeLog = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventAppointmentChangeLog.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventAppointmentChangeLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventAccountTestHcpcsCode==null)
				{
					_organizationRoleUserCollectionViaEventAccountTestHcpcsCode = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventAccountTestHcpcsCode.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventAccountTestHcpcsCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventAccountTestHcpcsCode_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_==null)
				{
					_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventAccountTestHcpcsCode_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventAccountTestHcpcsCode_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_==null)
				{
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerQuestionAnswer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventAppointmentChangeLog_==null)
				{
					_organizationRoleUserCollectionViaEventAppointmentChangeLog_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventAppointmentChangeLog_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventAppointmentChangeLog_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerQuestionAnswer==null)
				{
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaDisqualifiedTest_
		{
			get
			{
				if(_organizationRoleUserCollectionViaDisqualifiedTest_==null)
				{
					_organizationRoleUserCollectionViaDisqualifiedTest_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaDisqualifiedTest_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaDisqualifiedTest_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer__
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer__==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer==null)
				{
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCallQueueCustomer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCallQueueCustomer_==null)
				{
					_organizationRoleUserCollectionViaCallQueueCustomer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCallQueueCustomer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCallQueueCustomer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomEventNotification
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomEventNotification==null)
				{
					_organizationRoleUserCollectionViaCustomEventNotification = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomEventNotification.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomEventNotification;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaDisqualifiedTest
		{
			get
			{
				if(_organizationRoleUserCollectionViaDisqualifiedTest==null)
				{
					_organizationRoleUserCollectionViaDisqualifiedTest = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_==null)
				{
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerClinicalQuestionAnswer_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaCustomerRegistrationNotes
		{
			get
			{
				if(_organizationRoleUserCollectionViaCustomerRegistrationNotes==null)
				{
					_organizationRoleUserCollectionViaCustomerRegistrationNotes = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaCustomerRegistrationNotes.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaCustomerRegistrationNotes;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_____
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_____==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_____ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_____.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult________
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult________==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult________ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult________.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult________;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult___
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult___==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult___ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult___.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult___;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult__
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult__==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult__ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult__.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult__;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult______
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult______==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult______ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult______.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult____
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult____==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult____ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult____.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult____;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomers
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomers==null)
				{
					_organizationRoleUserCollectionViaEventCustomers = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomers.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomers;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomers_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomers_==null)
				{
					_organizationRoleUserCollectionViaEventCustomers_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomers_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomers_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_______
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_______==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_______ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_______.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_______;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'OrganizationRoleUserEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(OrganizationRoleUserEntity))]
		public virtual EntityCollection<OrganizationRoleUserEntity> OrganizationRoleUserCollectionViaEventCustomerResult_
		{
			get
			{
				if(_organizationRoleUserCollectionViaEventCustomerResult_==null)
				{
					_organizationRoleUserCollectionViaEventCustomerResult_ = new EntityCollection<OrganizationRoleUserEntity>(EntityFactoryCache2.GetEntityFactory(typeof(OrganizationRoleUserEntityFactory)));
					_organizationRoleUserCollectionViaEventCustomerResult_.IsReadOnly=true;
				}
				return _organizationRoleUserCollectionViaEventCustomerResult_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PackageEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PackageEntity))]
		public virtual EntityCollection<PackageEntity> PackageCollectionViaEventPackageDetails
		{
			get
			{
				if(_packageCollectionViaEventPackageDetails==null)
				{
					_packageCollectionViaEventPackageDetails = new EntityCollection<PackageEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PackageEntityFactory)));
					_packageCollectionViaEventPackageDetails.IsReadOnly=true;
				}
				return _packageCollectionViaEventPackageDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianEvaluationEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianEvaluationEntity))]
		public virtual EntityCollection<PhysicianEvaluationEntity> PhysicianEvaluationCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_physicianEvaluationCollectionViaPhysicianInvoiceItem==null)
				{
					_physicianEvaluationCollectionViaPhysicianInvoiceItem = new EntityCollection<PhysicianEvaluationEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianEvaluationEntityFactory)));
					_physicianEvaluationCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _physicianEvaluationCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianInvoiceEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianInvoiceEntity))]
		public virtual EntityCollection<PhysicianInvoiceEntity> PhysicianInvoiceCollectionViaPhysicianInvoiceItem
		{
			get
			{
				if(_physicianInvoiceCollectionViaPhysicianInvoiceItem==null)
				{
					_physicianInvoiceCollectionViaPhysicianInvoiceItem = new EntityCollection<PhysicianInvoiceEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianInvoiceEntityFactory)));
					_physicianInvoiceCollectionViaPhysicianInvoiceItem.IsReadOnly=true;
				}
				return _physicianInvoiceCollectionViaPhysicianInvoiceItem;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianProfileEntity))]
		public virtual EntityCollection<PhysicianProfileEntity> PhysicianProfileCollectionViaPhysicianEventAssignment
		{
			get
			{
				if(_physicianProfileCollectionViaPhysicianEventAssignment==null)
				{
					_physicianProfileCollectionViaPhysicianEventAssignment = new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory)));
					_physicianProfileCollectionViaPhysicianEventAssignment.IsReadOnly=true;
				}
				return _physicianProfileCollectionViaPhysicianEventAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PhysicianProfileEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PhysicianProfileEntity))]
		public virtual EntityCollection<PhysicianProfileEntity> PhysicianProfileCollectionViaPhysicianEventAssignment_
		{
			get
			{
				if(_physicianProfileCollectionViaPhysicianEventAssignment_==null)
				{
					_physicianProfileCollectionViaPhysicianEventAssignment_ = new EntityCollection<PhysicianProfileEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PhysicianProfileEntityFactory)));
					_physicianProfileCollectionViaPhysicianEventAssignment_.IsReadOnly=true;
				}
				return _physicianProfileCollectionViaPhysicianEventAssignment_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PodDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PodDetailsEntity))]
		public virtual EntityCollection<PodDetailsEntity> PodDetailsCollectionViaEventStaffAssignment
		{
			get
			{
				if(_podDetailsCollectionViaEventStaffAssignment==null)
				{
					_podDetailsCollectionViaEventStaffAssignment = new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory)));
					_podDetailsCollectionViaEventStaffAssignment.IsReadOnly=true;
				}
				return _podDetailsCollectionViaEventStaffAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PodDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PodDetailsEntity))]
		public virtual EntityCollection<PodDetailsEntity> PodDetailsCollectionViaEventPod
		{
			get
			{
				if(_podDetailsCollectionViaEventPod==null)
				{
					_podDetailsCollectionViaEventPod = new EntityCollection<PodDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodDetailsEntityFactory)));
					_podDetailsCollectionViaEventPod.IsReadOnly=true;
				}
				return _podDetailsCollectionViaEventPod;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PodRoomEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PodRoomEntity))]
		public virtual EntityCollection<PodRoomEntity> PodRoomCollectionViaEventPackageDetails
		{
			get
			{
				if(_podRoomCollectionViaEventPackageDetails==null)
				{
					_podRoomCollectionViaEventPackageDetails = new EntityCollection<PodRoomEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PodRoomEntityFactory)));
					_podRoomCollectionViaEventPackageDetails.IsReadOnly=true;
				}
				return _podRoomCollectionViaEventPackageDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationQuestionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationQuestionEntity))]
		public virtual EntityCollection<PreQualificationQuestionEntity> PreQualificationQuestionCollectionViaEventCustomerQuestionAnswer
		{
			get
			{
				if(_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer==null)
				{
					_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer = new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory)));
					_preQualificationQuestionCollectionViaEventCustomerQuestionAnswer.IsReadOnly=true;
				}
				return _preQualificationQuestionCollectionViaEventCustomerQuestionAnswer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationQuestionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationQuestionEntity))]
		public virtual EntityCollection<PreQualificationQuestionEntity> PreQualificationQuestionCollectionViaDisqualifiedTest
		{
			get
			{
				if(_preQualificationQuestionCollectionViaDisqualifiedTest==null)
				{
					_preQualificationQuestionCollectionViaDisqualifiedTest = new EntityCollection<PreQualificationQuestionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationQuestionEntityFactory)));
					_preQualificationQuestionCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _preQualificationQuestionCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'PreQualificationTestTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(PreQualificationTestTemplateEntity))]
		public virtual EntityCollection<PreQualificationTestTemplateEntity> PreQualificationTestTemplateCollectionViaEventTest
		{
			get
			{
				if(_preQualificationTestTemplateCollectionViaEventTest==null)
				{
					_preQualificationTestTemplateCollectionViaEventTest = new EntityCollection<PreQualificationTestTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(PreQualificationTestTemplateEntityFactory)));
					_preQualificationTestTemplateCollectionViaEventTest.IsReadOnly=true;
				}
				return _preQualificationTestTemplateCollectionViaEventTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> ProductCollectionViaEventProductExclusion
		{
			get
			{
				if(_productCollectionViaEventProductExclusion==null)
				{
					_productCollectionViaEventProductExclusion = new EntityCollection<ProductEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProductEntityFactory)));
					_productCollectionViaEventProductExclusion.IsReadOnly=true;
				}
				return _productCollectionViaEventProductExclusion;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectCustomerEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectCustomerEntity))]
		public virtual EntityCollection<ProspectCustomerEntity> ProspectCustomerCollectionViaCallQueueCustomer
		{
			get
			{
				if(_prospectCustomerCollectionViaCallQueueCustomer==null)
				{
					_prospectCustomerCollectionViaCallQueueCustomer = new EntityCollection<ProspectCustomerEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectCustomerEntityFactory)));
					_prospectCustomerCollectionViaCallQueueCustomer.IsReadOnly=true;
				}
				return _prospectCustomerCollectionViaCallQueueCustomer;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectsEntity))]
		public virtual EntityCollection<ProspectsEntity> ProspectsCollectionViaHostPayment
		{
			get
			{
				if(_prospectsCollectionViaHostPayment==null)
				{
					_prospectsCollectionViaHostPayment = new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory)));
					_prospectsCollectionViaHostPayment.IsReadOnly=true;
				}
				return _prospectsCollectionViaHostPayment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ProspectsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ProspectsEntity))]
		public virtual EntityCollection<ProspectsEntity> ProspectsCollectionViaHostEventDetails
		{
			get
			{
				if(_prospectsCollectionViaHostEventDetails==null)
				{
					_prospectsCollectionViaHostEventDetails = new EntityCollection<ProspectsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ProspectsEntityFactory)));
					_prospectsCollectionViaHostEventDetails.IsReadOnly=true;
				}
				return _prospectsCollectionViaHostEventDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RefundRequestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RefundRequestEntity))]
		public virtual EntityCollection<RefundRequestEntity> RefundRequestCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_refundRequestCollectionViaEventAppointmentCancellationLog==null)
				{
					_refundRequestCollectionViaEventAppointmentCancellationLog = new EntityCollection<RefundRequestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RefundRequestEntityFactory)));
					_refundRequestCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _refundRequestCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RescheduleCancelDispositionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RescheduleCancelDispositionEntity))]
		public virtual EntityCollection<RescheduleCancelDispositionEntity> RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog
		{
			get
			{
				if(_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog==null)
				{
					_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog = new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory)));
					_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog.IsReadOnly=true;
				}
				return _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RescheduleCancelDispositionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RescheduleCancelDispositionEntity))]
		public virtual EntityCollection<RescheduleCancelDispositionEntity> RescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog
		{
			get
			{
				if(_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog==null)
				{
					_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog = new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory)));
					_rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog.IsReadOnly=true;
				}
				return _rescheduleCancelDispositionCollectionViaEventAppointmentCancellationLog;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'RescheduleCancelDispositionEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(RescheduleCancelDispositionEntity))]
		public virtual EntityCollection<RescheduleCancelDispositionEntity> RescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_
		{
			get
			{
				if(_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_==null)
				{
					_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_ = new EntityCollection<RescheduleCancelDispositionEntity>(EntityFactoryCache2.GetEntityFactory(typeof(RescheduleCancelDispositionEntityFactory)));
					_rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_.IsReadOnly=true;
				}
				return _rescheduleCancelDispositionCollectionViaEventAppointmentChangeLog_;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ScheduleTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ScheduleTemplateEntity))]
		public virtual EntityCollection<ScheduleTemplateEntity> ScheduleTemplateCollectionViaEventScheduleTemplate
		{
			get
			{
				if(_scheduleTemplateCollectionViaEventScheduleTemplate==null)
				{
					_scheduleTemplateCollectionViaEventScheduleTemplate = new EntityCollection<ScheduleTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ScheduleTemplateEntityFactory)));
					_scheduleTemplateCollectionViaEventScheduleTemplate.IsReadOnly=true;
				}
				return _scheduleTemplateCollectionViaEventScheduleTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'StaffEventRoleEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(StaffEventRoleEntity))]
		public virtual EntityCollection<StaffEventRoleEntity> StaffEventRoleCollectionViaEventStaffAssignment
		{
			get
			{
				if(_staffEventRoleCollectionViaEventStaffAssignment==null)
				{
					_staffEventRoleCollectionViaEventStaffAssignment = new EntityCollection<StaffEventRoleEntity>(EntityFactoryCache2.GetEntityFactory(typeof(StaffEventRoleEntityFactory)));
					_staffEventRoleCollectionViaEventStaffAssignment.IsReadOnly=true;
				}
				return _staffEventRoleCollectionViaEventStaffAssignment;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'SurveyTemplateEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(SurveyTemplateEntity))]
		public virtual EntityCollection<SurveyTemplateEntity> SurveyTemplateCollectionViaEventSurveyTemplate
		{
			get
			{
				if(_surveyTemplateCollectionViaEventSurveyTemplate==null)
				{
					_surveyTemplateCollectionViaEventSurveyTemplate = new EntityCollection<SurveyTemplateEntity>(EntityFactoryCache2.GetEntityFactory(typeof(SurveyTemplateEntityFactory)));
					_surveyTemplateCollectionViaEventSurveyTemplate.IsReadOnly=true;
				}
				return _surveyTemplateCollectionViaEventSurveyTemplate;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TaskDetailsEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TaskDetailsEntity))]
		public virtual EntityCollection<TaskDetailsEntity> TaskDetailsCollectionViaEventTaskDetails
		{
			get
			{
				if(_taskDetailsCollectionViaEventTaskDetails==null)
				{
					_taskDetailsCollectionViaEventTaskDetails = new EntityCollection<TaskDetailsEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TaskDetailsEntityFactory)));
					_taskDetailsCollectionViaEventTaskDetails.IsReadOnly=true;
				}
				return _taskDetailsCollectionViaEventTaskDetails;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TempCartEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TempCartEntity))]
		public virtual EntityCollection<TempCartEntity> TempCartCollectionViaPreQualificationResult
		{
			get
			{
				if(_tempCartCollectionViaPreQualificationResult==null)
				{
					_tempCartCollectionViaPreQualificationResult = new EntityCollection<TempCartEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TempCartEntityFactory)));
					_tempCartCollectionViaPreQualificationResult.IsReadOnly=true;
				}
				return _tempCartCollectionViaPreQualificationResult;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TerritoryEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TerritoryEntity))]
		public virtual EntityCollection<TerritoryEntity> TerritoryCollectionViaEventPod
		{
			get
			{
				if(_territoryCollectionViaEventPod==null)
				{
					_territoryCollectionViaEventPod = new EntityCollection<TerritoryEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TerritoryEntityFactory)));
					_territoryCollectionViaEventPod.IsReadOnly=true;
				}
				return _territoryCollectionViaEventPod;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaEventPhysicianTest
		{
			get
			{
				if(_testCollectionViaEventPhysicianTest==null)
				{
					_testCollectionViaEventPhysicianTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaEventPhysicianTest.IsReadOnly=true;
				}
				return _testCollectionViaEventPhysicianTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaDisqualifiedTest
		{
			get
			{
				if(_testCollectionViaDisqualifiedTest==null)
				{
					_testCollectionViaDisqualifiedTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaDisqualifiedTest.IsReadOnly=true;
				}
				return _testCollectionViaDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaEventTest
		{
			get
			{
				if(_testCollectionViaEventTest==null)
				{
					_testCollectionViaEventTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaEventTest.IsReadOnly=true;
				}
				return _testCollectionViaEventTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaCustomerEventTestFinding
		{
			get
			{
				if(_testCollectionViaCustomerEventTestFinding==null)
				{
					_testCollectionViaCustomerEventTestFinding = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaCustomerEventTestFinding.IsReadOnly=true;
				}
				return _testCollectionViaCustomerEventTestFinding;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestEntity))]
		public virtual EntityCollection<TestEntity> TestCollectionViaDependentDisqualifiedTest
		{
			get
			{
				if(_testCollectionViaDependentDisqualifiedTest==null)
				{
					_testCollectionViaDependentDisqualifiedTest = new EntityCollection<TestEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestEntityFactory)));
					_testCollectionViaDependentDisqualifiedTest.IsReadOnly=true;
				}
				return _testCollectionViaDependentDisqualifiedTest;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'TestHcpcsCodeEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(TestHcpcsCodeEntity))]
		public virtual EntityCollection<TestHcpcsCodeEntity> TestHcpcsCodeCollectionViaEventAccountTestHcpcsCode
		{
			get
			{
				if(_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode==null)
				{
					_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode = new EntityCollection<TestHcpcsCodeEntity>(EntityFactoryCache2.GetEntityFactory(typeof(TestHcpcsCodeEntityFactory)));
					_testHcpcsCodeCollectionViaEventAccountTestHcpcsCode.IsReadOnly=true;
				}
				return _testHcpcsCodeCollectionViaEventAccountTestHcpcsCode;
			}
		}

		/// <summary> Gets the EntityCollection with the related entities of type 'ZipEntity' which are related to this entity via a relation of type 'm:n'.
		/// If the EntityCollection hasn't been fetched yet, the collection returned will be empty.</summary>
		[TypeContainedAttribute(typeof(ZipEntity))]
		public virtual EntityCollection<ZipEntity> ZipCollectionViaEventZip
		{
			get
			{
				if(_zipCollectionViaEventZip==null)
				{
					_zipCollectionViaEventZip = new EntityCollection<ZipEntity>(EntityFactoryCache2.GetEntityFactory(typeof(ZipEntityFactory)));
					_zipCollectionViaEventZip.IsReadOnly=true;
				}
				return _zipCollectionViaEventZip;
			}
		}

		/// <summary> Gets / sets related entity of type 'CommunicationModeEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual CommunicationModeEntity CommunicationMode
		{
			get
			{
				return _communicationMode;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncCommunicationMode(value);
				}
				else
				{
					if(value==null)
					{
						if(_communicationMode != null)
						{
							_communicationMode.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_communicationMode!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'EventTypeEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual EventTypeEntity EventType
		{
			get
			{
				return _eventType;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncEventType(value);
				}
				else
				{
					if(value==null)
					{
						if(_eventType != null)
						{
							_eventType.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_eventType!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'HafTemplateEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual HafTemplateEntity HafTemplate
		{
			get
			{
				return _hafTemplate;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncHafTemplate(value);
				}
				else
				{
					if(value==null)
					{
						if(_hafTemplate != null)
						{
							_hafTemplate.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_hafTemplate!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup
		{
			get
			{
				return _lookup;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup != null)
						{
							_lookup.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_lookup!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup____
		{
			get
			{
				return _lookup____;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup____(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup____ != null)
						{
							_lookup____.UnsetRelatedEntity(this, "Events____");
						}
					}
					else
					{
						if(_lookup____!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events____");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup___
		{
			get
			{
				return _lookup___;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup___(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup___ != null)
						{
							_lookup___.UnsetRelatedEntity(this, "Events___");
						}
					}
					else
					{
						if(_lookup___!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events___");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup__
		{
			get
			{
				return _lookup__;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup__(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup__ != null)
						{
							_lookup__.UnsetRelatedEntity(this, "Events__");
						}
					}
					else
					{
						if(_lookup__!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events__");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'LookupEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual LookupEntity Lookup_
		{
			get
			{
				return _lookup_;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncLookup_(value);
				}
				else
				{
					if(value==null)
					{
						if(_lookup_ != null)
						{
							_lookup_.UnsetRelatedEntity(this, "Events_");
						}
					}
					else
					{
						if(_lookup_!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events_");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'NotesDetailsEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual NotesDetailsEntity NotesDetails
		{
			get
			{
				return _notesDetails;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncNotesDetails(value);
				}
				else
				{
					if(value==null)
					{
						if(_notesDetails != null)
						{
							_notesDetails.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_notesDetails!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser_
		{
			get
			{
				return _organizationRoleUser_;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser_(value);
				}
				else
				{
					if(value==null)
					{
						if(_organizationRoleUser_ != null)
						{
							_organizationRoleUser_.UnsetRelatedEntity(this, "Events_");
						}
					}
					else
					{
						if(_organizationRoleUser_!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events_");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser____
		{
			get
			{
				return _organizationRoleUser____;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser____(value);
				}
				else
				{
					if(value==null)
					{
						if(_organizationRoleUser____ != null)
						{
							_organizationRoleUser____.UnsetRelatedEntity(this, "Events____");
						}
					}
					else
					{
						if(_organizationRoleUser____!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events____");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser__
		{
			get
			{
				return _organizationRoleUser__;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser__(value);
				}
				else
				{
					if(value==null)
					{
						if(_organizationRoleUser__ != null)
						{
							_organizationRoleUser__.UnsetRelatedEntity(this, "Events__");
						}
					}
					else
					{
						if(_organizationRoleUser__!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events__");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser
		{
			get
			{
				return _organizationRoleUser;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser(value);
				}
				else
				{
					if(value==null)
					{
						if(_organizationRoleUser != null)
						{
							_organizationRoleUser.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_organizationRoleUser!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'OrganizationRoleUserEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual OrganizationRoleUserEntity OrganizationRoleUser___
		{
			get
			{
				return _organizationRoleUser___;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncOrganizationRoleUser___(value);
				}
				else
				{
					if(value==null)
					{
						if(_organizationRoleUser___ != null)
						{
							_organizationRoleUser___.UnsetRelatedEntity(this, "Events___");
						}
					}
					else
					{
						if(_organizationRoleUser___!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events___");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'ScheduleMethodEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual ScheduleMethodEntity ScheduleMethod
		{
			get
			{
				return _scheduleMethod;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncScheduleMethod(value);
				}
				else
				{
					if(value==null)
					{
						if(_scheduleMethod != null)
						{
							_scheduleMethod.UnsetRelatedEntity(this, "Events");
						}
					}
					else
					{
						if(_scheduleMethod!=value)
						{
							((IEntity2)value).SetRelatedEntity(this, "Events");
						}
					}
				}
			}
		}

		/// <summary> Gets / sets related entity of type 'EventAccountEntity' which has to be set using a fetch action earlier. If no related entity
		/// is set for this property, null is returned. This property is not visible in databound grids.</summary>
		[Browsable(false)]
		public virtual EventAccountEntity EventAccount
		{
			get
			{
				return _eventAccount;
			}
			set
			{
				if(base.IsDeserializing)
				{
					SetupSyncEventAccount(value);
					if((SerializationHelper.Optimization == SerializationOptimization.Fast) && (value!=null))
					{
						value.SetRelatedEntity(this, "Events");
					}
				}
				else
				{
					if(value==null)
					{
						bool raisePropertyChanged = (_eventAccount !=null);
						DesetupSyncEventAccount(true, true);
						if(raisePropertyChanged)
						{
							OnPropertyChanged("EventAccount");
						}
					}
					else
					{
						if(_eventAccount!=value)
						{
							IEntity2 relatedEntity = (IEntity2)value;
							relatedEntity.SetRelatedEntity(this, "Events");
							SetupSyncEventAccount(relatedEntity);
						}
					}
				}
			}
		}
	
		
		/// <summary> Gets the type of the hierarchy this entity is in. </summary>
		protected override InheritanceHierarchyType LLBLGenProIsInHierarchyOfType
		{
			get { return InheritanceHierarchyType.None;}
		}
		
		/// <summary> Gets or sets a value indicating whether this entity is a subtype</summary>
		protected override bool LLBLGenProIsSubType
		{
			get { return false;}
		}
		
		/// <summary>Returns the Falcon.Data.EntityType enum value for this entity.</summary>
		[Browsable(false), XmlIgnore]
		public override int LLBLGenProEntityTypeValue 
		{ 
			get { return (int)Falcon.Data.EntityType.EventsEntity; }
		}
		#endregion


		#region Custom Entity code
		
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		#endregion

		#region Included code

		#endregion
	}
}
